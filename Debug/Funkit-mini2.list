
Funkit-mini2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08007b88  08007b88  00008b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e7c  08007e7c  000090a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e7c  08007e7c  00008e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e84  08007e84  000090a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e84  08007e84  00008e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e88  08007e88  00008e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08007e8c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003d53c  200000a4  08007f30  000090a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003d5e0  08007f30  000095e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011191  00000000  00000000  000090d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000294e  00000000  00000000  0001a265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  0001cbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8f  00000000  00000000  0001dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029d3  00000000  00000000  0001e85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178fe  00000000  00000000  00021232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1b2e  00000000  00000000  00038b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a65e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000498c  00000000  00000000  0012a6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012f030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b70 	.word	0x08007b70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	08007b70 	.word	0x08007b70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2iz>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000884:	d215      	bcs.n	80008b2 <__aeabi_d2iz+0x36>
 8000886:	d511      	bpl.n	80008ac <__aeabi_d2iz+0x30>
 8000888:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d912      	bls.n	80008b8 <__aeabi_d2iz+0x3c>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008a2:	fa23 f002 	lsr.w	r0, r3, r2
 80008a6:	bf18      	it	ne
 80008a8:	4240      	negne	r0, r0
 80008aa:	4770      	bx	lr
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	4770      	bx	lr
 80008b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008b6:	d105      	bne.n	80008c4 <__aeabi_d2iz+0x48>
 80008b8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008bc:	bf08      	it	eq
 80008be:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008c2:	4770      	bx	lr
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <__aeabi_d2f>:
 80008cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008d4:	bf24      	itt	cs
 80008d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008de:	d90d      	bls.n	80008fc <__aeabi_d2f+0x30>
 80008e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008f4:	bf08      	it	eq
 80008f6:	f020 0001 	biceq.w	r0, r0, #1
 80008fa:	4770      	bx	lr
 80008fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000900:	d121      	bne.n	8000946 <__aeabi_d2f+0x7a>
 8000902:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000906:	bfbc      	itt	lt
 8000908:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800090c:	4770      	bxlt	lr
 800090e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000912:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000916:	f1c2 0218 	rsb	r2, r2, #24
 800091a:	f1c2 0c20 	rsb	ip, r2, #32
 800091e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000922:	fa20 f002 	lsr.w	r0, r0, r2
 8000926:	bf18      	it	ne
 8000928:	f040 0001 	orrne.w	r0, r0, #1
 800092c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000930:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000934:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000938:	ea40 000c 	orr.w	r0, r0, ip
 800093c:	fa23 f302 	lsr.w	r3, r3, r2
 8000940:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000944:	e7cc      	b.n	80008e0 <__aeabi_d2f+0x14>
 8000946:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800094a:	d107      	bne.n	800095c <__aeabi_d2f+0x90>
 800094c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000950:	bf1e      	ittt	ne
 8000952:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000956:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800095a:	4770      	bxne	lr
 800095c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000960:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000964:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <__aeabi_uldivmod>:
 800096c:	b953      	cbnz	r3, 8000984 <__aeabi_uldivmod+0x18>
 800096e:	b94a      	cbnz	r2, 8000984 <__aeabi_uldivmod+0x18>
 8000970:	2900      	cmp	r1, #0
 8000972:	bf08      	it	eq
 8000974:	2800      	cmpeq	r0, #0
 8000976:	bf1c      	itt	ne
 8000978:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800097c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000980:	f000 b988 	b.w	8000c94 <__aeabi_idiv0>
 8000984:	f1ad 0c08 	sub.w	ip, sp, #8
 8000988:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800098c:	f000 f806 	bl	800099c <__udivmoddi4>
 8000990:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000998:	b004      	add	sp, #16
 800099a:	4770      	bx	lr

0800099c <__udivmoddi4>:
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a0:	9d08      	ldr	r5, [sp, #32]
 80009a2:	468e      	mov	lr, r1
 80009a4:	4604      	mov	r4, r0
 80009a6:	4688      	mov	r8, r1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d14a      	bne.n	8000a42 <__udivmoddi4+0xa6>
 80009ac:	428a      	cmp	r2, r1
 80009ae:	4617      	mov	r7, r2
 80009b0:	d962      	bls.n	8000a78 <__udivmoddi4+0xdc>
 80009b2:	fab2 f682 	clz	r6, r2
 80009b6:	b14e      	cbz	r6, 80009cc <__udivmoddi4+0x30>
 80009b8:	f1c6 0320 	rsb	r3, r6, #32
 80009bc:	fa01 f806 	lsl.w	r8, r1, r6
 80009c0:	fa20 f303 	lsr.w	r3, r0, r3
 80009c4:	40b7      	lsls	r7, r6
 80009c6:	ea43 0808 	orr.w	r8, r3, r8
 80009ca:	40b4      	lsls	r4, r6
 80009cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d0:	fa1f fc87 	uxth.w	ip, r7
 80009d4:	fbb8 f1fe 	udiv	r1, r8, lr
 80009d8:	0c23      	lsrs	r3, r4, #16
 80009da:	fb0e 8811 	mls	r8, lr, r1, r8
 80009de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009e2:	fb01 f20c 	mul.w	r2, r1, ip
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d909      	bls.n	80009fe <__udivmoddi4+0x62>
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80009f0:	f080 80ea 	bcs.w	8000bc8 <__udivmoddi4+0x22c>
 80009f4:	429a      	cmp	r2, r3
 80009f6:	f240 80e7 	bls.w	8000bc8 <__udivmoddi4+0x22c>
 80009fa:	3902      	subs	r1, #2
 80009fc:	443b      	add	r3, r7
 80009fe:	1a9a      	subs	r2, r3, r2
 8000a00:	b2a3      	uxth	r3, r4
 8000a02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a12:	459c      	cmp	ip, r3
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x8e>
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000a1c:	f080 80d6 	bcs.w	8000bcc <__udivmoddi4+0x230>
 8000a20:	459c      	cmp	ip, r3
 8000a22:	f240 80d3 	bls.w	8000bcc <__udivmoddi4+0x230>
 8000a26:	443b      	add	r3, r7
 8000a28:	3802      	subs	r0, #2
 8000a2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a2e:	eba3 030c 	sub.w	r3, r3, ip
 8000a32:	2100      	movs	r1, #0
 8000a34:	b11d      	cbz	r5, 8000a3e <__udivmoddi4+0xa2>
 8000a36:	40f3      	lsrs	r3, r6
 8000a38:	2200      	movs	r2, #0
 8000a3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d905      	bls.n	8000a52 <__udivmoddi4+0xb6>
 8000a46:	b10d      	cbz	r5, 8000a4c <__udivmoddi4+0xb0>
 8000a48:	e9c5 0100 	strd	r0, r1, [r5]
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4608      	mov	r0, r1
 8000a50:	e7f5      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000a52:	fab3 f183 	clz	r1, r3
 8000a56:	2900      	cmp	r1, #0
 8000a58:	d146      	bne.n	8000ae8 <__udivmoddi4+0x14c>
 8000a5a:	4573      	cmp	r3, lr
 8000a5c:	d302      	bcc.n	8000a64 <__udivmoddi4+0xc8>
 8000a5e:	4282      	cmp	r2, r0
 8000a60:	f200 8105 	bhi.w	8000c6e <__udivmoddi4+0x2d2>
 8000a64:	1a84      	subs	r4, r0, r2
 8000a66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	4690      	mov	r8, r2
 8000a6e:	2d00      	cmp	r5, #0
 8000a70:	d0e5      	beq.n	8000a3e <__udivmoddi4+0xa2>
 8000a72:	e9c5 4800 	strd	r4, r8, [r5]
 8000a76:	e7e2      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	f000 8090 	beq.w	8000b9e <__udivmoddi4+0x202>
 8000a7e:	fab2 f682 	clz	r6, r2
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	f040 80a4 	bne.w	8000bd0 <__udivmoddi4+0x234>
 8000a88:	1a8a      	subs	r2, r1, r2
 8000a8a:	0c03      	lsrs	r3, r0, #16
 8000a8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a90:	b280      	uxth	r0, r0
 8000a92:	b2bc      	uxth	r4, r7
 8000a94:	2101      	movs	r1, #1
 8000a96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aa2:	fb04 f20c 	mul.w	r2, r4, ip
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d907      	bls.n	8000aba <__udivmoddi4+0x11e>
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000ab0:	d202      	bcs.n	8000ab8 <__udivmoddi4+0x11c>
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	f200 80e0 	bhi.w	8000c78 <__udivmoddi4+0x2dc>
 8000ab8:	46c4      	mov	ip, r8
 8000aba:	1a9b      	subs	r3, r3, r2
 8000abc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ac0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ac4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ac8:	fb02 f404 	mul.w	r4, r2, r4
 8000acc:	429c      	cmp	r4, r3
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x144>
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x142>
 8000ad8:	429c      	cmp	r4, r3
 8000ada:	f200 80ca 	bhi.w	8000c72 <__udivmoddi4+0x2d6>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	1b1b      	subs	r3, r3, r4
 8000ae2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ae6:	e7a5      	b.n	8000a34 <__udivmoddi4+0x98>
 8000ae8:	f1c1 0620 	rsb	r6, r1, #32
 8000aec:	408b      	lsls	r3, r1
 8000aee:	fa22 f706 	lsr.w	r7, r2, r6
 8000af2:	431f      	orrs	r7, r3
 8000af4:	fa0e f401 	lsl.w	r4, lr, r1
 8000af8:	fa20 f306 	lsr.w	r3, r0, r6
 8000afc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b04:	4323      	orrs	r3, r4
 8000b06:	fa00 f801 	lsl.w	r8, r0, r1
 8000b0a:	fa1f fc87 	uxth.w	ip, r7
 8000b0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000b12:	0c1c      	lsrs	r4, r3, #16
 8000b14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	fa02 f201 	lsl.w	r2, r2, r1
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x1a0>
 8000b28:	193c      	adds	r4, r7, r4
 8000b2a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000b2e:	f080 809c 	bcs.w	8000c6a <__udivmoddi4+0x2ce>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f240 8099 	bls.w	8000c6a <__udivmoddi4+0x2ce>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	443c      	add	r4, r7
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	fa1f fe83 	uxth.w	lr, r3
 8000b44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b48:	fb09 4413 	mls	r4, r9, r3, r4
 8000b4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b54:	45a4      	cmp	ip, r4
 8000b56:	d908      	bls.n	8000b6a <__udivmoddi4+0x1ce>
 8000b58:	193c      	adds	r4, r7, r4
 8000b5a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000b5e:	f080 8082 	bcs.w	8000c66 <__udivmoddi4+0x2ca>
 8000b62:	45a4      	cmp	ip, r4
 8000b64:	d97f      	bls.n	8000c66 <__udivmoddi4+0x2ca>
 8000b66:	3b02      	subs	r3, #2
 8000b68:	443c      	add	r4, r7
 8000b6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b6e:	eba4 040c 	sub.w	r4, r4, ip
 8000b72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b76:	4564      	cmp	r4, ip
 8000b78:	4673      	mov	r3, lr
 8000b7a:	46e1      	mov	r9, ip
 8000b7c:	d362      	bcc.n	8000c44 <__udivmoddi4+0x2a8>
 8000b7e:	d05f      	beq.n	8000c40 <__udivmoddi4+0x2a4>
 8000b80:	b15d      	cbz	r5, 8000b9a <__udivmoddi4+0x1fe>
 8000b82:	ebb8 0203 	subs.w	r2, r8, r3
 8000b86:	eb64 0409 	sbc.w	r4, r4, r9
 8000b8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000b8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000b92:	431e      	orrs	r6, r3
 8000b94:	40cc      	lsrs	r4, r1
 8000b96:	e9c5 6400 	strd	r6, r4, [r5]
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	e74f      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000b9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ba2:	0c01      	lsrs	r1, r0, #16
 8000ba4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ba8:	b280      	uxth	r0, r0
 8000baa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bae:	463b      	mov	r3, r7
 8000bb0:	4638      	mov	r0, r7
 8000bb2:	463c      	mov	r4, r7
 8000bb4:	46b8      	mov	r8, r7
 8000bb6:	46be      	mov	lr, r7
 8000bb8:	2620      	movs	r6, #32
 8000bba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bbe:	eba2 0208 	sub.w	r2, r2, r8
 8000bc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bc6:	e766      	b.n	8000a96 <__udivmoddi4+0xfa>
 8000bc8:	4601      	mov	r1, r0
 8000bca:	e718      	b.n	80009fe <__udivmoddi4+0x62>
 8000bcc:	4610      	mov	r0, r2
 8000bce:	e72c      	b.n	8000a2a <__udivmoddi4+0x8e>
 8000bd0:	f1c6 0220 	rsb	r2, r6, #32
 8000bd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000bd8:	40b7      	lsls	r7, r6
 8000bda:	40b1      	lsls	r1, r6
 8000bdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000be0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be4:	430a      	orrs	r2, r1
 8000be6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000bea:	b2bc      	uxth	r4, r7
 8000bec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000bf0:	0c11      	lsrs	r1, r2, #16
 8000bf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf6:	fb08 f904 	mul.w	r9, r8, r4
 8000bfa:	40b0      	lsls	r0, r6
 8000bfc:	4589      	cmp	r9, r1
 8000bfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c02:	b280      	uxth	r0, r0
 8000c04:	d93e      	bls.n	8000c84 <__udivmoddi4+0x2e8>
 8000c06:	1879      	adds	r1, r7, r1
 8000c08:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000c0c:	d201      	bcs.n	8000c12 <__udivmoddi4+0x276>
 8000c0e:	4589      	cmp	r9, r1
 8000c10:	d81f      	bhi.n	8000c52 <__udivmoddi4+0x2b6>
 8000c12:	eba1 0109 	sub.w	r1, r1, r9
 8000c16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c1a:	fb09 f804 	mul.w	r8, r9, r4
 8000c1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c22:	b292      	uxth	r2, r2
 8000c24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c28:	4542      	cmp	r2, r8
 8000c2a:	d229      	bcs.n	8000c80 <__udivmoddi4+0x2e4>
 8000c2c:	18ba      	adds	r2, r7, r2
 8000c2e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000c32:	d2c4      	bcs.n	8000bbe <__udivmoddi4+0x222>
 8000c34:	4542      	cmp	r2, r8
 8000c36:	d2c2      	bcs.n	8000bbe <__udivmoddi4+0x222>
 8000c38:	f1a9 0102 	sub.w	r1, r9, #2
 8000c3c:	443a      	add	r2, r7
 8000c3e:	e7be      	b.n	8000bbe <__udivmoddi4+0x222>
 8000c40:	45f0      	cmp	r8, lr
 8000c42:	d29d      	bcs.n	8000b80 <__udivmoddi4+0x1e4>
 8000c44:	ebbe 0302 	subs.w	r3, lr, r2
 8000c48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c4c:	3801      	subs	r0, #1
 8000c4e:	46e1      	mov	r9, ip
 8000c50:	e796      	b.n	8000b80 <__udivmoddi4+0x1e4>
 8000c52:	eba7 0909 	sub.w	r9, r7, r9
 8000c56:	4449      	add	r1, r9
 8000c58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c60:	fb09 f804 	mul.w	r8, r9, r4
 8000c64:	e7db      	b.n	8000c1e <__udivmoddi4+0x282>
 8000c66:	4673      	mov	r3, lr
 8000c68:	e77f      	b.n	8000b6a <__udivmoddi4+0x1ce>
 8000c6a:	4650      	mov	r0, sl
 8000c6c:	e766      	b.n	8000b3c <__udivmoddi4+0x1a0>
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e6fd      	b.n	8000a6e <__udivmoddi4+0xd2>
 8000c72:	443b      	add	r3, r7
 8000c74:	3a02      	subs	r2, #2
 8000c76:	e733      	b.n	8000ae0 <__udivmoddi4+0x144>
 8000c78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c7c:	443b      	add	r3, r7
 8000c7e:	e71c      	b.n	8000aba <__udivmoddi4+0x11e>
 8000c80:	4649      	mov	r1, r9
 8000c82:	e79c      	b.n	8000bbe <__udivmoddi4+0x222>
 8000c84:	eba1 0109 	sub.w	r1, r1, r9
 8000c88:	46c4      	mov	ip, r8
 8000c8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8e:	fb09 f804 	mul.w	r8, r9, r4
 8000c92:	e7c4      	b.n	8000c1e <__udivmoddi4+0x282>

08000c94 <__aeabi_idiv0>:
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <EchoInit>:

static char strBuff[20] = {"1"};
echoState eState = {5000,0.,0.5,0,0,0};


void EchoInit(I2C_LCD_HandleTypeDef *lcdHandler){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	memset(delayLeft, 0, sizeof(delayLeft));
 8000ca0:	4a08      	ldr	r2, [pc, #32]	@ (8000cc4 <EchoInit+0x2c>)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4808      	ldr	r0, [pc, #32]	@ (8000cc8 <EchoInit+0x30>)
 8000ca6:	f006 fae5 	bl	8007274 <memset>
	memset(delayRight, 0, sizeof(delayRight));
 8000caa:	4a06      	ldr	r2, [pc, #24]	@ (8000cc4 <EchoInit+0x2c>)
 8000cac:	2100      	movs	r1, #0
 8000cae:	4807      	ldr	r0, [pc, #28]	@ (8000ccc <EchoInit+0x34>)
 8000cb0:	f006 fae0 	bl	8007274 <memset>
	lcdPtr = lcdHandler;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <EchoInit+0x38>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	0001d4c0 	.word	0x0001d4c0
 8000cc8:	200000c4 	.word	0x200000c4
 8000ccc:	2001d584 	.word	0x2001d584
 8000cd0:	200000c0 	.word	0x200000c0

08000cd4 <doEcho>:

void doEcho(int b){
 8000cd4:	b480      	push	{r7}
 8000cd6:	b08b      	sub	sp, #44	@ 0x2c
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

	int startBuf = b * BUF_SAMPLES / 2;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	029b      	lsls	r3, r3, #10
 8000ce0:	61bb      	str	r3, [r7, #24]
	int endBuf = startBuf + BUF_SAMPLES / 2;
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000ce8:	617b      	str	r3, [r7, #20]

	int i = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	623b      	str	r3, [r7, #32]
 8000cf2:	e030      	b.n	8000d56 <doEcho+0x82>
	{
		  srcLeft[i] = ( (rxBuf[pos]<<16)|rxBuf[pos+1] );
 8000cf4:	4a73      	ldr	r2, [pc, #460]	@ (8000ec4 <doEcho+0x1f0>)
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	6a3a      	ldr	r2, [r7, #32]
 8000d00:	3201      	adds	r2, #1
 8000d02:	4970      	ldr	r1, [pc, #448]	@ (8000ec4 <doEcho+0x1f0>)
 8000d04:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	ee07 3a90 	vmov	s15, r3
 8000d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d12:	4a6d      	ldr	r2, [pc, #436]	@ (8000ec8 <doEcho+0x1f4>)
 8000d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	edc3 7a00 	vstr	s15, [r3]
		  srcRight[i] =( (rxBuf[pos+2]<<16)|rxBuf[pos+3] );
 8000d1e:	6a3b      	ldr	r3, [r7, #32]
 8000d20:	3302      	adds	r3, #2
 8000d22:	4a68      	ldr	r2, [pc, #416]	@ (8000ec4 <doEcho+0x1f0>)
 8000d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d28:	041b      	lsls	r3, r3, #16
 8000d2a:	6a3a      	ldr	r2, [r7, #32]
 8000d2c:	3203      	adds	r2, #3
 8000d2e:	4965      	ldr	r1, [pc, #404]	@ (8000ec4 <doEcho+0x1f0>)
 8000d30:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	ee07 3a90 	vmov	s15, r3
 8000d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3e:	4a63      	ldr	r2, [pc, #396]	@ (8000ecc <doEcho+0x1f8>)
 8000d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	edc3 7a00 	vstr	s15, [r3]
		  i++;
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 8000d50:	6a3b      	ldr	r3, [r7, #32]
 8000d52:	3304      	adds	r3, #4
 8000d54:	623b      	str	r3, [r7, #32]
 8000d56:	6a3a      	ldr	r2, [r7, #32]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	dbca      	blt.n	8000cf4 <doEcho+0x20>
	}

	i = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	e0a0      	b.n	8000eaa <doEcho+0x1d6>
	  {

		  int32_t lval = srcLeft[i] + delayLeft[delayPtr] * eState.mix * eState.feedback;
 8000d68:	4a57      	ldr	r2, [pc, #348]	@ (8000ec8 <doEcho+0x1f4>)
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	ed93 7a00 	vldr	s14, [r3]
 8000d74:	4b56      	ldr	r3, [pc, #344]	@ (8000ed0 <doEcho+0x1fc>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a56      	ldr	r2, [pc, #344]	@ (8000ed4 <doEcho+0x200>)
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	edd3 6a00 	vldr	s13, [r3]
 8000d82:	4b55      	ldr	r3, [pc, #340]	@ (8000ed8 <doEcho+0x204>)
 8000d84:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d8c:	4b52      	ldr	r3, [pc, #328]	@ (8000ed8 <doEcho+0x204>)
 8000d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d9e:	ee17 3a90 	vmov	r3, s15
 8000da2:	613b      	str	r3, [r7, #16]
		  int32_t rval = srcRight[i] + delayRight[delayPtr] * eState.mix * eState.feedback;
 8000da4:	4a49      	ldr	r2, [pc, #292]	@ (8000ecc <doEcho+0x1f8>)
 8000da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	ed93 7a00 	vldr	s14, [r3]
 8000db0:	4b47      	ldr	r3, [pc, #284]	@ (8000ed0 <doEcho+0x1fc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a49      	ldr	r2, [pc, #292]	@ (8000edc <doEcho+0x208>)
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	edd3 6a00 	vldr	s13, [r3]
 8000dbe:	4b46      	ldr	r3, [pc, #280]	@ (8000ed8 <doEcho+0x204>)
 8000dc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000dc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dc8:	4b43      	ldr	r3, [pc, #268]	@ (8000ed8 <doEcho+0x204>)
 8000dca:	edd3 7a02 	vldr	s15, [r3, #8]
 8000dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dda:	ee17 3a90 	vmov	r3, s15
 8000dde:	60fb      	str	r3, [r7, #12]
		  delayLeft[delayPtr] = srcLeft[i] + delayLeft[delayPtr] * eState.feedback;
 8000de0:	4a39      	ldr	r2, [pc, #228]	@ (8000ec8 <doEcho+0x1f4>)
 8000de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	ed93 7a00 	vldr	s14, [r3]
 8000dec:	4b38      	ldr	r3, [pc, #224]	@ (8000ed0 <doEcho+0x1fc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a38      	ldr	r2, [pc, #224]	@ (8000ed4 <doEcho+0x200>)
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	edd3 6a00 	vldr	s13, [r3]
 8000dfa:	4b37      	ldr	r3, [pc, #220]	@ (8000ed8 <doEcho+0x204>)
 8000dfc:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e04:	4b32      	ldr	r3, [pc, #200]	@ (8000ed0 <doEcho+0x1fc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e0c:	4a31      	ldr	r2, [pc, #196]	@ (8000ed4 <doEcho+0x200>)
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	edc3 7a00 	vstr	s15, [r3]
		  delayRight[delayPtr] = srcRight[i] + delayRight[delayPtr] * eState.feedback;
 8000e16:	4a2d      	ldr	r2, [pc, #180]	@ (8000ecc <doEcho+0x1f8>)
 8000e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	ed93 7a00 	vldr	s14, [r3]
 8000e22:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed0 <doEcho+0x1fc>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a2d      	ldr	r2, [pc, #180]	@ (8000edc <doEcho+0x208>)
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	edd3 6a00 	vldr	s13, [r3]
 8000e30:	4b29      	ldr	r3, [pc, #164]	@ (8000ed8 <doEcho+0x204>)
 8000e32:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <doEcho+0x1fc>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e42:	4a26      	ldr	r2, [pc, #152]	@ (8000edc <doEcho+0x208>)
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	edc3 7a00 	vstr	s15, [r3]
		  delayPtr = (delayPtr + 1) % eState.delayLen;
 8000e4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <doEcho+0x1fc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a21      	ldr	r2, [pc, #132]	@ (8000ed8 <doEcho+0x204>)
 8000e54:	6812      	ldr	r2, [r2, #0]
 8000e56:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e5a:	fb01 f202 	mul.w	r2, r1, r2
 8000e5e:	1a9b      	subs	r3, r3, r2
 8000e60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed0 <doEcho+0x1fc>)
 8000e62:	6013      	str	r3, [r2, #0]
		  txBuf[pos] = (lval>>16)&0xFFFF;
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	0c1b      	lsrs	r3, r3, #16
 8000e68:	b299      	uxth	r1, r3
 8000e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee0 <doEcho+0x20c>)
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[pos+1] = lval&0xFFFF;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3301      	adds	r3, #1
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	b291      	uxth	r1, r2
 8000e7a:	4a19      	ldr	r2, [pc, #100]	@ (8000ee0 <doEcho+0x20c>)
 8000e7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[pos+2] = (rval>>16)&0xFFFF;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	0c1a      	lsrs	r2, r3, #16
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	3302      	adds	r3, #2
 8000e88:	b291      	uxth	r1, r2
 8000e8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ee0 <doEcho+0x20c>)
 8000e8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[pos+3] = rval&0xFFFF;
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	3303      	adds	r3, #3
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	b291      	uxth	r1, r2
 8000e98:	4a11      	ldr	r2, [pc, #68]	@ (8000ee0 <doEcho+0x20c>)
 8000e9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  i++;
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	3304      	adds	r3, #4
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	f6ff af5a 	blt.w	8000d68 <doEcho+0x94>
	  }

}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	372c      	adds	r7, #44	@ 0x2c
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	2003ac84 	.word	0x2003ac84
 8000ec8:	2003cc84 	.word	0x2003cc84
 8000ecc:	2003d084 	.word	0x2003d084
 8000ed0:	2003d484 	.word	0x2003d484
 8000ed4:	200000c4 	.word	0x200000c4
 8000ed8:	20000014 	.word	0x20000014
 8000edc:	2001d584 	.word	0x2001d584
 8000ee0:	2003bc84 	.word	0x2003bc84
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <EchoUpdateState>:



void EchoUpdateState(){
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
	int newEncoderVal1 = TIM1->CNT;
 8000eee:	4b82      	ldr	r3, [pc, #520]	@ (80010f8 <EchoUpdateState+0x210>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	617b      	str	r3, [r7, #20]
	int encoderDelata1 = newEncoderVal1-eState.lastEncoderVal1;
 8000ef4:	4b81      	ldr	r3, [pc, #516]	@ (80010fc <EchoUpdateState+0x214>)
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	613b      	str	r3, [r7, #16]
	int newEncoderVal2 = TIM2->CNT;
 8000efe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f04:	60fb      	str	r3, [r7, #12]
	int encoderDelata2 = newEncoderVal2-eState.lastEncoderVal2;
 8000f06:	4b7d      	ldr	r3, [pc, #500]	@ (80010fc <EchoUpdateState+0x214>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	60bb      	str	r3, [r7, #8]

	//encoder1:
	if(encoderDelata1 == 0){
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8086 	beq.w	8001024 <EchoUpdateState+0x13c>
		goto encoder2;
	}
	if (abs(encoderDelata1) > 20 ) {
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	bfb8      	it	lt
 8000f1e:	425b      	neglt	r3, r3
 8000f20:	2b14      	cmp	r3, #20
 8000f22:	dd03      	ble.n	8000f2c <EchoUpdateState+0x44>
		eState.lastEncoderVal1 = newEncoderVal1;
 8000f24:	4a75      	ldr	r2, [pc, #468]	@ (80010fc <EchoUpdateState+0x214>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	6113      	str	r3, [r2, #16]
		goto encoder2;
 8000f2a:	e07e      	b.n	800102a <EchoUpdateState+0x142>
	}
	GPIO_PinState encSW = HAL_GPIO_ReadPin(EncoderSW_GPIO_Port, EncoderSW_Pin);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4874      	ldr	r0, [pc, #464]	@ (8001100 <EchoUpdateState+0x218>)
 8000f30:	f002 fcbc 	bl	80038ac <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
	if(eState.currentParam1 == 0){
 8000f38:	4b70      	ldr	r3, [pc, #448]	@ (80010fc <EchoUpdateState+0x214>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d124      	bne.n	8000f8a <EchoUpdateState+0xa2>
		if(encSW == GPIO_PIN_RESET){
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d106      	bne.n	8000f54 <EchoUpdateState+0x6c>
			eState.currentParam1 = 1;
 8000f46:	4b6d      	ldr	r3, [pc, #436]	@ (80010fc <EchoUpdateState+0x214>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	60da      	str	r2, [r3, #12]
			eState.lastEncoderVal1 = newEncoderVal1;
 8000f4c:	4a6b      	ldr	r2, [pc, #428]	@ (80010fc <EchoUpdateState+0x214>)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	6113      	str	r3, [r2, #16]
			goto encoder2;
 8000f52:	e06a      	b.n	800102a <EchoUpdateState+0x142>
		}
		eState.delayLen += (encoderDelata1)*200;
 8000f54:	4b69      	ldr	r3, [pc, #420]	@ (80010fc <EchoUpdateState+0x214>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	21c8      	movs	r1, #200	@ 0xc8
 8000f5c:	fb01 f303 	mul.w	r3, r1, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	4a66      	ldr	r2, [pc, #408]	@ (80010fc <EchoUpdateState+0x214>)
 8000f64:	6013      	str	r3, [r2, #0]
		//dState.delayLen = dState.delayLen % BUF_SAMPLES;
		if(eState.delayLen >= DELAY_BUF){
 8000f66:	4b65      	ldr	r3, [pc, #404]	@ (80010fc <EchoUpdateState+0x214>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	dd03      	ble.n	8000f7a <EchoUpdateState+0x92>
			eState.delayLen = DELAY_BUF -1;
 8000f72:	4b62      	ldr	r3, [pc, #392]	@ (80010fc <EchoUpdateState+0x214>)
 8000f74:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000f78:	601a      	str	r2, [r3, #0]
		}
		if(eState.delayLen < 1){
 8000f7a:	4b60      	ldr	r3, [pc, #384]	@ (80010fc <EchoUpdateState+0x214>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dc53      	bgt.n	800102a <EchoUpdateState+0x142>
			eState.delayLen = 1;
 8000f82:	4b5e      	ldr	r3, [pc, #376]	@ (80010fc <EchoUpdateState+0x214>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e04f      	b.n	800102a <EchoUpdateState+0x142>
		}
	}
	else if(eState.currentParam1 == 1){
 8000f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80010fc <EchoUpdateState+0x214>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d14a      	bne.n	8001028 <EchoUpdateState+0x140>
		if(encSW == GPIO_PIN_SET){
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d106      	bne.n	8000fa6 <EchoUpdateState+0xbe>
			eState.currentParam1 = 0;
 8000f98:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <EchoUpdateState+0x214>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
			eState.lastEncoderVal1 = newEncoderVal1;
 8000f9e:	4a57      	ldr	r2, [pc, #348]	@ (80010fc <EchoUpdateState+0x214>)
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	6113      	str	r3, [r2, #16]
			goto encoder2;
 8000fa4:	e041      	b.n	800102a <EchoUpdateState+0x142>
		}
		eState.mix += ((float)(encoderDelata1))*0.01;
 8000fa6:	4b55      	ldr	r3, [pc, #340]	@ (80010fc <EchoUpdateState+0x214>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fc0e 	bl	80007cc <__aeabi_f2d>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	ee17 0a90 	vmov	r0, s15
 8000fc2:	f7ff fc03 	bl	80007cc <__aeabi_f2d>
 8000fc6:	a34a      	add	r3, pc, #296	@ (adr r3, 80010f0 <EchoUpdateState+0x208>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff f970 	bl	80002b0 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	f7ff fa9a 	bl	8000510 <__adddf3>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fc72 	bl	80008cc <__aeabi_d2f>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a44      	ldr	r2, [pc, #272]	@ (80010fc <EchoUpdateState+0x214>)
 8000fec:	6053      	str	r3, [r2, #4]
		if(eState.mix < 0.) eState.mix = 0.;
 8000fee:	4b43      	ldr	r3, [pc, #268]	@ (80010fc <EchoUpdateState+0x214>)
 8000ff0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ff4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	d503      	bpl.n	8001006 <EchoUpdateState+0x11e>
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80010fc <EchoUpdateState+0x214>)
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
		if(eState.mix > 1.) eState.mix = 1.;
 8001006:	4b3d      	ldr	r3, [pc, #244]	@ (80010fc <EchoUpdateState+0x214>)
 8001008:	edd3 7a01 	vldr	s15, [r3, #4]
 800100c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001018:	dd07      	ble.n	800102a <EchoUpdateState+0x142>
 800101a:	4b38      	ldr	r3, [pc, #224]	@ (80010fc <EchoUpdateState+0x214>)
 800101c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	e002      	b.n	800102a <EchoUpdateState+0x142>
		goto encoder2;
 8001024:	bf00      	nop
 8001026:	e000      	b.n	800102a <EchoUpdateState+0x142>
	}

	encoder2:
 8001028:	bf00      	nop
	if(encoderDelata2 == 0){
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d048      	beq.n	80010c2 <EchoUpdateState+0x1da>
			goto updateEnd;
	}
	if (abs(encoderDelata2) > 20) {
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	bfb8      	it	lt
 8001036:	425b      	neglt	r3, r3
 8001038:	2b14      	cmp	r3, #20
 800103a:	dd03      	ble.n	8001044 <EchoUpdateState+0x15c>
			eState.lastEncoderVal2 = newEncoderVal2;
 800103c:	4a2f      	ldr	r2, [pc, #188]	@ (80010fc <EchoUpdateState+0x214>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6193      	str	r3, [r2, #24]
			goto updateEnd;
 8001042:	e03f      	b.n	80010c4 <EchoUpdateState+0x1dc>
	}
	eState.feedback += ((float)encoderDelata2)*0.01;
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <EchoUpdateState+0x214>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fbbf 	bl	80007cc <__aeabi_f2d>
 800104e:	4604      	mov	r4, r0
 8001050:	460d      	mov	r5, r1
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105c:	ee17 0a90 	vmov	r0, s15
 8001060:	f7ff fbb4 	bl	80007cc <__aeabi_f2d>
 8001064:	a322      	add	r3, pc, #136	@ (adr r3, 80010f0 <EchoUpdateState+0x208>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff f921 	bl	80002b0 <__aeabi_dmul>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4620      	mov	r0, r4
 8001074:	4629      	mov	r1, r5
 8001076:	f7ff fa4b 	bl	8000510 <__adddf3>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fc23 	bl	80008cc <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	4a1c      	ldr	r2, [pc, #112]	@ (80010fc <EchoUpdateState+0x214>)
 800108a:	6093      	str	r3, [r2, #8]
	if(eState.feedback < 0.) eState.feedback = 0.;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <EchoUpdateState+0x214>)
 800108e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001092:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109a:	d503      	bpl.n	80010a4 <EchoUpdateState+0x1bc>
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <EchoUpdateState+0x214>)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
	if(eState.feedback > 1.) eState.feedback = 1.;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <EchoUpdateState+0x214>)
 80010a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80010aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	dd05      	ble.n	80010c4 <EchoUpdateState+0x1dc>
 80010b8:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <EchoUpdateState+0x214>)
 80010ba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	e000      	b.n	80010c4 <EchoUpdateState+0x1dc>
			goto updateEnd;
 80010c2:	bf00      	nop

	updateEnd:
	if(eState.lastEncoderVal1 != newEncoderVal1 || eState.lastEncoderVal2 != newEncoderVal2){
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <EchoUpdateState+0x214>)
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d104      	bne.n	80010d8 <EchoUpdateState+0x1f0>
 80010ce:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <EchoUpdateState+0x214>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d001      	beq.n	80010dc <EchoUpdateState+0x1f4>
		EchoPrintState();
 80010d8:	f000 f84e 	bl	8001178 <EchoPrintState>
	}
	eState.lastEncoderVal1 = newEncoderVal1;
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <EchoUpdateState+0x214>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	6113      	str	r3, [r2, #16]
	eState.lastEncoderVal2 = newEncoderVal2;
 80010e2:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <EchoUpdateState+0x214>)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6193      	str	r3, [r2, #24]
}
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bdb0      	pop	{r4, r5, r7, pc}
 80010f0:	47ae147b 	.word	0x47ae147b
 80010f4:	3f847ae1 	.word	0x3f847ae1
 80010f8:	40010000 	.word	0x40010000
 80010fc:	20000014 	.word	0x20000014
 8001100:	40021800 	.word	0x40021800

08001104 <EchoPrintInit>:

void EchoPrintInit(){
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	lcd_clear(lcdPtr);
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <EchoPrintInit+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f903 	bl	8001318 <lcd_clear>
	lcd_gotoxy(lcdPtr, 0, 0);
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <EchoPrintInit+0x64>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f916 	bl	800134c <lcd_gotoxy>
	lcd_puts(lcdPtr, "Echo Len smp:");
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <EchoPrintInit+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4911      	ldr	r1, [pc, #68]	@ (800116c <EchoPrintInit+0x68>)
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f989 	bl	800143e <lcd_puts>

	lcd_gotoxy(lcdPtr, 0, 1);
 800112c:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <EchoPrintInit+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2201      	movs	r2, #1
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f909 	bl	800134c <lcd_gotoxy>
	lcd_puts(lcdPtr, "Echo Feedback%:");
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <EchoPrintInit+0x64>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	490c      	ldr	r1, [pc, #48]	@ (8001170 <EchoPrintInit+0x6c>)
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f97c 	bl	800143e <lcd_puts>

	lcd_gotoxy(lcdPtr, 0, 2);
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <EchoPrintInit+0x64>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2202      	movs	r2, #2
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f8fc 	bl	800134c <lcd_gotoxy>
	lcd_puts(lcdPtr, "Echo Wet%:");
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <EchoPrintInit+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4906      	ldr	r1, [pc, #24]	@ (8001174 <EchoPrintInit+0x70>)
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f96f 	bl	800143e <lcd_puts>

	EchoPrintState();
 8001160:	f000 f80a 	bl	8001178 <EchoPrintState>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000c0 	.word	0x200000c0
 800116c:	08007b88 	.word	0x08007b88
 8001170:	08007b98 	.word	0x08007b98
 8001174:	08007ba8 	.word	0x08007ba8

08001178 <EchoPrintState>:

void EchoPrintState(){
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

	sprintf(strBuff, "%d     ", eState.delayLen);
 800117c:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <EchoPrintState+0xc4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	492f      	ldr	r1, [pc, #188]	@ (8001240 <EchoPrintState+0xc8>)
 8001184:	482f      	ldr	r0, [pc, #188]	@ (8001244 <EchoPrintState+0xcc>)
 8001186:	f006 f853 	bl	8007230 <siprintf>
	strBuff[7] = '\0';
 800118a:	4b2e      	ldr	r3, [pc, #184]	@ (8001244 <EchoPrintState+0xcc>)
 800118c:	2200      	movs	r2, #0
 800118e:	71da      	strb	r2, [r3, #7]
	lcd_gotoxy(lcdPtr, 13, 0);
 8001190:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <EchoPrintState+0xd0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2200      	movs	r2, #0
 8001196:	210d      	movs	r1, #13
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f8d7 	bl	800134c <lcd_gotoxy>
	lcd_puts(lcdPtr, strBuff);
 800119e:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <EchoPrintState+0xd0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4928      	ldr	r1, [pc, #160]	@ (8001244 <EchoPrintState+0xcc>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 f94a 	bl	800143e <lcd_puts>
	sprintf(strBuff, "%d  ", (int) (eState.feedback*100.));
 80011aa:	4b24      	ldr	r3, [pc, #144]	@ (800123c <EchoPrintState+0xc4>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fb0c 	bl	80007cc <__aeabi_f2d>
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	4b24      	ldr	r3, [pc, #144]	@ (800124c <EchoPrintState+0xd4>)
 80011ba:	f7ff f879 	bl	80002b0 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fb59 	bl	800087c <__aeabi_d2iz>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4920      	ldr	r1, [pc, #128]	@ (8001250 <EchoPrintState+0xd8>)
 80011d0:	481c      	ldr	r0, [pc, #112]	@ (8001244 <EchoPrintState+0xcc>)
 80011d2:	f006 f82d 	bl	8007230 <siprintf>
	lcd_gotoxy(lcdPtr, 15, 1);
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <EchoPrintState+0xd0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2201      	movs	r2, #1
 80011dc:	210f      	movs	r1, #15
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f8b4 	bl	800134c <lcd_gotoxy>
	lcd_puts(lcdPtr, strBuff);
 80011e4:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <EchoPrintState+0xd0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4916      	ldr	r1, [pc, #88]	@ (8001244 <EchoPrintState+0xcc>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f927 	bl	800143e <lcd_puts>
	sprintf(strBuff, "%d  " , (int)(eState.mix*100.));
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <EchoPrintState+0xc4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fae9 	bl	80007cc <__aeabi_f2d>
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b13      	ldr	r3, [pc, #76]	@ (800124c <EchoPrintState+0xd4>)
 8001200:	f7ff f856 	bl	80002b0 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fb36 	bl	800087c <__aeabi_d2iz>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	490e      	ldr	r1, [pc, #56]	@ (8001250 <EchoPrintState+0xd8>)
 8001216:	480b      	ldr	r0, [pc, #44]	@ (8001244 <EchoPrintState+0xcc>)
 8001218:	f006 f80a 	bl	8007230 <siprintf>
	lcd_gotoxy(lcdPtr, 10, 2);
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <EchoPrintState+0xd0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2202      	movs	r2, #2
 8001222:	210a      	movs	r1, #10
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f891 	bl	800134c <lcd_gotoxy>
	lcd_puts(lcdPtr, strBuff);
 800122a:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <EchoPrintState+0xd0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4905      	ldr	r1, [pc, #20]	@ (8001244 <EchoPrintState+0xcc>)
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f904 	bl	800143e <lcd_puts>


}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000014 	.word	0x20000014
 8001240:	08007bb4 	.word	0x08007bb4
 8001244:	20000000 	.word	0x20000000
 8001248:	200000c0 	.word	0x200000c0
 800124c:	40590000 	.word	0x40590000
 8001250:	08007bbc 	.word	0x08007bbc

08001254 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af02      	add	r7, sp, #8
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	f023 030f 	bic.w	r3, r3, #15
 8001266:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	f043 030c 	orr.w	r3, r3, #12
 8001274:	b2db      	uxtb	r3, r3
 8001276:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	b2db      	uxtb	r3, r3
 8001280:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8001282:	7bbb      	ldrb	r3, [r7, #14]
 8001284:	f043 030c 	orr.w	r3, r3, #12
 8001288:	b2db      	uxtb	r3, r3
 800128a:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	b2db      	uxtb	r3, r3
 8001294:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	4619      	mov	r1, r3
 80012a0:	f107 0208 	add.w	r2, r7, #8
 80012a4:	2364      	movs	r3, #100	@ 0x64
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2304      	movs	r3, #4
 80012aa:	f002 fc4d 	bl	8003b48 <HAL_I2C_Master_Transmit>
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af02      	add	r7, sp, #8
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	f023 030f 	bic.w	r3, r3, #15
 80012c8:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	f043 030d 	orr.w	r3, r3, #13
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	f043 0309 	orr.w	r3, r3, #9
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 80012e4:	7bbb      	ldrb	r3, [r7, #14]
 80012e6:	f043 030d 	orr.w	r3, r3, #13
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 80012ee:	7bbb      	ldrb	r3, [r7, #14]
 80012f0:	f043 0309 	orr.w	r3, r3, #9
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	791b      	ldrb	r3, [r3, #4]
 8001300:	4619      	mov	r1, r3
 8001302:	f107 0208 	add.w	r2, r7, #8
 8001306:	2364      	movs	r3, #100	@ 0x64
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2304      	movs	r3, #4
 800130c:	f002 fc1c 	bl	8003b48 <HAL_I2C_Master_Transmit>
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8001320:	2180      	movs	r1, #128	@ 0x80
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff96 	bl	8001254 <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	e006      	b.n	800133c <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 800132e:	2120      	movs	r1, #32
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ffc0 	bl	80012b6 <lcd_send_data>
    for (int i = 0; i < 80; i++)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3301      	adds	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b4f      	cmp	r3, #79	@ 0x4f
 8001340:	ddf5      	ble.n	800132e <lcd_clear+0x16>
    }
}
 8001342:	bf00      	nop
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d824      	bhi.n	80013a8 <lcd_gotoxy+0x5c>
 800135e:	a201      	add	r2, pc, #4	@ (adr r2, 8001364 <lcd_gotoxy+0x18>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	08001375 	.word	0x08001375
 8001368:	0800137f 	.word	0x0800137f
 800136c:	08001389 	.word	0x08001389
 8001370:	08001393 	.word	0x08001393
    {
        case 0: address = 0x80 + col; break;  // First row
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	3b80      	subs	r3, #128	@ 0x80
 800137a:	75fb      	strb	r3, [r7, #23]
 800137c:	e00e      	b.n	800139c <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	3b40      	subs	r3, #64	@ 0x40
 8001384:	75fb      	strb	r3, [r7, #23]
 8001386:	e009      	b.n	800139c <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3b6c      	subs	r3, #108	@ 0x6c
 800138e:	75fb      	strb	r3, [r7, #23]
 8001390:	e004      	b.n	800139c <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	3b2c      	subs	r3, #44	@ 0x2c
 8001398:	75fb      	strb	r3, [r7, #23]
 800139a:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	4619      	mov	r1, r3
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f7ff ff57 	bl	8001254 <lcd_send_cmd>
 80013a6:	e000      	b.n	80013aa <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 80013a8:	bf00      	nop
}
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 80013b8:	2032      	movs	r0, #50	@ 0x32
 80013ba:	f001 f8b1 	bl	8002520 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80013be:	2130      	movs	r1, #48	@ 0x30
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff47 	bl	8001254 <lcd_send_cmd>
    HAL_Delay(5);
 80013c6:	2005      	movs	r0, #5
 80013c8:	f001 f8aa 	bl	8002520 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80013cc:	2130      	movs	r1, #48	@ 0x30
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ff40 	bl	8001254 <lcd_send_cmd>
    HAL_Delay(1);
 80013d4:	2001      	movs	r0, #1
 80013d6:	f001 f8a3 	bl	8002520 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80013da:	2130      	movs	r1, #48	@ 0x30
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff39 	bl	8001254 <lcd_send_cmd>
    HAL_Delay(10);
 80013e2:	200a      	movs	r0, #10
 80013e4:	f001 f89c 	bl	8002520 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 80013e8:	2120      	movs	r1, #32
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ff32 	bl	8001254 <lcd_send_cmd>
    HAL_Delay(10);
 80013f0:	200a      	movs	r0, #10
 80013f2:	f001 f895 	bl	8002520 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 80013f6:	2128      	movs	r1, #40	@ 0x28
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff2b 	bl	8001254 <lcd_send_cmd>
    HAL_Delay(1);
 80013fe:	2001      	movs	r0, #1
 8001400:	f001 f88e 	bl	8002520 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 8001404:	2108      	movs	r1, #8
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ff24 	bl	8001254 <lcd_send_cmd>
    HAL_Delay(1);
 800140c:	2001      	movs	r0, #1
 800140e:	f001 f887 	bl	8002520 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8001412:	2101      	movs	r1, #1
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff1d 	bl	8001254 <lcd_send_cmd>
    HAL_Delay(2);
 800141a:	2002      	movs	r0, #2
 800141c:	f001 f880 	bl	8002520 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8001420:	2106      	movs	r1, #6
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff16 	bl	8001254 <lcd_send_cmd>
    HAL_Delay(1);
 8001428:	2001      	movs	r0, #1
 800142a:	f001 f879 	bl	8002520 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 800142e:	210c      	movs	r1, #12
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff0f 	bl	8001254 <lcd_send_cmd>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8001448:	e007      	b.n	800145a <lcd_puts+0x1c>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	603a      	str	r2, [r7, #0]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff2e 	bl	80012b6 <lcd_send_data>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f3      	bne.n	800144a <lcd_puts+0xc>
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001470:	f000 fff9 	bl	8002466 <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(txBuf, 0, sizeof(txBuf));
 8001474:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001478:	2100      	movs	r1, #0
 800147a:	4839      	ldr	r0, [pc, #228]	@ (8001560 <main+0xf4>)
 800147c:	f005 fefa 	bl	8007274 <memset>
  memset(rxBuf, 0, sizeof(rxBuf));
 8001480:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001484:	2100      	movs	r1, #0
 8001486:	4837      	ldr	r0, [pc, #220]	@ (8001564 <main+0xf8>)
 8001488:	f005 fef4 	bl	8007274 <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148c:	f000 f884 	bl	8001598 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001490:	f000 f8f0 	bl	8001674 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001494:	f000 fa82 	bl	800199c <MX_GPIO_Init>
  MX_DMA_Init();
 8001498:	f000 fa5a 	bl	8001950 <MX_DMA_Init>
  MX_I2S2_Init();
 800149c:	f000 f952 	bl	8001744 <MX_I2S2_Init>
  MX_I2S3_Init();
 80014a0:	f000 f97c 	bl	800179c <MX_I2S3_Init>
  MX_TIM1_Init();
 80014a4:	f000 f9a4 	bl	80017f0 <MX_TIM1_Init>
  MX_I2C1_Init();
 80014a8:	f000 f90a 	bl	80016c0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80014ac:	f000 f9fc 	bl	80018a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd.hi2c = &hi2c1;
 80014b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <main+0xfc>)
 80014b2:	4a2e      	ldr	r2, [pc, #184]	@ (800156c <main+0x100>)
 80014b4:	601a      	str	r2, [r3, #0]
  lcd.address = (0x27 << 1); // Magic bit shifting beucse an arbitrary address wasnt bad enough
 80014b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001568 <main+0xfc>)
 80014b8:	224e      	movs	r2, #78	@ 0x4e
 80014ba:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd);
 80014bc:	482a      	ldr	r0, [pc, #168]	@ (8001568 <main+0xfc>)
 80014be:	f7ff ff77 	bl	80013b0 <lcd_init>
  lcd_puts(&lcd, "No Effect");
 80014c2:	492b      	ldr	r1, [pc, #172]	@ (8001570 <main+0x104>)
 80014c4:	4828      	ldr	r0, [pc, #160]	@ (8001568 <main+0xfc>)
 80014c6:	f7ff ffba 	bl	800143e <lcd_puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //DelayInit(&lcd);
  EchoInit(&lcd);
 80014ca:	4827      	ldr	r0, [pc, #156]	@ (8001568 <main+0xfc>)
 80014cc:	f7ff fbe4 	bl	8000c98 <EchoInit>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80014d0:	213c      	movs	r1, #60	@ 0x3c
 80014d2:	4828      	ldr	r0, [pc, #160]	@ (8001574 <main+0x108>)
 80014d4:	f005 fb66 	bl	8006ba4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80014d8:	213c      	movs	r1, #60	@ 0x3c
 80014da:	4827      	ldr	r0, [pc, #156]	@ (8001578 <main+0x10c>)
 80014dc:	f005 fb62 	bl	8006ba4 <HAL_TIM_Encoder_Start>
  HAL_I2S_Transmit_DMA(&hi2s3, txBuf, SAMPLES*2 );
 80014e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e4:	491e      	ldr	r1, [pc, #120]	@ (8001560 <main+0xf4>)
 80014e6:	4825      	ldr	r0, [pc, #148]	@ (800157c <main+0x110>)
 80014e8:	f003 f968 	bl	80047bc <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(&hi2s2, rxBuf, SAMPLES*2 );
 80014ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f0:	491c      	ldr	r1, [pc, #112]	@ (8001564 <main+0xf8>)
 80014f2:	4823      	ldr	r0, [pc, #140]	@ (8001580 <main+0x114>)
 80014f4:	f003 fa06 	bl	8004904 <HAL_I2S_Receive_DMA>


  while (1)
  {

	  if ( rxHalfComplete && txHalfComplete )
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <main+0x118>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00d      	beq.n	800151c <main+0xb0>
 8001500:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <main+0x11c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <main+0xb0>
	  	  {
		      doEffect(0);
 8001508:	2000      	movs	r0, #0
 800150a:	f000 fbb5 	bl	8001c78 <doEffect>

	  		  rxHalfComplete = 0;
 800150e:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <main+0x118>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
	  		  txHalfComplete = 0;
 8001514:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <main+0x11c>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e01f      	b.n	800155c <main+0xf0>
	  	  }

	  else if ( rxFullComplete && txFullComplete )
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <main+0x120>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00d      	beq.n	8001540 <main+0xd4>
 8001524:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <main+0x124>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <main+0xd4>
	  	  {
		  	  doEffect(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f000 fba3 	bl	8001c78 <doEffect>

	  		  rxFullComplete = 0;
 8001532:	4b16      	ldr	r3, [pc, #88]	@ (800158c <main+0x120>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
	  		  txFullComplete = 0;
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <main+0x124>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e00d      	b.n	800155c <main+0xf0>
	  	  }
	  else{
		  stateUpdateCounter++;
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <main+0x128>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a13      	ldr	r2, [pc, #76]	@ (8001594 <main+0x128>)
 8001548:	6013      	str	r3, [r2, #0]
		  if(stateUpdateCounter > STATE_UPDATE_DIV)
 800154a:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <main+0x128>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b64      	cmp	r3, #100	@ 0x64
 8001550:	ddd2      	ble.n	80014f8 <main+0x8c>
		  {
			  updateState();
 8001552:	f000 faa5 	bl	8001aa0 <updateState>
			  stateUpdateCounter = 0;
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <main+0x128>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
	  if ( rxHalfComplete && txHalfComplete )
 800155c:	e7cc      	b.n	80014f8 <main+0x8c>
 800155e:	bf00      	nop
 8001560:	2003bc84 	.word	0x2003bc84
 8001564:	2003ac84 	.word	0x2003ac84
 8001568:	2003d488 	.word	0x2003d488
 800156c:	2003aa44 	.word	0x2003aa44
 8001570:	08007bc4 	.word	0x08007bc4
 8001574:	2003abd8 	.word	0x2003abd8
 8001578:	2003ac24 	.word	0x2003ac24
 800157c:	2003aad8 	.word	0x2003aad8
 8001580:	2003aa98 	.word	0x2003aa98
 8001584:	2003ac70 	.word	0x2003ac70
 8001588:	2003ac74 	.word	0x2003ac74
 800158c:	2003ac78 	.word	0x2003ac78
 8001590:	2003ac7c 	.word	0x2003ac7c
 8001594:	2003ac80 	.word	0x2003ac80

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b094      	sub	sp, #80	@ 0x50
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	2230      	movs	r2, #48	@ 0x30
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f005 fe64 	bl	8007274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <SystemClock_Config+0xd4>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	4a2a      	ldr	r2, [pc, #168]	@ (800166c <SystemClock_Config+0xd4>)
 80015c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c8:	4b28      	ldr	r3, [pc, #160]	@ (800166c <SystemClock_Config+0xd4>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d4:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <SystemClock_Config+0xd8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a25      	ldr	r2, [pc, #148]	@ (8001670 <SystemClock_Config+0xd8>)
 80015da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <SystemClock_Config+0xd8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ec:	2302      	movs	r3, #2
 80015ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f0:	2301      	movs	r3, #1
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f4:	2310      	movs	r3, #16
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f8:	2302      	movs	r3, #2
 80015fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015fc:	2300      	movs	r3, #0
 80015fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001600:	2310      	movs	r3, #16
 8001602:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001604:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001608:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800160a:	2302      	movs	r3, #2
 800160c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800160e:	2302      	movs	r3, #2
 8001610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	4618      	mov	r0, r3
 8001618:	f003 fb56 	bl	8004cc8 <HAL_RCC_OscConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001622:	f000 fc29 	bl	8001e78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001626:	f003 faff 	bl	8004c28 <HAL_PWREx_EnableOverDrive>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001630:	f000 fc22 	bl	8001e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	230f      	movs	r3, #15
 8001636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001638:	2302      	movs	r3, #2
 800163a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001640:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800164a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2107      	movs	r1, #7
 8001652:	4618      	mov	r0, r3
 8001654:	f003 fe92 	bl	800537c <HAL_RCC_ClockConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800165e:	f000 fc0b 	bl	8001e78 <Error_Handler>
  }
}
 8001662:	bf00      	nop
 8001664:	3750      	adds	r7, #80	@ 0x50
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40007000 	.word	0x40007000

08001674 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0a2      	sub	sp, #136	@ 0x88
 8001678:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2284      	movs	r2, #132	@ 0x84
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f005 fdf7 	bl	8007274 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001686:	2301      	movs	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 430;
 800168a:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 800168e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001690:	2302      	movs	r3, #2
 8001692:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 7;
 8001694:	2307      	movs	r3, #7
 8001696:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001698:	2302      	movs	r3, #2
 800169a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80016a0:	2300      	movs	r3, #0
 80016a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	4618      	mov	r0, r3
 80016a8:	f004 f8d6 	bl	8005858 <HAL_RCCEx_PeriphCLKConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <PeriphCommonClock_Config+0x42>
  {
    Error_Handler();
 80016b2:	f000 fbe1 	bl	8001e78 <Error_Handler>
  }
}
 80016b6:	bf00      	nop
 80016b8:	3788      	adds	r7, #136	@ 0x88
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <MX_I2C1_Init+0x78>)
 80016c6:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <MX_I2C1_Init+0x7c>)
 80016c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00200922;
 80016ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <MX_I2C1_Init+0x78>)
 80016cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <MX_I2C1_Init+0x80>)
 80016ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <MX_I2C1_Init+0x78>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d6:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <MX_I2C1_Init+0x78>)
 80016d8:	2201      	movs	r2, #1
 80016da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016dc:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <MX_I2C1_Init+0x78>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <MX_I2C1_Init+0x78>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <MX_I2C1_Init+0x78>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ee:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <MX_I2C1_Init+0x78>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f4:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <MX_I2C1_Init+0x78>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016fa:	480f      	ldr	r0, [pc, #60]	@ (8001738 <MX_I2C1_Init+0x78>)
 80016fc:	f002 f8f6 	bl	80038ec <HAL_I2C_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001706:	f000 fbb7 	bl	8001e78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800170a:	2100      	movs	r1, #0
 800170c:	480a      	ldr	r0, [pc, #40]	@ (8001738 <MX_I2C1_Init+0x78>)
 800170e:	f002 fd97 	bl	8004240 <HAL_I2CEx_ConfigAnalogFilter>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001718:	f000 fbae 	bl	8001e78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800171c:	2100      	movs	r1, #0
 800171e:	4806      	ldr	r0, [pc, #24]	@ (8001738 <MX_I2C1_Init+0x78>)
 8001720:	f002 fe04 	bl	800432c <HAL_I2CEx_ConfigDigitalFilter>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800172a:	f000 fba5 	bl	8001e78 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800172e:	2001      	movs	r0, #1
 8001730:	f002 fe70 	bl	8004414 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2003aa44 	.word	0x2003aa44
 800173c:	40005400 	.word	0x40005400
 8001740:	00200922 	.word	0x00200922

08001744 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <MX_I2S2_Init+0x50>)
 800174a:	4a13      	ldr	r2, [pc, #76]	@ (8001798 <MX_I2S2_Init+0x54>)
 800174c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_I2S2_Init+0x50>)
 8001750:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001754:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <MX_I2S2_Init+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800175c:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <MX_I2S2_Init+0x50>)
 800175e:	2203      	movs	r2, #3
 8001760:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_I2S2_Init+0x50>)
 8001764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001768:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <MX_I2S2_Init+0x50>)
 800176c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001770:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <MX_I2S2_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_I2S2_Init+0x50>)
 800177a:	2202      	movs	r2, #2
 800177c:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	@ (8001794 <MX_I2S2_Init+0x50>)
 8001780:	f002 fe94 	bl	80044ac <HAL_I2S_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_I2S2_Init+0x4a>
  {
    Error_Handler();
 800178a:	f000 fb75 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2003aa98 	.word	0x2003aa98
 8001798:	40003800 	.word	0x40003800

0800179c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <MX_I2S3_Init+0x4c>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <MX_I2S3_Init+0x50>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_TX;
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <MX_I2S3_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <MX_I2S3_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 80017b2:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <MX_I2S3_Init+0x4c>)
 80017b4:	2203      	movs	r2, #3
 80017b6:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <MX_I2S3_Init+0x4c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80017be:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <MX_I2S3_Init+0x4c>)
 80017c0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80017c4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80017c6:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <MX_I2S3_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <MX_I2S3_Init+0x4c>)
 80017ce:	2202      	movs	r2, #2
 80017d0:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_I2S3_Init+0x4c>)
 80017d4:	f002 fe6a 	bl	80044ac <HAL_I2S_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_I2S3_Init+0x46>
  {
    Error_Handler();
 80017de:	f000 fb4b 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2003aad8 	.word	0x2003aad8
 80017ec:	40003c00 	.word	0x40003c00

080017f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	@ 0x30
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	2224      	movs	r2, #36	@ 0x24
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f005 fd38 	bl	8007274 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	463b      	mov	r3, r7
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800180e:	4b24      	ldr	r3, [pc, #144]	@ (80018a0 <MX_TIM1_Init+0xb0>)
 8001810:	4a24      	ldr	r2, [pc, #144]	@ (80018a4 <MX_TIM1_Init+0xb4>)
 8001812:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001814:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <MX_TIM1_Init+0xb0>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b21      	ldr	r3, [pc, #132]	@ (80018a0 <MX_TIM1_Init+0xb0>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001820:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <MX_TIM1_Init+0xb0>)
 8001822:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001826:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <MX_TIM1_Init+0xb0>)
 800182a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800182e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <MX_TIM1_Init+0xb0>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <MX_TIM1_Init+0xb0>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800183c:	2301      	movs	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001844:	2301      	movs	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800184c:	230a      	movs	r3, #10
 800184e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001854:	2301      	movs	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800185c:	230a      	movs	r3, #10
 800185e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4619      	mov	r1, r3
 8001866:	480e      	ldr	r0, [pc, #56]	@ (80018a0 <MX_TIM1_Init+0xb0>)
 8001868:	f004 ffda 	bl	8006820 <HAL_TIM_Encoder_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8001872:	f000 fb01 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001882:	463b      	mov	r3, r7
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <MX_TIM1_Init+0xb0>)
 8001888:	f005 fb7a 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001892:	f000 faf1 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	3730      	adds	r7, #48	@ 0x30
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2003abd8 	.word	0x2003abd8
 80018a4:	40010000 	.word	0x40010000

080018a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	@ 0x30
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	2224      	movs	r2, #36	@ 0x24
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f005 fcdc 	bl	8007274 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018bc:	463b      	mov	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018c6:	4b21      	ldr	r3, [pc, #132]	@ (800194c <MX_TIM2_Init+0xa4>)
 80018c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018ce:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <MX_TIM2_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <MX_TIM2_Init+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80018da:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <MX_TIM2_Init+0xa4>)
 80018dc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <MX_TIM2_Init+0xa4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <MX_TIM2_Init+0xa4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018ee:	2301      	movs	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018f6:	2301      	movs	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80018fe:	230a      	movs	r3, #10
 8001900:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001906:	2301      	movs	r3, #1
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800190e:	230a      	movs	r3, #10
 8001910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4619      	mov	r1, r3
 8001918:	480c      	ldr	r0, [pc, #48]	@ (800194c <MX_TIM2_Init+0xa4>)
 800191a:	f004 ff81 	bl	8006820 <HAL_TIM_Encoder_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001924:	f000 faa8 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <MX_TIM2_Init+0xa4>)
 8001936:	f005 fb23 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001940:	f000 fa9a 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	3730      	adds	r7, #48	@ 0x30
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2003ac24 	.word	0x2003ac24

08001950 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <MX_DMA_Init+0x48>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a0f      	ldr	r2, [pc, #60]	@ (8001998 <MX_DMA_Init+0x48>)
 800195c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <MX_DMA_Init+0x48>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	200e      	movs	r0, #14
 8001974:	f000 fee8 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001978:	200e      	movs	r0, #14
 800197a:	f000 ff11 	bl	80027a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	2010      	movs	r0, #16
 8001984:	f000 fee0 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001988:	2010      	movs	r0, #16
 800198a:	f000 ff09 	bl	80027a0 <HAL_NVIC_EnableIRQ>

}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800

0800199c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08c      	sub	sp, #48	@ 0x30
 80019a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	4b38      	ldr	r3, [pc, #224]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a37      	ldr	r2, [pc, #220]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b35      	ldr	r3, [pc, #212]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4b32      	ldr	r3, [pc, #200]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a31      	ldr	r2, [pc, #196]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 80019e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b29      	ldr	r3, [pc, #164]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019fa:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	4a25      	ldr	r2, [pc, #148]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 8001a00:	f043 0310 	orr.w	r3, r3, #16
 8001a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a06:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a1f      	ldr	r2, [pc, #124]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a19      	ldr	r2, [pc, #100]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <MX_GPIO_Init+0xf8>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : EncoderSW_Pin */
  GPIO_InitStruct.Pin = EncoderSW_Pin;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EncoderSW_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	4810      	ldr	r0, [pc, #64]	@ (8001a98 <MX_GPIO_Init+0xfc>)
 8001a56:	f001 fbb9 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480a      	ldr	r0, [pc, #40]	@ (8001a98 <MX_GPIO_Init+0xfc>)
 8001a6e:	f001 fbad 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderSW2_Pin */
  GPIO_InitStruct.Pin = EncoderSW2_Pin;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EncoderSW2_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	4805      	ldr	r0, [pc, #20]	@ (8001a9c <MX_GPIO_Init+0x100>)
 8001a86:	f001 fba1 	bl	80031cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3730      	adds	r7, #48	@ 0x30
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40021800 	.word	0x40021800
 8001a9c:	40020c00 	.word	0x40020c00

08001aa0 <updateState>:

/* USER CODE BEGIN 4 */
static void updateState(){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
	int isModButtonDown = (HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET);
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	486b      	ldr	r0, [pc, #428]	@ (8001c58 <updateState+0x1b8>)
 8001aaa:	f001 feff 	bl	80038ac <HAL_GPIO_ReadPin>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf0c      	ite	eq
 8001ab4:	2301      	moveq	r3, #1
 8001ab6:	2300      	movne	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	617b      	str	r3, [r7, #20]

	if(isModButtonDown){
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80b2 	beq.w	8001c28 <updateState+0x188>
		int newEncoderVal1 = TIM1->CNT;
 8001ac4:	4b65      	ldr	r3, [pc, #404]	@ (8001c5c <updateState+0x1bc>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	613b      	str	r3, [r7, #16]
		int encoderDelata1 = newEncoderVal1-state.lastEncoderVal1;
 8001aca:	4b65      	ldr	r3, [pc, #404]	@ (8001c60 <updateState+0x1c0>)
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	60fb      	str	r3, [r7, #12]
		int newEncoderVal2 = TIM2->CNT;
 8001ad4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	60bb      	str	r3, [r7, #8]
		int encoderDelata2 = newEncoderVal2-state.lastEncoderVal2;
 8001adc:	4b60      	ldr	r3, [pc, #384]	@ (8001c60 <updateState+0x1c0>)
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	607b      	str	r3, [r7, #4]
		if(!state.modButtonDownState || abs(encoderDelata1) > 20 || abs(encoderDelata2) > 20){
 8001ae6:	4b5e      	ldr	r3, [pc, #376]	@ (8001c60 <updateState+0x1c0>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <updateState+0x66>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bfb8      	it	lt
 8001af4:	425b      	neglt	r3, r3
 8001af6:	2b14      	cmp	r3, #20
 8001af8:	dc05      	bgt.n	8001b06 <updateState+0x66>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bfb8      	it	lt
 8001b00:	425b      	neglt	r3, r3
 8001b02:	2b14      	cmp	r3, #20
 8001b04:	dd09      	ble.n	8001b1a <updateState+0x7a>
			state.modButtonDownState = 1;
 8001b06:	4b56      	ldr	r3, [pc, #344]	@ (8001c60 <updateState+0x1c0>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	60da      	str	r2, [r3, #12]
			state.lastEncoderVal1 = newEncoderVal1;
 8001b0c:	4a54      	ldr	r2, [pc, #336]	@ (8001c60 <updateState+0x1c0>)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	6113      	str	r3, [r2, #16]
			state.lastEncoderVal2 = newEncoderVal2;
 8001b12:	4a53      	ldr	r2, [pc, #332]	@ (8001c60 <updateState+0x1c0>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	6153      	str	r3, [r2, #20]
			return;
 8001b18:	e09b      	b.n	8001c52 <updateState+0x1b2>
		}
		if(encoderDelata1 !=0){
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d057      	beq.n	8001bd0 <updateState+0x130>
			if(state.effectTracker == 1){
 8001b20:	4b4f      	ldr	r3, [pc, #316]	@ (8001c60 <updateState+0x1c0>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d148      	bne.n	8001bba <updateState+0x11a>
				state.effectTracker = 0;
 8001b28:	4b4d      	ldr	r3, [pc, #308]	@ (8001c60 <updateState+0x1c0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]
				if(encoderDelata1 > 0 && state.currentEffect < NUM_EFFECTS - 1){
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	dd0a      	ble.n	8001b4a <updateState+0xaa>
 8001b34:	4b4a      	ldr	r3, [pc, #296]	@ (8001c60 <updateState+0x1c0>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d806      	bhi.n	8001b4a <updateState+0xaa>
					state.currentEffect = (state.currentEffect + 1);
 8001b3c:	4b48      	ldr	r3, [pc, #288]	@ (8001c60 <updateState+0x1c0>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	4b46      	ldr	r3, [pc, #280]	@ (8001c60 <updateState+0x1c0>)
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e00c      	b.n	8001b64 <updateState+0xc4>
				}
				else if(encoderDelata1 < 0 && state.currentEffect != 0){
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da38      	bge.n	8001bc2 <updateState+0x122>
 8001b50:	4b43      	ldr	r3, [pc, #268]	@ (8001c60 <updateState+0x1c0>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d034      	beq.n	8001bc2 <updateState+0x122>
					state.currentEffect = (state.currentEffect - 1);
 8001b58:	4b41      	ldr	r3, [pc, #260]	@ (8001c60 <updateState+0x1c0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b3f      	ldr	r3, [pc, #252]	@ (8001c60 <updateState+0x1c0>)
 8001b62:	701a      	strb	r2, [r3, #0]
				}
				else{
					goto endOfPrintUpdate;
				}
				switch(state.currentEffect){
 8001b64:	4b3e      	ldr	r3, [pc, #248]	@ (8001c60 <updateState+0x1c0>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d82b      	bhi.n	8001bc4 <updateState+0x124>
 8001b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b74 <updateState+0xd4>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001b85 	.word	0x08001b85
 8001b78:	08001b95 	.word	0x08001b95
 8001b7c:	08001b9b 	.word	0x08001b9b
 8001b80:	08001bab 	.word	0x08001bab
					case PASS:
						lcd_clear(&lcd);
 8001b84:	4837      	ldr	r0, [pc, #220]	@ (8001c64 <updateState+0x1c4>)
 8001b86:	f7ff fbc7 	bl	8001318 <lcd_clear>
						lcd_puts(&lcd, "No Effect");
 8001b8a:	4937      	ldr	r1, [pc, #220]	@ (8001c68 <updateState+0x1c8>)
 8001b8c:	4835      	ldr	r0, [pc, #212]	@ (8001c64 <updateState+0x1c4>)
 8001b8e:	f7ff fc56 	bl	800143e <lcd_puts>
						break;
 8001b92:	e017      	b.n	8001bc4 <updateState+0x124>
					case ECHO:
						EchoPrintInit();
 8001b94:	f7ff fab6 	bl	8001104 <EchoPrintInit>
						break;
 8001b98:	e014      	b.n	8001bc4 <updateState+0x124>
					case DELAY:
						lcd_clear(&lcd);
 8001b9a:	4832      	ldr	r0, [pc, #200]	@ (8001c64 <updateState+0x1c4>)
 8001b9c:	f7ff fbbc 	bl	8001318 <lcd_clear>
						lcd_puts(&lcd, "Delay");
 8001ba0:	4932      	ldr	r1, [pc, #200]	@ (8001c6c <updateState+0x1cc>)
 8001ba2:	4830      	ldr	r0, [pc, #192]	@ (8001c64 <updateState+0x1c4>)
 8001ba4:	f7ff fc4b 	bl	800143e <lcd_puts>
						break;
 8001ba8:	e00c      	b.n	8001bc4 <updateState+0x124>
					case NUM_EFFECTS:
						lcd_clear(&lcd);
 8001baa:	482e      	ldr	r0, [pc, #184]	@ (8001c64 <updateState+0x1c4>)
 8001bac:	f7ff fbb4 	bl	8001318 <lcd_clear>
						lcd_puts(&lcd, "NUM_EFFECTS (error)");
 8001bb0:	492f      	ldr	r1, [pc, #188]	@ (8001c70 <updateState+0x1d0>)
 8001bb2:	482c      	ldr	r0, [pc, #176]	@ (8001c64 <updateState+0x1c4>)
 8001bb4:	f7ff fc43 	bl	800143e <lcd_puts>
						break;
 8001bb8:	e004      	b.n	8001bc4 <updateState+0x124>
				}
			}
			else state.effectTracker = 1;
 8001bba:	4b29      	ldr	r3, [pc, #164]	@ (8001c60 <updateState+0x1c0>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	e000      	b.n	8001bc4 <updateState+0x124>
					goto endOfPrintUpdate;
 8001bc2:	bf00      	nop
			endOfPrintUpdate:
			state.lastEncoderVal1 = newEncoderVal1;
 8001bc4:	4a26      	ldr	r2, [pc, #152]	@ (8001c60 <updateState+0x1c0>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	6113      	str	r3, [r2, #16]
			state.lastEncoderVal2 = newEncoderVal2;
 8001bca:	4a25      	ldr	r2, [pc, #148]	@ (8001c60 <updateState+0x1c0>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	6153      	str	r3, [r2, #20]
		}

		state.volume += encoderDelata2*0.01f;
 8001bd0:	4b23      	ldr	r3, [pc, #140]	@ (8001c60 <updateState+0x1c0>)
 8001bd2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be0:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001c74 <updateState+0x1d4>
 8001be4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bec:	4b1c      	ldr	r3, [pc, #112]	@ (8001c60 <updateState+0x1c0>)
 8001bee:	edc3 7a02 	vstr	s15, [r3, #8]
		if(state.volume < 0.) state.volume = 0.f;
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <updateState+0x1c0>)
 8001bf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	d503      	bpl.n	8001c0a <updateState+0x16a>
 8001c02:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <updateState+0x1c0>)
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
		if(state.volume > 1.) state.volume = 1.f;
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <updateState+0x1c0>)
 8001c0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	dd19      	ble.n	8001c52 <updateState+0x1b2>
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <updateState+0x1c0>)
 8001c20:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	e014      	b.n	8001c52 <updateState+0x1b2>

	}
	else{
		state.modButtonDownState = 0;
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <updateState+0x1c0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
		switch(state.currentEffect){
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <updateState+0x1c0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d80d      	bhi.n	8001c52 <updateState+0x1b2>
 8001c36:	a201      	add	r2, pc, #4	@ (adr r2, 8001c3c <updateState+0x19c>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001c53 	.word	0x08001c53
 8001c40:	08001c4d 	.word	0x08001c4d
 8001c44:	08001c53 	.word	0x08001c53
 8001c48:	08001c53 	.word	0x08001c53
			case PASS:
				break;
			case ECHO:
				EchoUpdateState();
 8001c4c:	f7ff f94c 	bl	8000ee8 <EchoUpdateState>
				break;
 8001c50:	bf00      	nop
			case NUM_EFFECTS:
				break;
		}

	}
}
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021800 	.word	0x40021800
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	20000030 	.word	0x20000030
 8001c64:	2003d488 	.word	0x2003d488
 8001c68:	08007bc4 	.word	0x08007bc4
 8001c6c:	08007bd0 	.word	0x08007bd0
 8001c70:	08007bd8 	.word	0x08007bd8
 8001c74:	3c23d70a 	.word	0x3c23d70a

08001c78 <doEffect>:


static void doEffect(int b){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	switch(state.currentEffect){
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <doEffect+0x50>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d81b      	bhi.n	8001cc0 <doEffect+0x48>
 8001c88:	a201      	add	r2, pc, #4	@ (adr r2, 8001c90 <doEffect+0x18>)
 8001c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8e:	bf00      	nop
 8001c90:	08001ca1 	.word	0x08001ca1
 8001c94:	08001ca9 	.word	0x08001ca9
 8001c98:	08001cb1 	.word	0x08001cb1
 8001c9c:	08001cb9 	.word	0x08001cb9
	case PASS:
		doPassthru(b);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f813 	bl	8001ccc <doPassthru>
		break;
 8001ca6:	e00b      	b.n	8001cc0 <doEffect+0x48>
	case ECHO:
		doEcho(b);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff f813 	bl	8000cd4 <doEcho>
		break;
 8001cae:	e007      	b.n	8001cc0 <doEffect+0x48>
	case DELAY:
		doPassthru(b);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f80b 	bl	8001ccc <doPassthru>
		break;
 8001cb6:	e003      	b.n	8001cc0 <doEffect+0x48>
	case NUM_EFFECTS:
		doPassthru(b);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f807 	bl	8001ccc <doPassthru>
		break;
 8001cbe:	bf00      	nop
	}
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000030 	.word	0x20000030

08001ccc <doPassthru>:



void doPassthru( int b )
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b08b      	sub	sp, #44	@ 0x2c
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_5, GPIO_PIN_SET );

	int startBuf = b * BUF_SAMPLES / 2;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	029b      	lsls	r3, r3, #10
 8001cd8:	61bb      	str	r3, [r7, #24]
	int endBuf = startBuf + BUF_SAMPLES / 2;
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ce0:	617b      	str	r3, [r7, #20]

	int i = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	623b      	str	r3, [r7, #32]
 8001cea:	e030      	b.n	8001d4e <doPassthru+0x82>
	{
		  srcLeft[i] = ( (rxBuf[pos]<<16)|rxBuf[pos+1] );
 8001cec:	4a3e      	ldr	r2, [pc, #248]	@ (8001de8 <doPassthru+0x11c>)
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	6a3a      	ldr	r2, [r7, #32]
 8001cf8:	3201      	adds	r2, #1
 8001cfa:	493b      	ldr	r1, [pc, #236]	@ (8001de8 <doPassthru+0x11c>)
 8001cfc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0a:	4a38      	ldr	r2, [pc, #224]	@ (8001dec <doPassthru+0x120>)
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	edc3 7a00 	vstr	s15, [r3]
		  srcRight[i] = ( (rxBuf[pos+2]<<16)|rxBuf[pos+3] );
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	3302      	adds	r3, #2
 8001d1a:	4a33      	ldr	r2, [pc, #204]	@ (8001de8 <doPassthru+0x11c>)
 8001d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	6a3a      	ldr	r2, [r7, #32]
 8001d24:	3203      	adds	r2, #3
 8001d26:	4930      	ldr	r1, [pc, #192]	@ (8001de8 <doPassthru+0x11c>)
 8001d28:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d36:	4a2e      	ldr	r2, [pc, #184]	@ (8001df0 <doPassthru+0x124>)
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	edc3 7a00 	vstr	s15, [r3]
		  i++;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	3301      	adds	r3, #1
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	6a3a      	ldr	r2, [r7, #32]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dbca      	blt.n	8001cec <doPassthru+0x20>
	}

	i = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	e038      	b.n	8001dd2 <doPassthru+0x106>
	  {
		  int lval = srcLeft[i] ;
 8001d60:	4a22      	ldr	r2, [pc, #136]	@ (8001dec <doPassthru+0x120>)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d70:	ee17 3a90 	vmov	r3, s15
 8001d74:	613b      	str	r3, [r7, #16]
		  int rval = srcRight[i];
 8001d76:	4a1e      	ldr	r2, [pc, #120]	@ (8001df0 <doPassthru+0x124>)
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d86:	ee17 3a90 	vmov	r3, s15
 8001d8a:	60fb      	str	r3, [r7, #12]

		  txBuf[pos] = (lval>>16)&0xFFFF;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	0c1b      	lsrs	r3, r3, #16
 8001d90:	b299      	uxth	r1, r3
 8001d92:	4a18      	ldr	r2, [pc, #96]	@ (8001df4 <doPassthru+0x128>)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[pos+1] = lval&0xFFFF;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	b291      	uxth	r1, r2
 8001da2:	4a14      	ldr	r2, [pc, #80]	@ (8001df4 <doPassthru+0x128>)
 8001da4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[pos+2] = (rval>>16)&0xFFFF;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	0c1a      	lsrs	r2, r3, #16
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	3302      	adds	r3, #2
 8001db0:	b291      	uxth	r1, r2
 8001db2:	4a10      	ldr	r2, [pc, #64]	@ (8001df4 <doPassthru+0x128>)
 8001db4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[pos+3] = rval&0xFFFF;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3303      	adds	r3, #3
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	b291      	uxth	r1, r2
 8001dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001df4 <doPassthru+0x128>)
 8001dc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  i++;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	3301      	adds	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dbc2      	blt.n	8001d60 <doPassthru+0x94>
	  }

    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_5, GPIO_PIN_RESET );

}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	372c      	adds	r7, #44	@ 0x2c
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	2003ac84 	.word	0x2003ac84
 8001dec:	2003cc84 	.word	0x2003cc84
 8001df0:	2003d084 	.word	0x2003d084
 8001df4:	2003bc84 	.word	0x2003bc84

08001df8 <HAL_I2S_TxCpltCallback>:


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);
	txFullComplete = 1;
 8001e00:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <HAL_I2S_TxCpltCallback+0x1c>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_3, GPIO_PIN_SET );
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_3, GPIO_PIN_RESET );
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	2003ac7c 	.word	0x2003ac7c

08001e18 <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
    UNUSED(hi2s);
	rxFullComplete = 1;
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <HAL_I2S_RxCpltCallback+0x1c>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_4, GPIO_PIN_SET );
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_4, GPIO_PIN_RESET );
  }
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	2003ac78 	.word	0x2003ac78

08001e38 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);
	txHalfComplete = 1;
 8001e40:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_3, GPIO_PIN_SET );
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_3, GPIO_PIN_RESET );
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	2003ac74 	.word	0x2003ac74

08001e58 <HAL_I2S_RxHalfCpltCallback>:


void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    UNUSED(hi2s);
	rxHalfComplete = 1;
 8001e60:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_4, GPIO_PIN_SET );
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_4, GPIO_PIN_RESET );
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	2003ac70 	.word	0x2003ac70

08001e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <Error_Handler+0x8>

08001e84 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	4a08      	ldr	r2, [pc, #32]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0aa      	sub	sp, #168	@ 0xa8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	2284      	movs	r2, #132	@ 0x84
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f005 f9b5 	bl	8007274 <memset>
  if(hi2c->Instance==I2C1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a22      	ldr	r2, [pc, #136]	@ (8001f98 <HAL_I2C_MspInit+0xb4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d13c      	bne.n	8001f8e <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fc98 	bl	8005858 <HAL_RCCEx_PeriphCLKConfig>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f2e:	f7ff ffa3 	bl	8001e78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <HAL_I2C_MspInit+0xb8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <HAL_I2C_MspInit+0xb8>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <HAL_I2C_MspInit+0xb8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f52:	2312      	movs	r3, #18
 8001f54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f64:	2304      	movs	r3, #4
 8001f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f6e:	4619      	mov	r1, r3
 8001f70:	480b      	ldr	r0, [pc, #44]	@ (8001fa0 <HAL_I2C_MspInit+0xbc>)
 8001f72:	f001 f92b 	bl	80031cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_I2C_MspInit+0xb8>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	4a08      	ldr	r2, [pc, #32]	@ (8001f9c <HAL_I2C_MspInit+0xb8>)
 8001f7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_I2C_MspInit+0xb8>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f8e:	bf00      	nop
 8001f90:	37a8      	adds	r7, #168	@ 0xa8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40005400 	.word	0x40005400
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020400 	.word	0x40020400

08001fa4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08e      	sub	sp, #56	@ 0x38
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a7b      	ldr	r2, [pc, #492]	@ (80021b0 <HAL_I2S_MspInit+0x20c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d175      	bne.n	80020b2 <HAL_I2S_MspInit+0x10e>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fc6:	4b7b      	ldr	r3, [pc, #492]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	4a7a      	ldr	r2, [pc, #488]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd2:	4b78      	ldr	r3, [pc, #480]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fda:	623b      	str	r3, [r7, #32]
 8001fdc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	4b75      	ldr	r3, [pc, #468]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a74      	ldr	r2, [pc, #464]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b72      	ldr	r3, [pc, #456]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	4b6f      	ldr	r3, [pc, #444]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	4a6e      	ldr	r2, [pc, #440]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	6313      	str	r3, [r2, #48]	@ 0x30
 8002002:	4b6c      	ldr	r3, [pc, #432]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800200e:	2348      	movs	r3, #72	@ 0x48
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800201e:	2305      	movs	r3, #5
 8002020:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002026:	4619      	mov	r1, r3
 8002028:	4863      	ldr	r0, [pc, #396]	@ (80021b8 <HAL_I2S_MspInit+0x214>)
 800202a:	f001 f8cf 	bl	80031cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800202e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002040:	2305      	movs	r3, #5
 8002042:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002048:	4619      	mov	r1, r3
 800204a:	485c      	ldr	r0, [pc, #368]	@ (80021bc <HAL_I2S_MspInit+0x218>)
 800204c:	f001 f8be 	bl	80031cc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002050:	4b5b      	ldr	r3, [pc, #364]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 8002052:	4a5c      	ldr	r2, [pc, #368]	@ (80021c4 <HAL_I2S_MspInit+0x220>)
 8002054:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002056:	4b5a      	ldr	r3, [pc, #360]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 8002058:	2200      	movs	r2, #0
 800205a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800205c:	4b58      	ldr	r3, [pc, #352]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002062:	4b57      	ldr	r3, [pc, #348]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 8002064:	2200      	movs	r2, #0
 8002066:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002068:	4b55      	ldr	r3, [pc, #340]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 800206a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800206e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002070:	4b53      	ldr	r3, [pc, #332]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 8002072:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002076:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002078:	4b51      	ldr	r3, [pc, #324]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 800207a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800207e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002080:	4b4f      	ldr	r3, [pc, #316]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 8002082:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002086:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002088:	4b4d      	ldr	r3, [pc, #308]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 800208a:	2200      	movs	r2, #0
 800208c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800208e:	4b4c      	ldr	r3, [pc, #304]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 8002090:	2200      	movs	r2, #0
 8002092:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002094:	484a      	ldr	r0, [pc, #296]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 8002096:	f000 fba7 	bl	80027e8 <HAL_DMA_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_I2S_MspInit+0x100>
    {
      Error_Handler();
 80020a0:	f7ff feea 	bl	8001e78 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a46      	ldr	r2, [pc, #280]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 80020a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80020aa:	4a45      	ldr	r2, [pc, #276]	@ (80021c0 <HAL_I2S_MspInit+0x21c>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020b0:	e079      	b.n	80021a6 <HAL_I2S_MspInit+0x202>
  else if(hi2s->Instance==SPI3)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a44      	ldr	r2, [pc, #272]	@ (80021c8 <HAL_I2S_MspInit+0x224>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d174      	bne.n	80021a6 <HAL_I2S_MspInit+0x202>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020bc:	4b3d      	ldr	r3, [pc, #244]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	4a3c      	ldr	r2, [pc, #240]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 80020c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c8:	4b3a      	ldr	r3, [pc, #232]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	4b37      	ldr	r3, [pc, #220]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d8:	4a36      	ldr	r2, [pc, #216]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e0:	4b34      	ldr	r3, [pc, #208]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ec:	4b31      	ldr	r3, [pc, #196]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f0:	4a30      	ldr	r2, [pc, #192]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f8:	4b2e      	ldr	r3, [pc, #184]	@ (80021b4 <HAL_I2S_MspInit+0x210>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002104:	2310      	movs	r3, #16
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002114:	2306      	movs	r3, #6
 8002116:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800211c:	4619      	mov	r1, r3
 800211e:	482b      	ldr	r0, [pc, #172]	@ (80021cc <HAL_I2S_MspInit+0x228>)
 8002120:	f001 f854 	bl	80031cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002124:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002136:	2306      	movs	r3, #6
 8002138:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213e:	4619      	mov	r1, r3
 8002140:	481d      	ldr	r0, [pc, #116]	@ (80021b8 <HAL_I2S_MspInit+0x214>)
 8002142:	f001 f843 	bl	80031cc <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002146:	4b22      	ldr	r3, [pc, #136]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 8002148:	4a22      	ldr	r2, [pc, #136]	@ (80021d4 <HAL_I2S_MspInit+0x230>)
 800214a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800214c:	4b20      	ldr	r3, [pc, #128]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 800214e:	2200      	movs	r2, #0
 8002150:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002152:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 8002154:	2240      	movs	r2, #64	@ 0x40
 8002156:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002158:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800215e:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 8002160:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002164:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002166:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 8002168:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800216c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800216e:	4b18      	ldr	r3, [pc, #96]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 8002170:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002174:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002176:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 8002178:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800217c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800217e:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 8002180:	2200      	movs	r2, #0
 8002182:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 8002186:	2200      	movs	r2, #0
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800218a:	4811      	ldr	r0, [pc, #68]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 800218c:	f000 fb2c 	bl	80027e8 <HAL_DMA_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2S_MspInit+0x1f6>
      Error_Handler();
 8002196:	f7ff fe6f 	bl	8001e78 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a0c      	ldr	r2, [pc, #48]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 800219e:	631a      	str	r2, [r3, #48]	@ 0x30
 80021a0:	4a0b      	ldr	r2, [pc, #44]	@ (80021d0 <HAL_I2S_MspInit+0x22c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80021a6:	bf00      	nop
 80021a8:	3738      	adds	r7, #56	@ 0x38
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40003800 	.word	0x40003800
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020400 	.word	0x40020400
 80021c0:	2003ab18 	.word	0x2003ab18
 80021c4:	40026058 	.word	0x40026058
 80021c8:	40003c00 	.word	0x40003c00
 80021cc:	40020000 	.word	0x40020000
 80021d0:	2003ab78 	.word	0x2003ab78
 80021d4:	40026088 	.word	0x40026088

080021d8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	@ 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a3c      	ldr	r2, [pc, #240]	@ (80022e8 <HAL_TIM_Encoder_MspInit+0x110>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d129      	bne.n	800224e <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021fa:	4b3c      	ldr	r3, [pc, #240]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	4a3b      	ldr	r2, [pc, #236]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6453      	str	r3, [r2, #68]	@ 0x44
 8002206:	4b39      	ldr	r3, [pc, #228]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002212:	4b36      	ldr	r3, [pc, #216]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	4a35      	ldr	r2, [pc, #212]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 8002218:	f043 0310 	orr.w	r3, r3, #16
 800221c:	6313      	str	r3, [r2, #48]	@ 0x30
 800221e:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800222a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800222e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800223c:	2301      	movs	r3, #1
 800223e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	4619      	mov	r1, r3
 8002246:	482a      	ldr	r0, [pc, #168]	@ (80022f0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002248:	f000 ffc0 	bl	80031cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800224c:	e048      	b.n	80022e0 <HAL_TIM_Encoder_MspInit+0x108>
  else if(htim_encoder->Instance==TIM2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002256:	d143      	bne.n	80022e0 <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002258:	4b24      	ldr	r3, [pc, #144]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	4a23      	ldr	r2, [pc, #140]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6413      	str	r3, [r2, #64]	@ 0x40
 8002264:	4b21      	ldr	r3, [pc, #132]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002270:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	4a1d      	ldr	r2, [pc, #116]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6313      	str	r3, [r2, #48]	@ 0x30
 800227c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002288:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	4a17      	ldr	r2, [pc, #92]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	6313      	str	r3, [r2, #48]	@ 0x30
 8002294:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <HAL_TIM_Encoder_MspInit+0x114>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022a0:	2301      	movs	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022b0:	2301      	movs	r3, #1
 80022b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	480e      	ldr	r0, [pc, #56]	@ (80022f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80022bc:	f000 ff86 	bl	80031cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022c0:	2308      	movs	r3, #8
 80022c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022d0:	2301      	movs	r3, #1
 80022d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	4619      	mov	r1, r3
 80022da:	4807      	ldr	r0, [pc, #28]	@ (80022f8 <HAL_TIM_Encoder_MspInit+0x120>)
 80022dc:	f000 ff76 	bl	80031cc <HAL_GPIO_Init>
}
 80022e0:	bf00      	nop
 80022e2:	3730      	adds	r7, #48	@ 0x30
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40010000 	.word	0x40010000
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40020000 	.word	0x40020000
 80022f8:	40020400 	.word	0x40020400

080022fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <NMI_Handler+0x4>

08002304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <HardFault_Handler+0x4>

0800230c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <MemManage_Handler+0x4>

08002314 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <BusFault_Handler+0x4>

0800231c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <UsageFault_Handler+0x4>

08002324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002352:	f000 f8c5 	bl	80024e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002360:	4802      	ldr	r0, [pc, #8]	@ (800236c <DMA1_Stream3_IRQHandler+0x10>)
 8002362:	f000 fcc9 	bl	8002cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2003ab18 	.word	0x2003ab18

08002370 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002374:	4802      	ldr	r0, [pc, #8]	@ (8002380 <DMA1_Stream5_IRQHandler+0x10>)
 8002376:	f000 fcbf 	bl	8002cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2003ab78 	.word	0x2003ab78

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	@ (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f004 ff66 	bl	8007284 <__errno>
 80023b8:	4603      	mov	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	@ (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20050000 	.word	0x20050000
 80023e4:	00000400 	.word	0x00000400
 80023e8:	2003d490 	.word	0x2003d490
 80023ec:	2003d5e0 	.word	0x2003d5e0

080023f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <SystemInit+0x20>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fa:	4a05      	ldr	r2, [pc, #20]	@ (8002410 <SystemInit+0x20>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8002414:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800244c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002418:	f7ff ffea 	bl	80023f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800241c:	480c      	ldr	r0, [pc, #48]	@ (8002450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800241e:	490d      	ldr	r1, [pc, #52]	@ (8002454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002420:	4a0d      	ldr	r2, [pc, #52]	@ (8002458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002434:	4c0a      	ldr	r4, [pc, #40]	@ (8002460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002442:	f004 ff25 	bl	8007290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002446:	f7ff f811 	bl	800146c <main>
  bx  lr    
 800244a:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 800244c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002458:	08007e8c 	.word	0x08007e8c
  ldr r2, =_sbss
 800245c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002460:	2003d5e0 	.word	0x2003d5e0

08002464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC_IRQHandler>

08002466 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246a:	2003      	movs	r0, #3
 800246c:	f000 f94c 	bl	8002708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002470:	200f      	movs	r0, #15
 8002472:	f000 f805 	bl	8002480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002476:	f7ff fd11 	bl	8001e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002488:	4b12      	ldr	r3, [pc, #72]	@ (80024d4 <HAL_InitTick+0x54>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b12      	ldr	r3, [pc, #72]	@ (80024d8 <HAL_InitTick+0x58>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002496:	fbb3 f3f1 	udiv	r3, r3, r1
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f996 	bl	80027d0 <HAL_SYSTICK_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e00e      	b.n	80024cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0f      	cmp	r3, #15
 80024b2:	d80a      	bhi.n	80024ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b4:	2200      	movs	r2, #0
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024bc:	f000 f944 	bl	8002748 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c0:	4a06      	ldr	r2, [pc, #24]	@ (80024dc <HAL_InitTick+0x5c>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000048 	.word	0x20000048
 80024d8:	20000050 	.word	0x20000050
 80024dc:	2000004c 	.word	0x2000004c

080024e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_IncTick+0x20>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_IncTick+0x24>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	4a04      	ldr	r2, [pc, #16]	@ (8002504 <HAL_IncTick+0x24>)
 80024f2:	6013      	str	r3, [r2, #0]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000050 	.word	0x20000050
 8002504:	2003d494 	.word	0x2003d494

08002508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return uwTick;
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <HAL_GetTick+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	2003d494 	.word	0x2003d494

08002520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff ffee 	bl	8002508 <HAL_GetTick>
 800252c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002538:	d005      	beq.n	8002546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_Delay+0x44>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002546:	bf00      	nop
 8002548:	f7ff ffde 	bl	8002508 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d8f7      	bhi.n	8002548 <HAL_Delay+0x28>
  {
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000050 	.word	0x20000050

08002568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <__NVIC_SetPriorityGrouping+0x40>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002584:	4013      	ands	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	4313      	orrs	r3, r2
 8002594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002596:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60d3      	str	r3, [r2, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00
 80025ac:	05fa0000 	.word	0x05fa0000

080025b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b4:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <__NVIC_GetPriorityGrouping+0x18>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0307 	and.w	r3, r3, #7
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	db0b      	blt.n	80025f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4907      	ldr	r1, [pc, #28]	@ (8002604 <__NVIC_EnableIRQ+0x38>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2001      	movs	r0, #1
 80025ee:	fa00 f202 	lsl.w	r2, r0, r2
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000e100 	.word	0xe000e100

08002608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	2b00      	cmp	r3, #0
 800261a:	db0a      	blt.n	8002632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	490c      	ldr	r1, [pc, #48]	@ (8002654 <__NVIC_SetPriority+0x4c>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	0112      	lsls	r2, r2, #4
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	440b      	add	r3, r1
 800262c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002630:	e00a      	b.n	8002648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4908      	ldr	r1, [pc, #32]	@ (8002658 <__NVIC_SetPriority+0x50>)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	3b04      	subs	r3, #4
 8002640:	0112      	lsls	r2, r2, #4
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	440b      	add	r3, r1
 8002646:	761a      	strb	r2, [r3, #24]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000e100 	.word	0xe000e100
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	@ 0x24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f1c3 0307 	rsb	r3, r3, #7
 8002676:	2b04      	cmp	r3, #4
 8002678:	bf28      	it	cs
 800267a:	2304      	movcs	r3, #4
 800267c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3304      	adds	r3, #4
 8002682:	2b06      	cmp	r3, #6
 8002684:	d902      	bls.n	800268c <NVIC_EncodePriority+0x30>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3b03      	subs	r3, #3
 800268a:	e000      	b.n	800268e <NVIC_EncodePriority+0x32>
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	401a      	ands	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43d9      	mvns	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	4313      	orrs	r3, r2
         );
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3724      	adds	r7, #36	@ 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026d4:	d301      	bcc.n	80026da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00f      	b.n	80026fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026da:	4a0a      	ldr	r2, [pc, #40]	@ (8002704 <SysTick_Config+0x40>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e2:	210f      	movs	r1, #15
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026e8:	f7ff ff8e 	bl	8002608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ec:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <SysTick_Config+0x40>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f2:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <SysTick_Config+0x40>)
 80026f4:	2207      	movs	r2, #7
 80026f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	e000e010 	.word	0xe000e010

08002708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b07      	cmp	r3, #7
 8002714:	d00f      	beq.n	8002736 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b06      	cmp	r3, #6
 800271a:	d00c      	beq.n	8002736 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b05      	cmp	r3, #5
 8002720:	d009      	beq.n	8002736 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d006      	beq.n	8002736 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d003      	beq.n	8002736 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800272e:	2191      	movs	r1, #145	@ 0x91
 8002730:	4804      	ldr	r0, [pc, #16]	@ (8002744 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002732:	f7ff fba7 	bl	8001e84 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ff16 	bl	8002568 <__NVIC_SetPriorityGrouping>
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	08007bec 	.word	0x08007bec

08002748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b0f      	cmp	r3, #15
 800275e:	d903      	bls.n	8002768 <HAL_NVIC_SetPriority+0x20>
 8002760:	21a9      	movs	r1, #169	@ 0xa9
 8002762:	480e      	ldr	r0, [pc, #56]	@ (800279c <HAL_NVIC_SetPriority+0x54>)
 8002764:	f7ff fb8e 	bl	8001e84 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b0f      	cmp	r3, #15
 800276c:	d903      	bls.n	8002776 <HAL_NVIC_SetPriority+0x2e>
 800276e:	21aa      	movs	r1, #170	@ 0xaa
 8002770:	480a      	ldr	r0, [pc, #40]	@ (800279c <HAL_NVIC_SetPriority+0x54>)
 8002772:	f7ff fb87 	bl	8001e84 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002776:	f7ff ff1b 	bl	80025b0 <__NVIC_GetPriorityGrouping>
 800277a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	6978      	ldr	r0, [r7, #20]
 8002782:	f7ff ff6b 	bl	800265c <NVIC_EncodePriority>
 8002786:	4602      	mov	r2, r0
 8002788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff3a 	bl	8002608 <__NVIC_SetPriority>
}
 8002794:	bf00      	nop
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	08007bec 	.word	0x08007bec

080027a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da03      	bge.n	80027ba <HAL_NVIC_EnableIRQ+0x1a>
 80027b2:	21bd      	movs	r1, #189	@ 0xbd
 80027b4:	4805      	ldr	r0, [pc, #20]	@ (80027cc <HAL_NVIC_EnableIRQ+0x2c>)
 80027b6:	f7ff fb65 	bl	8001e84 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff04 	bl	80025cc <__NVIC_EnableIRQ>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	08007bec 	.word	0x08007bec

080027d0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff73 	bl	80026c4 <SysTick_Config>
 80027de:	4603      	mov	r3, r0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff fe88 	bl	8002508 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e203      	b.n	8002c0c <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a8b      	ldr	r2, [pc, #556]	@ (8002a38 <HAL_DMA_Init+0x250>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d04e      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a8a      	ldr	r2, [pc, #552]	@ (8002a3c <HAL_DMA_Init+0x254>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d049      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a88      	ldr	r2, [pc, #544]	@ (8002a40 <HAL_DMA_Init+0x258>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d044      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a87      	ldr	r2, [pc, #540]	@ (8002a44 <HAL_DMA_Init+0x25c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d03f      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a85      	ldr	r2, [pc, #532]	@ (8002a48 <HAL_DMA_Init+0x260>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d03a      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a84      	ldr	r2, [pc, #528]	@ (8002a4c <HAL_DMA_Init+0x264>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d035      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a82      	ldr	r2, [pc, #520]	@ (8002a50 <HAL_DMA_Init+0x268>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d030      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a81      	ldr	r2, [pc, #516]	@ (8002a54 <HAL_DMA_Init+0x26c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d02b      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a7f      	ldr	r2, [pc, #508]	@ (8002a58 <HAL_DMA_Init+0x270>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d026      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7e      	ldr	r2, [pc, #504]	@ (8002a5c <HAL_DMA_Init+0x274>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d021      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a7c      	ldr	r2, [pc, #496]	@ (8002a60 <HAL_DMA_Init+0x278>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01c      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a7b      	ldr	r2, [pc, #492]	@ (8002a64 <HAL_DMA_Init+0x27c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d017      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a79      	ldr	r2, [pc, #484]	@ (8002a68 <HAL_DMA_Init+0x280>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d012      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a78      	ldr	r2, [pc, #480]	@ (8002a6c <HAL_DMA_Init+0x284>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00d      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a76      	ldr	r2, [pc, #472]	@ (8002a70 <HAL_DMA_Init+0x288>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d008      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a75      	ldr	r2, [pc, #468]	@ (8002a74 <HAL_DMA_Init+0x28c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <HAL_DMA_Init+0xc4>
 80028a4:	21b8      	movs	r1, #184	@ 0xb8
 80028a6:	4874      	ldr	r0, [pc, #464]	@ (8002a78 <HAL_DMA_Init+0x290>)
 80028a8:	f7ff faec 	bl	8001e84 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d026      	beq.n	8002902 <HAL_DMA_Init+0x11a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028bc:	d021      	beq.n	8002902 <HAL_DMA_Init+0x11a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028c6:	d01c      	beq.n	8002902 <HAL_DMA_Init+0x11a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80028d0:	d017      	beq.n	8002902 <HAL_DMA_Init+0x11a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028da:	d012      	beq.n	8002902 <HAL_DMA_Init+0x11a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 80028e4:	d00d      	beq.n	8002902 <HAL_DMA_Init+0x11a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80028ee:	d008      	beq.n	8002902 <HAL_DMA_Init+0x11a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 80028f8:	d003      	beq.n	8002902 <HAL_DMA_Init+0x11a>
 80028fa:	21b9      	movs	r1, #185	@ 0xb9
 80028fc:	485e      	ldr	r0, [pc, #376]	@ (8002a78 <HAL_DMA_Init+0x290>)
 80028fe:	f7ff fac1 	bl	8001e84 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <HAL_DMA_Init+0x13a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b40      	cmp	r3, #64	@ 0x40
 8002910:	d007      	beq.n	8002922 <HAL_DMA_Init+0x13a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b80      	cmp	r3, #128	@ 0x80
 8002918:	d003      	beq.n	8002922 <HAL_DMA_Init+0x13a>
 800291a:	21ba      	movs	r1, #186	@ 0xba
 800291c:	4856      	ldr	r0, [pc, #344]	@ (8002a78 <HAL_DMA_Init+0x290>)
 800291e:	f7ff fab1 	bl	8001e84 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800292a:	d007      	beq.n	800293c <HAL_DMA_Init+0x154>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_DMA_Init+0x154>
 8002934:	21bb      	movs	r1, #187	@ 0xbb
 8002936:	4850      	ldr	r0, [pc, #320]	@ (8002a78 <HAL_DMA_Init+0x290>)
 8002938:	f7ff faa4 	bl	8001e84 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002944:	d007      	beq.n	8002956 <HAL_DMA_Init+0x16e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_DMA_Init+0x16e>
 800294e:	21bc      	movs	r1, #188	@ 0xbc
 8002950:	4849      	ldr	r0, [pc, #292]	@ (8002a78 <HAL_DMA_Init+0x290>)
 8002952:	f7ff fa97 	bl	8001e84 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00d      	beq.n	800297a <HAL_DMA_Init+0x192>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002966:	d008      	beq.n	800297a <HAL_DMA_Init+0x192>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002970:	d003      	beq.n	800297a <HAL_DMA_Init+0x192>
 8002972:	21bd      	movs	r1, #189	@ 0xbd
 8002974:	4840      	ldr	r0, [pc, #256]	@ (8002a78 <HAL_DMA_Init+0x290>)
 8002976:	f7ff fa85 	bl	8001e84 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <HAL_DMA_Init+0x1b6>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800298a:	d008      	beq.n	800299e <HAL_DMA_Init+0x1b6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002994:	d003      	beq.n	800299e <HAL_DMA_Init+0x1b6>
 8002996:	21be      	movs	r1, #190	@ 0xbe
 8002998:	4837      	ldr	r0, [pc, #220]	@ (8002a78 <HAL_DMA_Init+0x290>)
 800299a:	f7ff fa73 	bl	8001e84 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_DMA_Init+0x1d8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ae:	d007      	beq.n	80029c0 <HAL_DMA_Init+0x1d8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d003      	beq.n	80029c0 <HAL_DMA_Init+0x1d8>
 80029b8:	21bf      	movs	r1, #191	@ 0xbf
 80029ba:	482f      	ldr	r0, [pc, #188]	@ (8002a78 <HAL_DMA_Init+0x290>)
 80029bc:	f7ff fa62 	bl	8001e84 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d012      	beq.n	80029ee <HAL_DMA_Init+0x206>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d0:	d00d      	beq.n	80029ee <HAL_DMA_Init+0x206>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029da:	d008      	beq.n	80029ee <HAL_DMA_Init+0x206>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029e4:	d003      	beq.n	80029ee <HAL_DMA_Init+0x206>
 80029e6:	21c0      	movs	r1, #192	@ 0xc0
 80029e8:	4823      	ldr	r0, [pc, #140]	@ (8002a78 <HAL_DMA_Init+0x290>)
 80029ea:	f7ff fa4b 	bl	8001e84 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_DMA_Init+0x21e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d003      	beq.n	8002a06 <HAL_DMA_Init+0x21e>
 80029fe:	21c1      	movs	r1, #193	@ 0xc1
 8002a00:	481d      	ldr	r0, [pc, #116]	@ (8002a78 <HAL_DMA_Init+0x290>)
 8002a02:	f7ff fa3f 	bl	8001e84 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d064      	beq.n	8002ad8 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d032      	beq.n	8002a7c <HAL_DMA_Init+0x294>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d02e      	beq.n	8002a7c <HAL_DMA_Init+0x294>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d02a      	beq.n	8002a7c <HAL_DMA_Init+0x294>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d026      	beq.n	8002a7c <HAL_DMA_Init+0x294>
 8002a2e:	21c6      	movs	r1, #198	@ 0xc6
 8002a30:	4811      	ldr	r0, [pc, #68]	@ (8002a78 <HAL_DMA_Init+0x290>)
 8002a32:	f7ff fa27 	bl	8001e84 <assert_failed>
 8002a36:	e021      	b.n	8002a7c <HAL_DMA_Init+0x294>
 8002a38:	40026010 	.word	0x40026010
 8002a3c:	40026028 	.word	0x40026028
 8002a40:	40026040 	.word	0x40026040
 8002a44:	40026058 	.word	0x40026058
 8002a48:	40026070 	.word	0x40026070
 8002a4c:	40026088 	.word	0x40026088
 8002a50:	400260a0 	.word	0x400260a0
 8002a54:	400260b8 	.word	0x400260b8
 8002a58:	40026410 	.word	0x40026410
 8002a5c:	40026428 	.word	0x40026428
 8002a60:	40026440 	.word	0x40026440
 8002a64:	40026458 	.word	0x40026458
 8002a68:	40026470 	.word	0x40026470
 8002a6c:	40026488 	.word	0x40026488
 8002a70:	400264a0 	.word	0x400264a0
 8002a74:	400264b8 	.word	0x400264b8
 8002a78:	08007c28 	.word	0x08007c28
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d012      	beq.n	8002aaa <HAL_DMA_Init+0x2c2>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a8c:	d00d      	beq.n	8002aaa <HAL_DMA_Init+0x2c2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a96:	d008      	beq.n	8002aaa <HAL_DMA_Init+0x2c2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aa0:	d003      	beq.n	8002aaa <HAL_DMA_Init+0x2c2>
 8002aa2:	21c7      	movs	r1, #199	@ 0xc7
 8002aa4:	485b      	ldr	r0, [pc, #364]	@ (8002c14 <HAL_DMA_Init+0x42c>)
 8002aa6:	f7ff f9ed 	bl	8001e84 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d012      	beq.n	8002ad8 <HAL_DMA_Init+0x2f0>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aba:	d00d      	beq.n	8002ad8 <HAL_DMA_Init+0x2f0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ac4:	d008      	beq.n	8002ad8 <HAL_DMA_Init+0x2f0>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ace:	d003      	beq.n	8002ad8 <HAL_DMA_Init+0x2f0>
 8002ad0:	21c8      	movs	r1, #200	@ 0xc8
 8002ad2:	4850      	ldr	r0, [pc, #320]	@ (8002c14 <HAL_DMA_Init+0x42c>)
 8002ad4:	f7ff f9d6 	bl	8001e84 <assert_failed>
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af8:	e00f      	b.n	8002b1a <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002afa:	f7ff fd05 	bl	8002508 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b05      	cmp	r3, #5
 8002b06:	d908      	bls.n	8002b1a <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2203      	movs	r2, #3
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e078      	b.n	8002c0c <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e8      	bne.n	8002afa <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <HAL_DMA_Init+0x430>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d107      	bne.n	8002b84 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0307 	bic.w	r3, r3, #7
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d117      	bne.n	8002bde <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fa87 	bl	80030d4 <DMA_CheckFifoParam>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	@ 0x40
 8002bd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e016      	b.n	8002c0c <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fa3e 	bl	8003068 <DMA_CalcBaseAndBitshift>
 8002bec:	4603      	mov	r3, r0
 8002bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf4:	223f      	movs	r2, #63	@ 0x3f
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	08007c28 	.word	0x08007c28
 8002c18:	f010803f 	.word	0xf010803f

08002c1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_DMA_Start_IT+0x26>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c40:	d304      	bcc.n	8002c4c <HAL_DMA_Start_IT+0x30>
 8002c42:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8002c46:	482b      	ldr	r0, [pc, #172]	@ (8002cf4 <HAL_DMA_Start_IT+0xd8>)
 8002c48:	f7ff f91c 	bl	8001e84 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_DMA_Start_IT+0x3e>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e048      	b.n	8002cec <HAL_DMA_Start_IT+0xd0>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d137      	bne.n	8002cde <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2202      	movs	r2, #2
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f9c2 	bl	800300c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8c:	223f      	movs	r2, #63	@ 0x3f
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0216 	orr.w	r2, r2, #22
 8002ca2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cb2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_DMA_Start_IT+0xb0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0208 	orr.w	r2, r2, #8
 8002cca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e005      	b.n	8002cea <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	08007c28 	.word	0x08007c28

08002cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d04:	4b8e      	ldr	r3, [pc, #568]	@ (8002f40 <HAL_DMA_IRQHandler+0x248>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a8e      	ldr	r2, [pc, #568]	@ (8002f44 <HAL_DMA_IRQHandler+0x24c>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0a9b      	lsrs	r3, r3, #10
 8002d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d22:	2208      	movs	r2, #8
 8002d24:	409a      	lsls	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01a      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0204 	bic.w	r2, r2, #4
 8002d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	2208      	movs	r2, #8
 8002d52:	409a      	lsls	r2, r3
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d68:	2201      	movs	r2, #1
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d012      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	2201      	movs	r2, #1
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d92:	f043 0202 	orr.w	r2, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9e:	2204      	movs	r2, #4
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d012      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc8:	f043 0204 	orr.w	r2, r3, #4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d043      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d03c      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df2:	2210      	movs	r2, #16
 8002df4:	409a      	lsls	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d018      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d108      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d024      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
 8002e26:	e01f      	b.n	8002e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01b      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3
 8002e38:	e016      	b.n	8002e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0208 	bic.w	r2, r2, #8
 8002e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 808f 	beq.w	8002f98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8087 	beq.w	8002f98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8e:	2220      	movs	r2, #32
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d136      	bne.n	8002f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0216 	bic.w	r2, r2, #22
 8002eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <HAL_DMA_IRQHandler+0x1da>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0208 	bic.w	r2, r2, #8
 8002ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	223f      	movs	r2, #63	@ 0x3f
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d07e      	beq.n	8003004 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
        }
        return;
 8002f0e:	e079      	b.n	8003004 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01d      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10d      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d031      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
 8002f3c:	e02c      	b.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
 8002f3e:	bf00      	nop
 8002f40:	20000048 	.word	0x20000048
 8002f44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d023      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
 8002f58:	e01e      	b.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10f      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0210 	bic.w	r2, r2, #16
 8002f76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d032      	beq.n	8003006 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d022      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2205      	movs	r2, #5
 8002fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d307      	bcc.n	8002fe0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f2      	bne.n	8002fc4 <HAL_DMA_IRQHandler+0x2cc>
 8002fde:	e000      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fe0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4798      	blx	r3
 8003002:	e000      	b.n	8003006 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003004:	bf00      	nop
    }
  }
}
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003028:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b40      	cmp	r3, #64	@ 0x40
 8003038:	d108      	bne.n	800304c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800304a:	e007      	b.n	800305c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	60da      	str	r2, [r3, #12]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	3b10      	subs	r3, #16
 8003078:	4a13      	ldr	r2, [pc, #76]	@ (80030c8 <DMA_CalcBaseAndBitshift+0x60>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003082:	4a12      	ldr	r2, [pc, #72]	@ (80030cc <DMA_CalcBaseAndBitshift+0x64>)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d908      	bls.n	80030a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	4b0c      	ldr	r3, [pc, #48]	@ (80030d0 <DMA_CalcBaseAndBitshift+0x68>)
 800309e:	4013      	ands	r3, r2
 80030a0:	1d1a      	adds	r2, r3, #4
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80030a6:	e006      	b.n	80030b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b08      	ldr	r3, [pc, #32]	@ (80030d0 <DMA_CalcBaseAndBitshift+0x68>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	aaaaaaab 	.word	0xaaaaaaab
 80030cc:	08007e40 	.word	0x08007e40
 80030d0:	fffffc00 	.word	0xfffffc00

080030d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d11f      	bne.n	800312e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d856      	bhi.n	80031a2 <DMA_CheckFifoParam+0xce>
 80030f4:	a201      	add	r2, pc, #4	@ (adr r2, 80030fc <DMA_CheckFifoParam+0x28>)
 80030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fa:	bf00      	nop
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	0800311f 	.word	0x0800311f
 8003104:	0800310d 	.word	0x0800310d
 8003108:	080031a3 	.word	0x080031a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d046      	beq.n	80031a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800311c:	e043      	b.n	80031a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003122:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003126:	d140      	bne.n	80031aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312c:	e03d      	b.n	80031aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003136:	d121      	bne.n	800317c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d837      	bhi.n	80031ae <DMA_CheckFifoParam+0xda>
 800313e:	a201      	add	r2, pc, #4	@ (adr r2, 8003144 <DMA_CheckFifoParam+0x70>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	08003155 	.word	0x08003155
 8003148:	0800315b 	.word	0x0800315b
 800314c:	08003155 	.word	0x08003155
 8003150:	0800316d 	.word	0x0800316d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
      break;
 8003158:	e030      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d025      	beq.n	80031b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800316a:	e022      	b.n	80031b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003170:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003174:	d11f      	bne.n	80031b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800317a:	e01c      	b.n	80031b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d903      	bls.n	800318a <DMA_CheckFifoParam+0xb6>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d003      	beq.n	8003190 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003188:	e018      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
      break;
 800318e:	e015      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00e      	beq.n	80031ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      break;
 80031a0:	e00b      	b.n	80031ba <DMA_CheckFifoParam+0xe6>
      break;
 80031a2:	bf00      	nop
 80031a4:	e00a      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      break;
 80031a6:	bf00      	nop
 80031a8:	e008      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      break;
 80031aa:	bf00      	nop
 80031ac:	e006      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      break;
 80031ae:	bf00      	nop
 80031b0:	e004      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      break;
 80031b2:	bf00      	nop
 80031b4:	e002      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      break;   
 80031b6:	bf00      	nop
 80031b8:	e000      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      break;
 80031ba:	bf00      	nop
    }
  } 
  
  return status; 
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop

080031cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a3a      	ldr	r2, [pc, #232]	@ (80032d4 <HAL_GPIO_Init+0x108>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02b      	beq.n	8003246 <HAL_GPIO_Init+0x7a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a39      	ldr	r2, [pc, #228]	@ (80032d8 <HAL_GPIO_Init+0x10c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d027      	beq.n	8003246 <HAL_GPIO_Init+0x7a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a38      	ldr	r2, [pc, #224]	@ (80032dc <HAL_GPIO_Init+0x110>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d023      	beq.n	8003246 <HAL_GPIO_Init+0x7a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a37      	ldr	r2, [pc, #220]	@ (80032e0 <HAL_GPIO_Init+0x114>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01f      	beq.n	8003246 <HAL_GPIO_Init+0x7a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a36      	ldr	r2, [pc, #216]	@ (80032e4 <HAL_GPIO_Init+0x118>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01b      	beq.n	8003246 <HAL_GPIO_Init+0x7a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a35      	ldr	r2, [pc, #212]	@ (80032e8 <HAL_GPIO_Init+0x11c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d017      	beq.n	8003246 <HAL_GPIO_Init+0x7a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a34      	ldr	r2, [pc, #208]	@ (80032ec <HAL_GPIO_Init+0x120>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <HAL_GPIO_Init+0x7a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a33      	ldr	r2, [pc, #204]	@ (80032f0 <HAL_GPIO_Init+0x124>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00f      	beq.n	8003246 <HAL_GPIO_Init+0x7a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a32      	ldr	r2, [pc, #200]	@ (80032f4 <HAL_GPIO_Init+0x128>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00b      	beq.n	8003246 <HAL_GPIO_Init+0x7a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a31      	ldr	r2, [pc, #196]	@ (80032f8 <HAL_GPIO_Init+0x12c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <HAL_GPIO_Init+0x7a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a30      	ldr	r2, [pc, #192]	@ (80032fc <HAL_GPIO_Init+0x130>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x7a>
 800323e:	21aa      	movs	r1, #170	@ 0xaa
 8003240:	482f      	ldr	r0, [pc, #188]	@ (8003300 <HAL_GPIO_Init+0x134>)
 8003242:	f7fe fe1f 	bl	8001e84 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d103      	bne.n	8003258 <HAL_GPIO_Init+0x8c>
 8003250:	21ab      	movs	r1, #171	@ 0xab
 8003252:	482b      	ldr	r0, [pc, #172]	@ (8003300 <HAL_GPIO_Init+0x134>)
 8003254:	f7fe fe16 	bl	8001e84 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d035      	beq.n	80032cc <HAL_GPIO_Init+0x100>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d031      	beq.n	80032cc <HAL_GPIO_Init+0x100>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b11      	cmp	r3, #17
 800326e:	d02d      	beq.n	80032cc <HAL_GPIO_Init+0x100>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d029      	beq.n	80032cc <HAL_GPIO_Init+0x100>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b12      	cmp	r3, #18
 800327e:	d025      	beq.n	80032cc <HAL_GPIO_Init+0x100>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003288:	d020      	beq.n	80032cc <HAL_GPIO_Init+0x100>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003292:	d01b      	beq.n	80032cc <HAL_GPIO_Init+0x100>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 800329c:	d016      	beq.n	80032cc <HAL_GPIO_Init+0x100>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80032a6:	d011      	beq.n	80032cc <HAL_GPIO_Init+0x100>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80032b0:	d00c      	beq.n	80032cc <HAL_GPIO_Init+0x100>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80032ba:	d007      	beq.n	80032cc <HAL_GPIO_Init+0x100>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x100>
 80032c4:	21ac      	movs	r1, #172	@ 0xac
 80032c6:	480e      	ldr	r0, [pc, #56]	@ (8003300 <HAL_GPIO_Init+0x134>)
 80032c8:	f7fe fddc 	bl	8001e84 <assert_failed>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	e2c7      	b.n	8003862 <HAL_GPIO_Init+0x696>
 80032d2:	bf00      	nop
 80032d4:	40020000 	.word	0x40020000
 80032d8:	40020400 	.word	0x40020400
 80032dc:	40020800 	.word	0x40020800
 80032e0:	40020c00 	.word	0x40020c00
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40021400 	.word	0x40021400
 80032ec:	40021800 	.word	0x40021800
 80032f0:	40021c00 	.word	0x40021c00
 80032f4:	40022000 	.word	0x40022000
 80032f8:	40022400 	.word	0x40022400
 80032fc:	40022800 	.word	0x40022800
 8003300:	08007c60 	.word	0x08007c60
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003304:	2201      	movs	r2, #1
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	429a      	cmp	r2, r3
 800331e:	f040 829d 	bne.w	800385c <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d005      	beq.n	800333a <HAL_GPIO_Init+0x16e>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d144      	bne.n	80033c4 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00f      	beq.n	8003362 <HAL_GPIO_Init+0x196>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d00b      	beq.n	8003362 <HAL_GPIO_Init+0x196>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d007      	beq.n	8003362 <HAL_GPIO_Init+0x196>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x196>
 800335a:	21bd      	movs	r1, #189	@ 0xbd
 800335c:	4831      	ldr	r0, [pc, #196]	@ (8003424 <HAL_GPIO_Init+0x258>)
 800335e:	f7fe fd91 	bl	8001e84 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	2203      	movs	r2, #3
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003398:	2201      	movs	r2, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 0201 	and.w	r2, r3, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d02b      	beq.n	8003428 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00b      	beq.n	80033f0 <HAL_GPIO_Init+0x224>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d007      	beq.n	80033f0 <HAL_GPIO_Init+0x224>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x224>
 80033e8:	21ce      	movs	r1, #206	@ 0xce
 80033ea:	480e      	ldr	r0, [pc, #56]	@ (8003424 <HAL_GPIO_Init+0x258>)
 80033ec:	f7fe fd4a 	bl	8001e84 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	2203      	movs	r2, #3
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	60da      	str	r2, [r3, #12]
 8003420:	e002      	b.n	8003428 <HAL_GPIO_Init+0x25c>
 8003422:	bf00      	nop
 8003424:	08007c60 	.word	0x08007c60
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b02      	cmp	r3, #2
 8003432:	f040 8134 	bne.w	800369e <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 810b 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b01      	cmp	r3, #1
 8003446:	f000 8106 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 8101 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80fc 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80f7 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b01      	cmp	r3, #1
 800346e:	f000 80f2 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b02      	cmp	r3, #2
 8003478:	f000 80ed 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b02      	cmp	r3, #2
 8003482:	f000 80e8 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b02      	cmp	r3, #2
 800348c:	f000 80e3 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b03      	cmp	r3, #3
 8003496:	f000 80de 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	f000 80d9 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	f000 80d4 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	f000 80cf 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	f000 80ca 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	f000 80c5 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	f000 80c0 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b04      	cmp	r3, #4
 80034dc:	f000 80bb 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	f000 80b6 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	f000 80b1 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	f000 80ac 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b05      	cmp	r3, #5
 8003504:	f000 80a7 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b05      	cmp	r3, #5
 800350e:	f000 80a2 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b05      	cmp	r3, #5
 8003518:	f000 809d 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2b05      	cmp	r3, #5
 8003522:	f000 8098 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b05      	cmp	r3, #5
 800352c:	f000 8093 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b05      	cmp	r3, #5
 8003536:	f000 808e 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b06      	cmp	r3, #6
 8003540:	f000 8089 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b06      	cmp	r3, #6
 800354a:	f000 8084 	beq.w	8003656 <HAL_GPIO_Init+0x48a>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b07      	cmp	r3, #7
 8003554:	d07f      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b07      	cmp	r3, #7
 800355c:	d07b      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b07      	cmp	r3, #7
 8003564:	d077      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b07      	cmp	r3, #7
 800356c:	d073      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b07      	cmp	r3, #7
 8003574:	d06f      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b07      	cmp	r3, #7
 800357c:	d06b      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b07      	cmp	r3, #7
 8003584:	d067      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b08      	cmp	r3, #8
 800358c:	d063      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b08      	cmp	r3, #8
 8003594:	d05f      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b08      	cmp	r3, #8
 800359c:	d05b      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d057      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d053      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d04f      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d04b      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b09      	cmp	r3, #9
 80035c4:	d047      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b09      	cmp	r3, #9
 80035cc:	d043      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b09      	cmp	r3, #9
 80035d4:	d03f      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b09      	cmp	r3, #9
 80035dc:	d03b      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b09      	cmp	r3, #9
 80035e4:	d037      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b09      	cmp	r3, #9
 80035ec:	d033      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b09      	cmp	r3, #9
 80035f4:	d02f      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b0a      	cmp	r3, #10
 80035fc:	d02b      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b0a      	cmp	r3, #10
 8003604:	d027      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b0a      	cmp	r3, #10
 800360c:	d023      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b0a      	cmp	r3, #10
 8003614:	d01f      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b0b      	cmp	r3, #11
 800361c:	d01b      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b0c      	cmp	r3, #12
 8003624:	d017      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d013      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d00f      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b0f      	cmp	r3, #15
 800363c:	d00b      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b0d      	cmp	r3, #13
 8003644:	d007      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b0e      	cmp	r3, #14
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x48a>
 800364e:	21db      	movs	r1, #219	@ 0xdb
 8003650:	4888      	ldr	r0, [pc, #544]	@ (8003874 <HAL_GPIO_Init+0x6a8>)
 8003652:	f7fe fc17 	bl	8001e84 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	08da      	lsrs	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3208      	adds	r2, #8
 800365e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	220f      	movs	r2, #15
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	08da      	lsrs	r2, r3, #3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3208      	adds	r2, #8
 8003698:	69b9      	ldr	r1, [r7, #24]
 800369a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	2203      	movs	r2, #3
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0203 	and.w	r2, r3, #3
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80be 	beq.w	800385c <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e0:	4b65      	ldr	r3, [pc, #404]	@ (8003878 <HAL_GPIO_Init+0x6ac>)
 80036e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e4:	4a64      	ldr	r2, [pc, #400]	@ (8003878 <HAL_GPIO_Init+0x6ac>)
 80036e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80036ec:	4b62      	ldr	r3, [pc, #392]	@ (8003878 <HAL_GPIO_Init+0x6ac>)
 80036ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80036f8:	4a60      	ldr	r2, [pc, #384]	@ (800387c <HAL_GPIO_Init+0x6b0>)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	089b      	lsrs	r3, r3, #2
 80036fe:	3302      	adds	r3, #2
 8003700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	220f      	movs	r2, #15
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a58      	ldr	r2, [pc, #352]	@ (8003880 <HAL_GPIO_Init+0x6b4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d037      	beq.n	8003794 <HAL_GPIO_Init+0x5c8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a57      	ldr	r2, [pc, #348]	@ (8003884 <HAL_GPIO_Init+0x6b8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d031      	beq.n	8003790 <HAL_GPIO_Init+0x5c4>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a56      	ldr	r2, [pc, #344]	@ (8003888 <HAL_GPIO_Init+0x6bc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d02b      	beq.n	800378c <HAL_GPIO_Init+0x5c0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a55      	ldr	r2, [pc, #340]	@ (800388c <HAL_GPIO_Init+0x6c0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d025      	beq.n	8003788 <HAL_GPIO_Init+0x5bc>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a54      	ldr	r2, [pc, #336]	@ (8003890 <HAL_GPIO_Init+0x6c4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d01f      	beq.n	8003784 <HAL_GPIO_Init+0x5b8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a53      	ldr	r2, [pc, #332]	@ (8003894 <HAL_GPIO_Init+0x6c8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d019      	beq.n	8003780 <HAL_GPIO_Init+0x5b4>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a52      	ldr	r2, [pc, #328]	@ (8003898 <HAL_GPIO_Init+0x6cc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_GPIO_Init+0x5b0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a51      	ldr	r2, [pc, #324]	@ (800389c <HAL_GPIO_Init+0x6d0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00d      	beq.n	8003778 <HAL_GPIO_Init+0x5ac>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a50      	ldr	r2, [pc, #320]	@ (80038a0 <HAL_GPIO_Init+0x6d4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d007      	beq.n	8003774 <HAL_GPIO_Init+0x5a8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a4f      	ldr	r2, [pc, #316]	@ (80038a4 <HAL_GPIO_Init+0x6d8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_GPIO_Init+0x5a4>
 800376c:	2309      	movs	r3, #9
 800376e:	e012      	b.n	8003796 <HAL_GPIO_Init+0x5ca>
 8003770:	230a      	movs	r3, #10
 8003772:	e010      	b.n	8003796 <HAL_GPIO_Init+0x5ca>
 8003774:	2308      	movs	r3, #8
 8003776:	e00e      	b.n	8003796 <HAL_GPIO_Init+0x5ca>
 8003778:	2307      	movs	r3, #7
 800377a:	e00c      	b.n	8003796 <HAL_GPIO_Init+0x5ca>
 800377c:	2306      	movs	r3, #6
 800377e:	e00a      	b.n	8003796 <HAL_GPIO_Init+0x5ca>
 8003780:	2305      	movs	r3, #5
 8003782:	e008      	b.n	8003796 <HAL_GPIO_Init+0x5ca>
 8003784:	2304      	movs	r3, #4
 8003786:	e006      	b.n	8003796 <HAL_GPIO_Init+0x5ca>
 8003788:	2303      	movs	r3, #3
 800378a:	e004      	b.n	8003796 <HAL_GPIO_Init+0x5ca>
 800378c:	2302      	movs	r3, #2
 800378e:	e002      	b.n	8003796 <HAL_GPIO_Init+0x5ca>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_GPIO_Init+0x5ca>
 8003794:	2300      	movs	r3, #0
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	f002 0203 	and.w	r2, r2, #3
 800379c:	0092      	lsls	r2, r2, #2
 800379e:	4093      	lsls	r3, r2
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037a6:	4935      	ldr	r1, [pc, #212]	@ (800387c <HAL_GPIO_Init+0x6b0>)
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	089b      	lsrs	r3, r3, #2
 80037ac:	3302      	adds	r3, #2
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037b4:	4b3c      	ldr	r3, [pc, #240]	@ (80038a8 <HAL_GPIO_Init+0x6dc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037d8:	4a33      	ldr	r2, [pc, #204]	@ (80038a8 <HAL_GPIO_Init+0x6dc>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037de:	4b32      	ldr	r3, [pc, #200]	@ (80038a8 <HAL_GPIO_Init+0x6dc>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003802:	4a29      	ldr	r2, [pc, #164]	@ (80038a8 <HAL_GPIO_Init+0x6dc>)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003808:	4b27      	ldr	r3, [pc, #156]	@ (80038a8 <HAL_GPIO_Init+0x6dc>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800382c:	4a1e      	ldr	r2, [pc, #120]	@ (80038a8 <HAL_GPIO_Init+0x6dc>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003832:	4b1d      	ldr	r3, [pc, #116]	@ (80038a8 <HAL_GPIO_Init+0x6dc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003856:	4a14      	ldr	r2, [pc, #80]	@ (80038a8 <HAL_GPIO_Init+0x6dc>)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	3301      	adds	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	2b0f      	cmp	r3, #15
 8003866:	f67f ad4d 	bls.w	8003304 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 800386a:	bf00      	nop
 800386c:	bf00      	nop
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	08007c60 	.word	0x08007c60
 8003878:	40023800 	.word	0x40023800
 800387c:	40013800 	.word	0x40013800
 8003880:	40020000 	.word	0x40020000
 8003884:	40020400 	.word	0x40020400
 8003888:	40020800 	.word	0x40020800
 800388c:	40020c00 	.word	0x40020c00
 8003890:	40021000 	.word	0x40021000
 8003894:	40021400 	.word	0x40021400
 8003898:	40021800 	.word	0x40021800
 800389c:	40021c00 	.word	0x40021c00
 80038a0:	40022000 	.word	0x40022000
 80038a4:	40022400 	.word	0x40022400
 80038a8:	40013c00 	.word	0x40013c00

080038ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80038b8:	887b      	ldrh	r3, [r7, #2]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <HAL_GPIO_ReadPin+0x1c>
 80038be:	f240 1177 	movw	r1, #375	@ 0x177
 80038c2:	4809      	ldr	r0, [pc, #36]	@ (80038e8 <HAL_GPIO_ReadPin+0x3c>)
 80038c4:	f7fe fade 	bl	8001e84 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	887b      	ldrh	r3, [r7, #2]
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e001      	b.n	80038de <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038de:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	08007c60 	.word	0x08007c60

080038ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e113      	b.n	8003b26 <HAL_I2C_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a8b      	ldr	r2, [pc, #556]	@ (8003b30 <HAL_I2C_Init+0x244>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <HAL_I2C_Init+0x44>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a89      	ldr	r2, [pc, #548]	@ (8003b34 <HAL_I2C_Init+0x248>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00e      	beq.n	8003930 <HAL_I2C_Init+0x44>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a88      	ldr	r2, [pc, #544]	@ (8003b38 <HAL_I2C_Init+0x24c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_I2C_Init+0x44>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a86      	ldr	r2, [pc, #536]	@ (8003b3c <HAL_I2C_Init+0x250>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_I2C_Init+0x44>
 8003926:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800392a:	4885      	ldr	r0, [pc, #532]	@ (8003b40 <HAL_I2C_Init+0x254>)
 800392c:	f7fe faaa 	bl	8001e84 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003938:	d304      	bcc.n	8003944 <HAL_I2C_Init+0x58>
 800393a:	f240 2121 	movw	r1, #545	@ 0x221
 800393e:	4880      	ldr	r0, [pc, #512]	@ (8003b40 <HAL_I2C_Init+0x254>)
 8003940:	f7fe faa0 	bl	8001e84 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d008      	beq.n	800395e <HAL_I2C_Init+0x72>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d004      	beq.n	800395e <HAL_I2C_Init+0x72>
 8003954:	f240 2122 	movw	r1, #546	@ 0x222
 8003958:	4879      	ldr	r0, [pc, #484]	@ (8003b40 <HAL_I2C_Init+0x254>)
 800395a:	f7fe fa93 	bl	8001e84 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_I2C_Init+0x8e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800396e:	d004      	beq.n	800397a <HAL_I2C_Init+0x8e>
 8003970:	f240 2123 	movw	r1, #547	@ 0x223
 8003974:	4872      	ldr	r0, [pc, #456]	@ (8003b40 <HAL_I2C_Init+0x254>)
 8003976:	f7fe fa85 	bl	8001e84 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2bff      	cmp	r3, #255	@ 0xff
 8003980:	d904      	bls.n	800398c <HAL_I2C_Init+0xa0>
 8003982:	f44f 7109 	mov.w	r1, #548	@ 0x224
 8003986:	486e      	ldr	r0, [pc, #440]	@ (8003b40 <HAL_I2C_Init+0x254>)
 8003988:	f7fe fa7c 	bl	8001e84 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d020      	beq.n	80039d6 <HAL_I2C_Init+0xea>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d01c      	beq.n	80039d6 <HAL_I2C_Init+0xea>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d018      	beq.n	80039d6 <HAL_I2C_Init+0xea>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d014      	beq.n	80039d6 <HAL_I2C_Init+0xea>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d010      	beq.n	80039d6 <HAL_I2C_Init+0xea>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d00c      	beq.n	80039d6 <HAL_I2C_Init+0xea>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b06      	cmp	r3, #6
 80039c2:	d008      	beq.n	80039d6 <HAL_I2C_Init+0xea>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b07      	cmp	r3, #7
 80039ca:	d004      	beq.n	80039d6 <HAL_I2C_Init+0xea>
 80039cc:	f240 2125 	movw	r1, #549	@ 0x225
 80039d0:	485b      	ldr	r0, [pc, #364]	@ (8003b40 <HAL_I2C_Init+0x254>)
 80039d2:	f7fe fa57 	bl	8001e84 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_I2C_Init+0x106>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80039e6:	d004      	beq.n	80039f2 <HAL_I2C_Init+0x106>
 80039e8:	f240 2126 	movw	r1, #550	@ 0x226
 80039ec:	4854      	ldr	r0, [pc, #336]	@ (8003b40 <HAL_I2C_Init+0x254>)
 80039ee:	f7fe fa49 	bl	8001e84 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <HAL_I2C_Init+0x122>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a02:	d004      	beq.n	8003a0e <HAL_I2C_Init+0x122>
 8003a04:	f240 2127 	movw	r1, #551	@ 0x227
 8003a08:	484d      	ldr	r0, [pc, #308]	@ (8003b40 <HAL_I2C_Init+0x254>)
 8003a0a:	f7fe fa3b 	bl	8001e84 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fe fa5e 	bl	8001ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	@ 0x24
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	e006      	b.n	8003a84 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003a82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d108      	bne.n	8003a9e <HAL_I2C_Init+0x1b2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a9a:	605a      	str	r2, [r3, #4]
 8003a9c:	e007      	b.n	8003aae <HAL_I2C_Init+0x1c2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b22      	ldr	r3, [pc, #136]	@ (8003b44 <HAL_I2C_Init+0x258>)
 8003aba:	430b      	orrs	r3, r1
 8003abc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003acc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69d9      	ldr	r1, [r3, #28]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1a      	ldr	r2, [r3, #32]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40005400 	.word	0x40005400
 8003b34:	40005800 	.word	0x40005800
 8003b38:	40005c00 	.word	0x40005c00
 8003b3c:	40006000 	.word	0x40006000
 8003b40:	08007c9c 	.word	0x08007c9c
 8003b44:	02008000 	.word	0x02008000

08003b48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	607a      	str	r2, [r7, #4]
 8003b52:	461a      	mov	r2, r3
 8003b54:	460b      	mov	r3, r1
 8003b56:	817b      	strh	r3, [r7, #10]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	f040 80fd 	bne.w	8003d64 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_I2C_Master_Transmit+0x30>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e0f6      	b.n	8003d66 <HAL_I2C_Master_Transmit+0x21e>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b80:	f7fe fcc2 	bl	8002508 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	2319      	movs	r3, #25
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f914 	bl	8003dc0 <I2C_WaitOnFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e0e1      	b.n	8003d66 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2221      	movs	r2, #33	@ 0x21
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2210      	movs	r2, #16
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	893a      	ldrh	r2, [r7, #8]
 8003bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2bff      	cmp	r3, #255	@ 0xff
 8003bd2:	d906      	bls.n	8003be2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	22ff      	movs	r2, #255	@ 0xff
 8003bd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003bda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e007      	b.n	8003bf2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003bec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bf0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d024      	beq.n	8003c44 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	3301      	adds	r3, #1
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	8979      	ldrh	r1, [r7, #10]
 8003c36:	4b4e      	ldr	r3, [pc, #312]	@ (8003d70 <HAL_I2C_Master_Transmit+0x228>)
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fa83 	bl	8004148 <I2C_TransferConfig>
 8003c42:	e066      	b.n	8003d12 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	8979      	ldrh	r1, [r7, #10]
 8003c4c:	4b48      	ldr	r3, [pc, #288]	@ (8003d70 <HAL_I2C_Master_Transmit+0x228>)
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fa78 	bl	8004148 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c58:	e05b      	b.n	8003d12 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	6a39      	ldr	r1, [r7, #32]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f907 	bl	8003e72 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e07b      	b.n	8003d66 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d034      	beq.n	8003d12 <HAL_I2C_Master_Transmit+0x1ca>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d130      	bne.n	8003d12 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2180      	movs	r1, #128	@ 0x80
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f880 	bl	8003dc0 <I2C_WaitOnFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e04d      	b.n	8003d66 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2bff      	cmp	r3, #255	@ 0xff
 8003cd2:	d90e      	bls.n	8003cf2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	22ff      	movs	r2, #255	@ 0xff
 8003cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	8979      	ldrh	r1, [r7, #10]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fa2c 	bl	8004148 <I2C_TransferConfig>
 8003cf0:	e00f      	b.n	8003d12 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	8979      	ldrh	r1, [r7, #10]
 8003d04:	2300      	movs	r3, #0
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fa1b 	bl	8004148 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d19e      	bne.n	8003c5a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	6a39      	ldr	r1, [r7, #32]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f8ed 	bl	8003f00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e01a      	b.n	8003d66 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2220      	movs	r2, #32
 8003d36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b0c      	ldr	r3, [pc, #48]	@ (8003d74 <HAL_I2C_Master_Transmit+0x22c>)
 8003d44:	400b      	ands	r3, r1
 8003d46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	80002000 	.word	0x80002000
 8003d74:	fe00e800 	.word	0xfe00e800

08003d78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d103      	bne.n	8003d96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d007      	beq.n	8003db4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	619a      	str	r2, [r3, #24]
  }
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd0:	e03b      	b.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	6839      	ldr	r1, [r7, #0]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f8d6 	bl	8003f88 <I2C_IsErrorOccurred>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e041      	b.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dec:	d02d      	beq.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dee:	f7fe fb8b 	bl	8002508 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d302      	bcc.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d122      	bne.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d113      	bne.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	f043 0220 	orr.w	r2, r3, #32
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e00f      	b.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4013      	ands	r3, r2
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d0b4      	beq.n	8003dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e7e:	e033      	b.n	8003ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f87f 	bl	8003f88 <I2C_IsErrorOccurred>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e031      	b.n	8003ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e9a:	d025      	beq.n	8003ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9c:	f7fe fb34 	bl	8002508 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d302      	bcc.n	8003eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d11a      	bne.n	8003ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d013      	beq.n	8003ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e007      	b.n	8003ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d1c4      	bne.n	8003e80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f0c:	e02f      	b.n	8003f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f838 	bl	8003f88 <I2C_IsErrorOccurred>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e02d      	b.n	8003f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fe faf1 	bl	8002508 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11a      	bne.n	8003f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d013      	beq.n	8003f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f043 0220 	orr.w	r2, r3, #32
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e007      	b.n	8003f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d1c8      	bne.n	8003f0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	@ 0x28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d068      	beq.n	8004086 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2210      	movs	r2, #16
 8003fba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fbc:	e049      	b.n	8004052 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fc4:	d045      	beq.n	8004052 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fc6:	f7fe fa9f 	bl	8002508 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d302      	bcc.n	8003fdc <I2C_IsErrorOccurred+0x54>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d13a      	bne.n	8004052 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ffe:	d121      	bne.n	8004044 <I2C_IsErrorOccurred+0xbc>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004006:	d01d      	beq.n	8004044 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004008:	7cfb      	ldrb	r3, [r7, #19]
 800400a:	2b20      	cmp	r3, #32
 800400c:	d01a      	beq.n	8004044 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800401c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800401e:	f7fe fa73 	bl	8002508 <HAL_GetTick>
 8004022:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004024:	e00e      	b.n	8004044 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004026:	f7fe fa6f 	bl	8002508 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b19      	cmp	r3, #25
 8004032:	d907      	bls.n	8004044 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f043 0320 	orr.w	r3, r3, #32
 800403a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004042:	e006      	b.n	8004052 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b20      	cmp	r3, #32
 8004050:	d1e9      	bne.n	8004026 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b20      	cmp	r3, #32
 800405e:	d003      	beq.n	8004068 <I2C_IsErrorOccurred+0xe0>
 8004060:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0aa      	beq.n	8003fbe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800406c:	2b00      	cmp	r3, #0
 800406e:	d103      	bne.n	8004078 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2220      	movs	r2, #32
 8004076:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	f043 0304 	orr.w	r3, r3, #4
 800407e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00b      	beq.n	80040b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	f043 0308 	orr.w	r3, r3, #8
 80040c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	f043 0302 	orr.w	r3, r3, #2
 80040e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80040f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01c      	beq.n	8004136 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff fe3b 	bl	8003d78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4b0d      	ldr	r3, [pc, #52]	@ (8004144 <I2C_IsErrorOccurred+0x1bc>)
 800410e:	400b      	ands	r3, r1
 8004110:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	431a      	orrs	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004136:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800413a:	4618      	mov	r0, r3
 800413c:	3728      	adds	r7, #40	@ 0x28
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	fe00e800 	.word	0xfe00e800

08004148 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	460b      	mov	r3, r1
 8004154:	817b      	strh	r3, [r7, #10]
 8004156:	4613      	mov	r3, r2
 8004158:	727b      	strb	r3, [r7, #9]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2f      	ldr	r2, [pc, #188]	@ (800421c <I2C_TransferConfig+0xd4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <I2C_TransferConfig+0x44>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a2d      	ldr	r2, [pc, #180]	@ (8004220 <I2C_TransferConfig+0xd8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <I2C_TransferConfig+0x44>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2c      	ldr	r2, [pc, #176]	@ (8004224 <I2C_TransferConfig+0xdc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <I2C_TransferConfig+0x44>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2a      	ldr	r2, [pc, #168]	@ (8004228 <I2C_TransferConfig+0xe0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <I2C_TransferConfig+0x44>
 8004182:	f641 41dd 	movw	r1, #7389	@ 0x1cdd
 8004186:	4829      	ldr	r0, [pc, #164]	@ (800422c <I2C_TransferConfig+0xe4>)
 8004188:	f7fd fe7c 	bl	8001e84 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004192:	d00b      	beq.n	80041ac <I2C_TransferConfig+0x64>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800419a:	d007      	beq.n	80041ac <I2C_TransferConfig+0x64>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <I2C_TransferConfig+0x64>
 80041a2:	f641 41de 	movw	r1, #7390	@ 0x1cde
 80041a6:	4821      	ldr	r0, [pc, #132]	@ (800422c <I2C_TransferConfig+0xe4>)
 80041a8:	f7fd fe6c 	bl	8001e84 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	4a20      	ldr	r2, [pc, #128]	@ (8004230 <I2C_TransferConfig+0xe8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00f      	beq.n	80041d4 <I2C_TransferConfig+0x8c>
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004234 <I2C_TransferConfig+0xec>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <I2C_TransferConfig+0x8c>
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	4a1e      	ldr	r2, [pc, #120]	@ (8004238 <I2C_TransferConfig+0xf0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <I2C_TransferConfig+0x8c>
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d004      	beq.n	80041d4 <I2C_TransferConfig+0x8c>
 80041ca:	f641 41df 	movw	r1, #7391	@ 0x1cdf
 80041ce:	4817      	ldr	r0, [pc, #92]	@ (800422c <I2C_TransferConfig+0xe4>)
 80041d0:	f7fd fe58 	bl	8001e84 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041d4:	897b      	ldrh	r3, [r7, #10]
 80041d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041da:	7a7b      	ldrb	r3, [r7, #9]
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041e2:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041f0:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	0d5b      	lsrs	r3, r3, #21
 80041fc:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004200:	4b0e      	ldr	r3, [pc, #56]	@ (800423c <I2C_TransferConfig+0xf4>)
 8004202:	430b      	orrs	r3, r1
 8004204:	43db      	mvns	r3, r3
 8004206:	ea02 0103 	and.w	r1, r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004214:	bf00      	nop
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40005400 	.word	0x40005400
 8004220:	40005800 	.word	0x40005800
 8004224:	40005c00 	.word	0x40005c00
 8004228:	40006000 	.word	0x40006000
 800422c:	08007c9c 	.word	0x08007c9c
 8004230:	80004000 	.word	0x80004000
 8004234:	80002400 	.word	0x80002400
 8004238:	80002000 	.word	0x80002000
 800423c:	03ff63ff 	.word	0x03ff63ff

08004240 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a32      	ldr	r2, [pc, #200]	@ (8004318 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d012      	beq.n	800427a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a30      	ldr	r2, [pc, #192]	@ (800431c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00d      	beq.n	800427a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a2f      	ldr	r2, [pc, #188]	@ (8004320 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d008      	beq.n	800427a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2d      	ldr	r2, [pc, #180]	@ (8004324 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8004272:	215e      	movs	r1, #94	@ 0x5e
 8004274:	482c      	ldr	r0, [pc, #176]	@ (8004328 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8004276:	f7fd fe05 	bl	8001e84 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004286:	d003      	beq.n	8004290 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004288:	215f      	movs	r1, #95	@ 0x5f
 800428a:	4827      	ldr	r0, [pc, #156]	@ (8004328 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800428c:	f7fd fdfa 	bl	8001e84 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b20      	cmp	r3, #32
 800429a:	d138      	bne.n	800430e <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e032      	b.n	8004310 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2224      	movs	r2, #36	@ 0x24
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e000      	b.n	8004310 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800430e:	2302      	movs	r3, #2
  }
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40005400 	.word	0x40005400
 800431c:	40005800 	.word	0x40005800
 8004320:	40005c00 	.word	0x40005c00
 8004324:	40006000 	.word	0x40006000
 8004328:	08007cd4 	.word	0x08007cd4

0800432c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a31      	ldr	r2, [pc, #196]	@ (8004400 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d012      	beq.n	8004366 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a2f      	ldr	r2, [pc, #188]	@ (8004404 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00d      	beq.n	8004366 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2e      	ldr	r2, [pc, #184]	@ (8004408 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d008      	beq.n	8004366 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a2c      	ldr	r2, [pc, #176]	@ (800440c <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d003      	beq.n	8004366 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800435e:	218c      	movs	r1, #140	@ 0x8c
 8004360:	482b      	ldr	r0, [pc, #172]	@ (8004410 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8004362:	f7fd fd8f 	bl	8001e84 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b0f      	cmp	r3, #15
 800436a:	d903      	bls.n	8004374 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 800436c:	218d      	movs	r1, #141	@ 0x8d
 800436e:	4828      	ldr	r0, [pc, #160]	@ (8004410 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8004370:	f7fd fd88 	bl	8001e84 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b20      	cmp	r3, #32
 800437e:	d139      	bne.n	80043f4 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 800438a:	2302      	movs	r3, #2
 800438c:	e033      	b.n	80043f6 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2224      	movs	r2, #36	@ 0x24
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40005400 	.word	0x40005400
 8004404:	40005800 	.word	0x40005800
 8004408:	40005c00 	.word	0x40005c00
 800440c:	40006000 	.word	0x40006000
 8004410:	08007cd4 	.word	0x08007cd4

08004414 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b00      	cmp	r3, #0
 8004424:	d126      	bne.n	8004474 <HAL_I2CEx_EnableFastModePlus+0x60>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d121      	bne.n	8004474 <HAL_I2CEx_EnableFastModePlus+0x60>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d11c      	bne.n	8004474 <HAL_I2CEx_EnableFastModePlus+0x60>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d117      	bne.n	8004474 <HAL_I2CEx_EnableFastModePlus+0x60>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d112      	bne.n	8004474 <HAL_I2CEx_EnableFastModePlus+0x60>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10d      	bne.n	8004474 <HAL_I2CEx_EnableFastModePlus+0x60>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d108      	bne.n	8004474 <HAL_I2CEx_EnableFastModePlus+0x60>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d103      	bne.n	8004474 <HAL_I2CEx_EnableFastModePlus+0x60>
 800446c:	21da      	movs	r1, #218	@ 0xda
 800446e:	480c      	ldr	r0, [pc, #48]	@ (80044a0 <HAL_I2CEx_EnableFastModePlus+0x8c>)
 8004470:	f7fd fd08 	bl	8001e84 <assert_failed>

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <HAL_I2CEx_EnableFastModePlus+0x90>)
 8004476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004478:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <HAL_I2CEx_EnableFastModePlus+0x90>)
 800447a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800447e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004480:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <HAL_I2CEx_EnableFastModePlus+0x90>)
 8004482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800448c:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <HAL_I2CEx_EnableFastModePlus+0x94>)
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	4905      	ldr	r1, [pc, #20]	@ (80044a8 <HAL_I2CEx_EnableFastModePlus+0x94>)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	08007cd4 	.word	0x08007cd4
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40013800 	.word	0x40013800

080044ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e178      	b.n	80047b0 <HAL_I2S_Init+0x304>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a97      	ldr	r2, [pc, #604]	@ (8004720 <HAL_I2S_Init+0x274>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_I2S_Init+0x3a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a95      	ldr	r2, [pc, #596]	@ (8004724 <HAL_I2S_Init+0x278>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_I2S_Init+0x3a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a94      	ldr	r2, [pc, #592]	@ (8004728 <HAL_I2S_Init+0x27c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_I2S_Init+0x3a>
 80044dc:	f240 1115 	movw	r1, #277	@ 0x115
 80044e0:	4892      	ldr	r0, [pc, #584]	@ (800472c <HAL_I2S_Init+0x280>)
 80044e2:	f7fd fccf 	bl	8001e84 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d013      	beq.n	8004516 <HAL_I2S_Init+0x6a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f6:	d00e      	beq.n	8004516 <HAL_I2S_Init+0x6a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004500:	d009      	beq.n	8004516 <HAL_I2S_Init+0x6a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800450a:	d004      	beq.n	8004516 <HAL_I2S_Init+0x6a>
 800450c:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8004510:	4886      	ldr	r0, [pc, #536]	@ (800472c <HAL_I2S_Init+0x280>)
 8004512:	f7fd fcb7 	bl	8001e84 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d014      	beq.n	8004548 <HAL_I2S_Init+0x9c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b10      	cmp	r3, #16
 8004524:	d010      	beq.n	8004548 <HAL_I2S_Init+0x9c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b20      	cmp	r3, #32
 800452c:	d00c      	beq.n	8004548 <HAL_I2S_Init+0x9c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b30      	cmp	r3, #48	@ 0x30
 8004534:	d008      	beq.n	8004548 <HAL_I2S_Init+0x9c>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2bb0      	cmp	r3, #176	@ 0xb0
 800453c:	d004      	beq.n	8004548 <HAL_I2S_Init+0x9c>
 800453e:	f240 1117 	movw	r1, #279	@ 0x117
 8004542:	487a      	ldr	r0, [pc, #488]	@ (800472c <HAL_I2S_Init+0x280>)
 8004544:	f7fd fc9e 	bl	8001e84 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d010      	beq.n	8004572 <HAL_I2S_Init+0xc6>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d00c      	beq.n	8004572 <HAL_I2S_Init+0xc6>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b03      	cmp	r3, #3
 800455e:	d008      	beq.n	8004572 <HAL_I2S_Init+0xc6>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b05      	cmp	r3, #5
 8004566:	d004      	beq.n	8004572 <HAL_I2S_Init+0xc6>
 8004568:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800456c:	486f      	ldr	r0, [pc, #444]	@ (800472c <HAL_I2S_Init+0x280>)
 800456e:	f7fd fc89 	bl	8001e84 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800457a:	d008      	beq.n	800458e <HAL_I2S_Init+0xe2>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <HAL_I2S_Init+0xe2>
 8004584:	f240 1119 	movw	r1, #281	@ 0x119
 8004588:	4868      	ldr	r0, [pc, #416]	@ (800472c <HAL_I2S_Init+0x280>)
 800458a:	f7fd fc7b 	bl	8001e84 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8004596:	d304      	bcc.n	80045a2 <HAL_I2S_Init+0xf6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	4a64      	ldr	r2, [pc, #400]	@ (8004730 <HAL_I2S_Init+0x284>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d908      	bls.n	80045b4 <HAL_I2S_Init+0x108>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d004      	beq.n	80045b4 <HAL_I2S_Init+0x108>
 80045aa:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 80045ae:	485f      	ldr	r0, [pc, #380]	@ (800472c <HAL_I2S_Init+0x280>)
 80045b0:	f7fd fc68 	bl	8001e84 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_I2S_Init+0x122>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d004      	beq.n	80045ce <HAL_I2S_Init+0x122>
 80045c4:	f240 111b 	movw	r1, #283	@ 0x11b
 80045c8:	4858      	ldr	r0, [pc, #352]	@ (800472c <HAL_I2S_Init+0x280>)
 80045ca:	f7fd fc5b 	bl	8001e84 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d008      	beq.n	80045e8 <HAL_I2S_Init+0x13c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d004      	beq.n	80045e8 <HAL_I2S_Init+0x13c>
 80045de:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 80045e2:	4852      	ldr	r0, [pc, #328]	@ (800472c <HAL_I2S_Init+0x280>)
 80045e4:	f7fd fc4e 	bl	8001e84 <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d106      	bne.n	8004602 <HAL_I2S_Init+0x156>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fd fcd1 	bl	8001fa4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69d9      	ldr	r1, [r3, #28]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b47      	ldr	r3, [pc, #284]	@ (8004734 <HAL_I2S_Init+0x288>)
 8004616:	400b      	ands	r3, r1
 8004618:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2202      	movs	r2, #2
 8004620:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d067      	beq.n	80046fa <HAL_I2S_Init+0x24e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <HAL_I2S_Init+0x18c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004632:	2310      	movs	r3, #16
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e001      	b.n	800463c <HAL_I2S_Init+0x190>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004638:	2320      	movs	r3, #32
 800463a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b20      	cmp	r3, #32
 8004642:	d802      	bhi.n	800464a <HAL_I2S_Init+0x19e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d102      	bne.n	8004658 <HAL_I2S_Init+0x1ac>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8004652:	4b39      	ldr	r3, [pc, #228]	@ (8004738 <HAL_I2S_Init+0x28c>)
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	e003      	b.n	8004660 <HAL_I2S_Init+0x1b4>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fa15 	bl	8004a88 <I2S_GetClockFreq>
 800465e:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004668:	d125      	bne.n	80046b6 <HAL_I2S_Init+0x20a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d010      	beq.n	8004694 <HAL_I2S_Init+0x1e8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	fbb2 f2f3 	udiv	r2, r2, r3
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	3305      	adds	r3, #5
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	e01f      	b.n	80046d4 <HAL_I2S_Init+0x228>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	fbb2 f2f3 	udiv	r2, r2, r3
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	3305      	adds	r3, #5
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	e00e      	b.n	80046d4 <HAL_I2S_Init+0x228>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	461a      	mov	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	3305      	adds	r3, #5
 80046d2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4a19      	ldr	r2, [pc, #100]	@ (800473c <HAL_I2S_Init+0x290>)
 80046d8:	fba2 2303 	umull	r2, r3, r2, r3
 80046dc:	08db      	lsrs	r3, r3, #3
 80046de:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	e003      	b.n	8004702 <HAL_I2S_Init+0x256>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80046fa:	2302      	movs	r3, #2
 80046fc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d902      	bls.n	800470e <HAL_I2S_Init+0x262>
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2bff      	cmp	r3, #255	@ 0xff
 800470c:	d918      	bls.n	8004740 <HAL_I2S_Init+0x294>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004712:	f043 0210 	orr.w	r2, r3, #16
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e048      	b.n	80047b0 <HAL_I2S_Init+0x304>
 800471e:	bf00      	nop
 8004720:	40013000 	.word	0x40013000
 8004724:	40003800 	.word	0x40003800
 8004728:	40003c00 	.word	0x40003c00
 800472c:	08007d10 	.word	0x08007d10
 8004730:	0002ee00 	.word	0x0002ee00
 8004734:	fffff040 	.word	0xfffff040
 8004738:	00bb8000 	.word	0x00bb8000
 800473c:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	ea42 0103 	orr.w	r1, r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	430a      	orrs	r2, r1
 8004752:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	4b17      	ldr	r3, [pc, #92]	@ (80047b8 <HAL_I2S_Init+0x30c>)
 800475c:	4013      	ands	r3, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6851      	ldr	r1, [r2, #4]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6892      	ldr	r2, [r2, #8]
 8004766:	4311      	orrs	r1, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	68d2      	ldr	r2, [r2, #12]
 800476c:	4311      	orrs	r1, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6992      	ldr	r2, [r2, #24]
 8004772:	430a      	orrs	r2, r1
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800477e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b30      	cmp	r3, #48	@ 0x30
 8004786:	d003      	beq.n	8004790 <HAL_I2S_Init+0x2e4>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2bb0      	cmp	r3, #176	@ 0xb0
 800478e:	d107      	bne.n	80047a0 <HAL_I2S_Init+0x2f4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69da      	ldr	r2, [r3, #28]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800479e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3720      	adds	r7, #32
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	fffff040 	.word	0xfffff040

080047bc <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <HAL_I2S_Transmit_DMA+0x1a>
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e08a      	b.n	80048f0 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d001      	beq.n	80047ea <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80047e6:	2302      	movs	r3, #2
 80047e8:	e082      	b.n	80048f0 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_I2S_Transmit_DMA+0x3e>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e07a      	b.n	80048f0 <HAL_I2S_Transmit_DMA+0x134>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2203      	movs	r2, #3
 8004806:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->pTxBuffPtr = pData;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b03      	cmp	r3, #3
 8004826:	d002      	beq.n	800482e <HAL_I2S_Transmit_DMA+0x72>
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b05      	cmp	r3, #5
 800482c:	d10a      	bne.n	8004844 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	849a      	strh	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount = (Size << 1U);
 8004838:	88fb      	ldrh	r3, [r7, #6]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	84da      	strh	r2, [r3, #38]	@ 0x26
 8004842:	e005      	b.n	8004850 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	88fa      	ldrh	r2, [r7, #6]
 8004848:	849a      	strh	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	84da      	strh	r2, [r3, #38]	@ 0x26
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004854:	4a28      	ldr	r2, [pc, #160]	@ (80048f8 <HAL_I2S_Transmit_DMA+0x13c>)
 8004856:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	4a27      	ldr	r2, [pc, #156]	@ (80048fc <HAL_I2S_Transmit_DMA+0x140>)
 800485e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	4a26      	ldr	r2, [pc, #152]	@ (8004900 <HAL_I2S_Transmit_DMA+0x144>)
 8004866:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
                                 (uint32_t)hi2s->pTxBuffPtr,
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004870:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004878:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800487e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004880:	f7fe f9cc 	bl	8002c1c <HAL_DMA_Start_IT>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00f      	beq.n	80048aa <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488e:	f043 0208 	orr.w	r2, r3, #8
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	63da      	str	r2, [r3, #60]	@ 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    __HAL_UNLOCK(hi2s);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e022      	b.n	80048f0 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d107      	bne.n	80048d0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0202 	orr.w	r2, r2, #2
 80048ce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d107      	bne.n	80048ee <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048ec:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	08004b63 	.word	0x08004b63
 80048fc:	08004b21 	.word	0x08004b21
 8004900:	08004bdd 	.word	0x08004bdd

08004904 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	4613      	mov	r3, r2
 8004910:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_I2S_Receive_DMA+0x1a>
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e09d      	b.n	8004a5e <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d001      	beq.n	8004932 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
 8004930:	e095      	b.n	8004a5e <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_I2S_Receive_DMA+0x3e>
 800493e:	2302      	movs	r3, #2
 8004940:	e08d      	b.n	8004a5e <HAL_I2S_Receive_DMA+0x15a>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2204      	movs	r2, #4
 800494e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->pRxBuffPtr = pData;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	629a      	str	r2, [r3, #40]	@ 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d002      	beq.n	8004976 <HAL_I2S_Receive_DMA+0x72>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b05      	cmp	r3, #5
 8004974:	d10a      	bne.n	800498c <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800498a:	e005      	b.n	8004998 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	88fa      	ldrh	r2, [r7, #6]
 8004990:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800499c:	4a32      	ldr	r2, [pc, #200]	@ (8004a68 <HAL_I2S_Receive_DMA+0x164>)
 800499e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a4:	4a31      	ldr	r2, [pc, #196]	@ (8004a6c <HAL_I2S_Receive_DMA+0x168>)
 80049a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ac:	4a30      	ldr	r2, [pc, #192]	@ (8004a70 <HAL_I2S_Receive_DMA+0x16c>)
 80049ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049be:	d10a      	bne.n	80049d6 <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	4619      	mov	r1, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e6:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049ec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80049ee:	f7fe f915 	bl	8002c1c <HAL_DMA_Start_IT>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00f      	beq.n	8004a18 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fc:	f043 0208 	orr.w	r2, r3, #8
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	63da      	str	r2, [r3, #60]	@ 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    __HAL_UNLOCK(hi2s);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e022      	b.n	8004a5e <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d107      	bne.n	8004a3e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0201 	orr.w	r2, r2, #1
 8004a3c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69da      	ldr	r2, [r3, #28]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a5a:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	08004bc1 	.word	0x08004bc1
 8004a6c:	08004b7f 	.word	0x08004b7f
 8004a70:	08004bdd 	.word	0x08004bdd

08004a74 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d02d      	beq.n	8004af4 <I2S_GetClockFreq+0x6c>
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d12e      	bne.n	8004afa <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b10 <I2S_GetClockFreq+0x88>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d108      	bne.n	8004aba <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004aa8:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <I2S_GetClockFreq+0x88>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ab0:	4a18      	ldr	r2, [pc, #96]	@ (8004b14 <I2S_GetClockFreq+0x8c>)
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e007      	b.n	8004aca <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004aba:	4b15      	ldr	r3, [pc, #84]	@ (8004b10 <I2S_GetClockFreq+0x88>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ac2:	4a15      	ldr	r2, [pc, #84]	@ (8004b18 <I2S_GetClockFreq+0x90>)
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8004aca:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <I2S_GetClockFreq+0x88>)
 8004acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ad0:	0f1b      	lsrs	r3, r3, #28
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <I2S_GetClockFreq+0x88>)
 8004ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ade:	099b      	lsrs	r3, r3, #6
 8004ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	fb03 f202 	mul.w	r2, r3, r2
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	613b      	str	r3, [r7, #16]

      break;
 8004af2:	e005      	b.n	8004b00 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8004af4:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <I2S_GetClockFreq+0x94>)
 8004af6:	613b      	str	r3, [r7, #16]
      break;
 8004af8:	e002      	b.n	8004b00 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
      break;
 8004afe:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8004b00:	693b      	ldr	r3, [r7, #16]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800
 8004b14:	00f42400 	.word	0x00f42400
 8004b18:	017d7840 	.word	0x017d7840
 8004b1c:	00bb8000 	.word	0x00bb8000

08004b20 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10e      	bne.n	8004b54 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0202 	bic.w	r2, r2, #2
 8004b44:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    hi2s->State = HAL_I2S_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7fd f94f 	bl	8001df8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7fd f961 	bl	8001e38 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10e      	bne.n	8004bb2 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7fd f930 	bl	8001e18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7fd f942 	bl	8001e58 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0203 	bic.w	r2, r2, #3
 8004bf8:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	84da      	strh	r2, [r3, #38]	@ 0x26
  hi2s->RxXferCount = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	85da      	strh	r2, [r3, #46]	@ 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c12:	f043 0208 	orr.w	r2, r3, #8
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7ff ff2a 	bl	8004a74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c32:	4b23      	ldr	r3, [pc, #140]	@ (8004cc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	4a22      	ldr	r2, [pc, #136]	@ (8004cc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c3e:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c56:	f7fd fc57 	bl	8002508 <HAL_GetTick>
 8004c5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c5c:	e009      	b.n	8004c72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c5e:	f7fd fc53 	bl	8002508 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c6c:	d901      	bls.n	8004c72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e022      	b.n	8004cb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c72:	4b14      	ldr	r3, [pc, #80]	@ (8004cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7e:	d1ee      	bne.n	8004c5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c80:	4b10      	ldr	r3, [pc, #64]	@ (8004cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a0f      	ldr	r2, [pc, #60]	@ (8004cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c8c:	f7fd fc3c 	bl	8002508 <HAL_GetTick>
 8004c90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c92:	e009      	b.n	8004ca8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c94:	f7fd fc38 	bl	8002508 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ca2:	d901      	bls.n	8004ca8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e007      	b.n	8004cb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ca8:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cb4:	d1ee      	bne.n	8004c94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	40007000 	.word	0x40007000

08004cc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e345      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b0f      	cmp	r3, #15
 8004ce4:	d904      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x28>
 8004ce6:	f240 1163 	movw	r1, #355	@ 0x163
 8004cea:	4892      	ldr	r0, [pc, #584]	@ (8004f34 <HAL_RCC_OscConfig+0x26c>)
 8004cec:	f7fd f8ca 	bl	8001e84 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 809a 	beq.w	8004e32 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00e      	beq.n	8004d24 <HAL_RCC_OscConfig+0x5c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d0e:	d009      	beq.n	8004d24 <HAL_RCC_OscConfig+0x5c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d18:	d004      	beq.n	8004d24 <HAL_RCC_OscConfig+0x5c>
 8004d1a:	f240 1169 	movw	r1, #361	@ 0x169
 8004d1e:	4885      	ldr	r0, [pc, #532]	@ (8004f34 <HAL_RCC_OscConfig+0x26c>)
 8004d20:	f7fd f8b0 	bl	8001e84 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d24:	4b84      	ldr	r3, [pc, #528]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 030c 	and.w	r3, r3, #12
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d00c      	beq.n	8004d4a <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d30:	4b81      	ldr	r3, [pc, #516]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 030c 	and.w	r3, r3, #12
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d112      	bne.n	8004d62 <HAL_RCC_OscConfig+0x9a>
 8004d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d48:	d10b      	bne.n	8004d62 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d06c      	beq.n	8004e30 <HAL_RCC_OscConfig+0x168>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d168      	bne.n	8004e30 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e303      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d6a:	d106      	bne.n	8004d7a <HAL_RCC_OscConfig+0xb2>
 8004d6c:	4b72      	ldr	r3, [pc, #456]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a71      	ldr	r2, [pc, #452]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	e02e      	b.n	8004dd8 <HAL_RCC_OscConfig+0x110>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10c      	bne.n	8004d9c <HAL_RCC_OscConfig+0xd4>
 8004d82:	4b6d      	ldr	r3, [pc, #436]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a6c      	ldr	r2, [pc, #432]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a69      	ldr	r2, [pc, #420]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004d94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	e01d      	b.n	8004dd8 <HAL_RCC_OscConfig+0x110>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004da4:	d10c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0xf8>
 8004da6:	4b64      	ldr	r3, [pc, #400]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a63      	ldr	r2, [pc, #396]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004dac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	4b61      	ldr	r3, [pc, #388]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a60      	ldr	r2, [pc, #384]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e00b      	b.n	8004dd8 <HAL_RCC_OscConfig+0x110>
 8004dc0:	4b5d      	ldr	r3, [pc, #372]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a5c      	ldr	r2, [pc, #368]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	4b5a      	ldr	r3, [pc, #360]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a59      	ldr	r2, [pc, #356]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004dd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d013      	beq.n	8004e08 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fd fb92 	bl	8002508 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004de8:	f7fd fb8e 	bl	8002508 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b64      	cmp	r3, #100	@ 0x64
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e2b7      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x120>
 8004e06:	e014      	b.n	8004e32 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fd fb7e 	bl	8002508 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e10:	f7fd fb7a 	bl	8002508 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b64      	cmp	r3, #100	@ 0x64
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e2a3      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e22:	4b45      	ldr	r3, [pc, #276]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x148>
 8004e2e:	e000      	b.n	8004e32 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8084 	beq.w	8004f48 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_RCC_OscConfig+0x192>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d004      	beq.n	8004e5a <HAL_RCC_OscConfig+0x192>
 8004e50:	f240 119b 	movw	r1, #411	@ 0x19b
 8004e54:	4837      	ldr	r0, [pc, #220]	@ (8004f34 <HAL_RCC_OscConfig+0x26c>)
 8004e56:	f7fd f815 	bl	8001e84 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b1f      	cmp	r3, #31
 8004e60:	d904      	bls.n	8004e6c <HAL_RCC_OscConfig+0x1a4>
 8004e62:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8004e66:	4833      	ldr	r0, [pc, #204]	@ (8004f34 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	f7fd f80c 	bl	8001e84 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e6c:	4b32      	ldr	r3, [pc, #200]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 030c 	and.w	r3, r3, #12
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00b      	beq.n	8004e90 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e78:	4b2f      	ldr	r3, [pc, #188]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d11c      	bne.n	8004ebe <HAL_RCC_OscConfig+0x1f6>
 8004e84:	4b2c      	ldr	r3, [pc, #176]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d116      	bne.n	8004ebe <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e90:	4b29      	ldr	r3, [pc, #164]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x1e0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e260      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea8:	4b23      	ldr	r3, [pc, #140]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4920      	ldr	r1, [pc, #128]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ebc:	e044      	b.n	8004f48 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d023      	beq.n	8004f0e <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1b      	ldr	r2, [pc, #108]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed2:	f7fd fb19 	bl	8002508 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eda:	f7fd fb15 	bl	8002508 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e23e      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eec:	4b12      	ldr	r3, [pc, #72]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	490c      	ldr	r1, [pc, #48]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]
 8004f0c:	e01c      	b.n	8004f48 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a09      	ldr	r2, [pc, #36]	@ (8004f38 <HAL_RCC_OscConfig+0x270>)
 8004f14:	f023 0301 	bic.w	r3, r3, #1
 8004f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1a:	f7fd faf5 	bl	8002508 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f20:	e00c      	b.n	8004f3c <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f22:	f7fd faf1 	bl	8002508 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d905      	bls.n	8004f3c <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e21a      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
 8004f34:	08007d48 	.word	0x08007d48
 8004f38:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3c:	4b7e      	ldr	r3, [pc, #504]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1ec      	bne.n	8004f22 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d043      	beq.n	8004fdc <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCC_OscConfig+0x2a6>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d004      	beq.n	8004f6e <HAL_RCC_OscConfig+0x2a6>
 8004f64:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8004f68:	4874      	ldr	r0, [pc, #464]	@ (800513c <HAL_RCC_OscConfig+0x474>)
 8004f6a:	f7fc ff8b 	bl	8001e84 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d019      	beq.n	8004faa <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f76:	4b70      	ldr	r3, [pc, #448]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 8004f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f7a:	4a6f      	ldr	r2, [pc, #444]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f82:	f7fd fac1 	bl	8002508 <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f8a:	f7fd fabd 	bl	8002508 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e1e6      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9c:	4b66      	ldr	r3, [pc, #408]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 8004f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x2c2>
 8004fa8:	e018      	b.n	8004fdc <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004faa:	4b63      	ldr	r3, [pc, #396]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 8004fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fae:	4a62      	ldr	r2, [pc, #392]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb6:	f7fd faa7 	bl	8002508 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fbe:	f7fd faa3 	bl	8002508 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e1cc      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd0:	4b59      	ldr	r3, [pc, #356]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 8004fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f0      	bne.n	8004fbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80bc 	beq.w	8005162 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <HAL_RCC_OscConfig+0x344>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d008      	beq.n	800500c <HAL_RCC_OscConfig+0x344>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d004      	beq.n	800500c <HAL_RCC_OscConfig+0x344>
 8005002:	f240 2106 	movw	r1, #518	@ 0x206
 8005006:	484d      	ldr	r0, [pc, #308]	@ (800513c <HAL_RCC_OscConfig+0x474>)
 8005008:	f7fc ff3c 	bl	8001e84 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800500c:	4b4a      	ldr	r3, [pc, #296]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 800500e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10d      	bne.n	8005034 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005018:	4b47      	ldr	r3, [pc, #284]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	4a46      	ldr	r2, [pc, #280]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 800501e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005022:	6413      	str	r3, [r2, #64]	@ 0x40
 8005024:	4b44      	ldr	r3, [pc, #272]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 8005026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005030:	2301      	movs	r3, #1
 8005032:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005034:	4b42      	ldr	r3, [pc, #264]	@ (8005140 <HAL_RCC_OscConfig+0x478>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d118      	bne.n	8005072 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005040:	4b3f      	ldr	r3, [pc, #252]	@ (8005140 <HAL_RCC_OscConfig+0x478>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a3e      	ldr	r2, [pc, #248]	@ (8005140 <HAL_RCC_OscConfig+0x478>)
 8005046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800504a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800504c:	f7fd fa5c 	bl	8002508 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005054:	f7fd fa58 	bl	8002508 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b64      	cmp	r3, #100	@ 0x64
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e181      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005066:	4b36      	ldr	r3, [pc, #216]	@ (8005140 <HAL_RCC_OscConfig+0x478>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d106      	bne.n	8005088 <HAL_RCC_OscConfig+0x3c0>
 800507a:	4b2f      	ldr	r3, [pc, #188]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507e:	4a2e      	ldr	r2, [pc, #184]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	6713      	str	r3, [r2, #112]	@ 0x70
 8005086:	e02d      	b.n	80050e4 <HAL_RCC_OscConfig+0x41c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10c      	bne.n	80050aa <HAL_RCC_OscConfig+0x3e2>
 8005090:	4b29      	ldr	r3, [pc, #164]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005094:	4a28      	ldr	r2, [pc, #160]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	6713      	str	r3, [r2, #112]	@ 0x70
 800509c:	4b26      	ldr	r3, [pc, #152]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a0:	4a25      	ldr	r2, [pc, #148]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 80050a2:	f023 0304 	bic.w	r3, r3, #4
 80050a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a8:	e01c      	b.n	80050e4 <HAL_RCC_OscConfig+0x41c>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d10c      	bne.n	80050cc <HAL_RCC_OscConfig+0x404>
 80050b2:	4b21      	ldr	r3, [pc, #132]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	4a20      	ldr	r2, [pc, #128]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 80050b8:	f043 0304 	orr.w	r3, r3, #4
 80050bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80050be:	4b1e      	ldr	r3, [pc, #120]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ca:	e00b      	b.n	80050e4 <HAL_RCC_OscConfig+0x41c>
 80050cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d0:	4a19      	ldr	r2, [pc, #100]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d8:	4b17      	ldr	r3, [pc, #92]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050dc:	4a16      	ldr	r2, [pc, #88]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 80050de:	f023 0304 	bic.w	r3, r3, #4
 80050e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d015      	beq.n	8005118 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ec:	f7fd fa0c 	bl	8002508 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f2:	e00a      	b.n	800510a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f4:	f7fd fa08 	bl	8002508 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e12f      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510a:	4b0b      	ldr	r3, [pc, #44]	@ (8005138 <HAL_RCC_OscConfig+0x470>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0ee      	beq.n	80050f4 <HAL_RCC_OscConfig+0x42c>
 8005116:	e01b      	b.n	8005150 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005118:	f7fd f9f6 	bl	8002508 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800511e:	e011      	b.n	8005144 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005120:	f7fd f9f2 	bl	8002508 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	d908      	bls.n	8005144 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e119      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
 8005136:	bf00      	nop
 8005138:	40023800 	.word	0x40023800
 800513c:	08007d48 	.word	0x08007d48
 8005140:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005144:	4b8b      	ldr	r3, [pc, #556]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e7      	bne.n	8005120 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d105      	bne.n	8005162 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005156:	4b87      	ldr	r3, [pc, #540]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	4a86      	ldr	r2, [pc, #536]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 800515c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005160:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_RCC_OscConfig+0x4bc>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d008      	beq.n	8005184 <HAL_RCC_OscConfig+0x4bc>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	2b02      	cmp	r3, #2
 8005178:	d004      	beq.n	8005184 <HAL_RCC_OscConfig+0x4bc>
 800517a:	f240 214a 	movw	r1, #586	@ 0x24a
 800517e:	487e      	ldr	r0, [pc, #504]	@ (8005378 <HAL_RCC_OscConfig+0x6b0>)
 8005180:	f7fc fe80 	bl	8001e84 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80ed 	beq.w	8005368 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800518e:	4b79      	ldr	r3, [pc, #484]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b08      	cmp	r3, #8
 8005198:	f000 80b4 	beq.w	8005304 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	f040 8095 	bne.w	80052d0 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <HAL_RCC_OscConfig+0x4fa>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051b6:	d004      	beq.n	80051c2 <HAL_RCC_OscConfig+0x4fa>
 80051b8:	f240 2153 	movw	r1, #595	@ 0x253
 80051bc:	486e      	ldr	r0, [pc, #440]	@ (8005378 <HAL_RCC_OscConfig+0x6b0>)
 80051be:	f7fc fe61 	bl	8001e84 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d903      	bls.n	80051d2 <HAL_RCC_OscConfig+0x50a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80051d0:	d904      	bls.n	80051dc <HAL_RCC_OscConfig+0x514>
 80051d2:	f44f 7115 	mov.w	r1, #596	@ 0x254
 80051d6:	4868      	ldr	r0, [pc, #416]	@ (8005378 <HAL_RCC_OscConfig+0x6b0>)
 80051d8:	f7fc fe54 	bl	8001e84 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	2b31      	cmp	r3, #49	@ 0x31
 80051e2:	d904      	bls.n	80051ee <HAL_RCC_OscConfig+0x526>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 80051ec:	d904      	bls.n	80051f8 <HAL_RCC_OscConfig+0x530>
 80051ee:	f240 2155 	movw	r1, #597	@ 0x255
 80051f2:	4861      	ldr	r0, [pc, #388]	@ (8005378 <HAL_RCC_OscConfig+0x6b0>)
 80051f4:	f7fc fe46 	bl	8001e84 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d010      	beq.n	8005222 <HAL_RCC_OscConfig+0x55a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005204:	2b04      	cmp	r3, #4
 8005206:	d00c      	beq.n	8005222 <HAL_RCC_OscConfig+0x55a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520c:	2b06      	cmp	r3, #6
 800520e:	d008      	beq.n	8005222 <HAL_RCC_OscConfig+0x55a>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	2b08      	cmp	r3, #8
 8005216:	d004      	beq.n	8005222 <HAL_RCC_OscConfig+0x55a>
 8005218:	f240 2156 	movw	r1, #598	@ 0x256
 800521c:	4856      	ldr	r0, [pc, #344]	@ (8005378 <HAL_RCC_OscConfig+0x6b0>)
 800521e:	f7fc fe31 	bl	8001e84 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005226:	2b01      	cmp	r3, #1
 8005228:	d903      	bls.n	8005232 <HAL_RCC_OscConfig+0x56a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522e:	2b0f      	cmp	r3, #15
 8005230:	d904      	bls.n	800523c <HAL_RCC_OscConfig+0x574>
 8005232:	f240 2157 	movw	r1, #599	@ 0x257
 8005236:	4850      	ldr	r0, [pc, #320]	@ (8005378 <HAL_RCC_OscConfig+0x6b0>)
 8005238:	f7fc fe24 	bl	8001e84 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523c:	4b4d      	ldr	r3, [pc, #308]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a4c      	ldr	r2, [pc, #304]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 8005242:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fd f95e 	bl	8002508 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005250:	f7fd f95a 	bl	8002508 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e083      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	4b44      	ldr	r3, [pc, #272]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	3b01      	subs	r3, #1
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	4313      	orrs	r3, r2
 8005294:	4a37      	ldr	r2, [pc, #220]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 8005296:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800529a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800529c:	4b35      	ldr	r3, [pc, #212]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a34      	ldr	r2, [pc, #208]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 80052a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7fd f92e 	bl	8002508 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b0:	f7fd f92a 	bl	8002508 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e053      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCC_OscConfig+0x5e8>
 80052ce:	e04b      	b.n	8005368 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d0:	4b28      	ldr	r3, [pc, #160]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a27      	ldr	r2, [pc, #156]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 80052d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7fd f914 	bl	8002508 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e4:	f7fd f910 	bl	8002508 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e039      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCC_OscConfig+0x61c>
 8005302:	e031      	b.n	8005368 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005304:	4b1b      	ldr	r3, [pc, #108]	@ (8005374 <HAL_RCC_OscConfig+0x6ac>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d028      	beq.n	8005364 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800531c:	429a      	cmp	r2, r3
 800531e:	d121      	bne.n	8005364 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532a:	429a      	cmp	r2, r3
 800532c:	d11a      	bne.n	8005364 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005334:	4013      	ands	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800533a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800533c:	4293      	cmp	r3, r2
 800533e:	d111      	bne.n	8005364 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	3b01      	subs	r3, #1
 800534e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005350:	429a      	cmp	r2, r3
 8005352:	d107      	bne.n	8005364 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005360:	429a      	cmp	r2, r3
 8005362:	d001      	beq.n	8005368 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800
 8005378:	08007d48 	.word	0x08007d48

0800537c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e18c      	b.n	80056ae <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x28>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d904      	bls.n	80053ae <HAL_RCC_ClockConfig+0x32>
 80053a4:	f240 21dd 	movw	r1, #733	@ 0x2dd
 80053a8:	4887      	ldr	r0, [pc, #540]	@ (80055c8 <HAL_RCC_ClockConfig+0x24c>)
 80053aa:	f7fc fd6b 	bl	8001e84 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d031      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d02e      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d02b      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d028      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d025      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d022      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b06      	cmp	r3, #6
 80053d6:	d01f      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b07      	cmp	r3, #7
 80053dc:	d01c      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d019      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b09      	cmp	r3, #9
 80053e8:	d016      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b0a      	cmp	r3, #10
 80053ee:	d013      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b0b      	cmp	r3, #11
 80053f4:	d010      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	d00d      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b0d      	cmp	r3, #13
 8005400:	d00a      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b0e      	cmp	r3, #14
 8005406:	d007      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b0f      	cmp	r3, #15
 800540c:	d004      	beq.n	8005418 <HAL_RCC_ClockConfig+0x9c>
 800540e:	f240 21de 	movw	r1, #734	@ 0x2de
 8005412:	486d      	ldr	r0, [pc, #436]	@ (80055c8 <HAL_RCC_ClockConfig+0x24c>)
 8005414:	f7fc fd36 	bl	8001e84 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005418:	4b6c      	ldr	r3, [pc, #432]	@ (80055cc <HAL_RCC_ClockConfig+0x250>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d910      	bls.n	8005448 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005426:	4b69      	ldr	r3, [pc, #420]	@ (80055cc <HAL_RCC_ClockConfig+0x250>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f023 020f 	bic.w	r2, r3, #15
 800542e:	4967      	ldr	r1, [pc, #412]	@ (80055cc <HAL_RCC_ClockConfig+0x250>)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	4313      	orrs	r3, r2
 8005434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b65      	ldr	r3, [pc, #404]	@ (80055cc <HAL_RCC_ClockConfig+0x250>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e132      	b.n	80056ae <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d049      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005460:	4b5b      	ldr	r3, [pc, #364]	@ (80055d0 <HAL_RCC_ClockConfig+0x254>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	4a5a      	ldr	r2, [pc, #360]	@ (80055d0 <HAL_RCC_ClockConfig+0x254>)
 8005466:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800546a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005478:	4b55      	ldr	r3, [pc, #340]	@ (80055d0 <HAL_RCC_ClockConfig+0x254>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	4a54      	ldr	r2, [pc, #336]	@ (80055d0 <HAL_RCC_ClockConfig+0x254>)
 800547e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005482:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d024      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x15a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2b80      	cmp	r3, #128	@ 0x80
 8005492:	d020      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x15a>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2b90      	cmp	r3, #144	@ 0x90
 800549a:	d01c      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x15a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80054a2:	d018      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x15a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2bb0      	cmp	r3, #176	@ 0xb0
 80054aa:	d014      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x15a>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80054b2:	d010      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x15a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2bd0      	cmp	r3, #208	@ 0xd0
 80054ba:	d00c      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x15a>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2be0      	cmp	r3, #224	@ 0xe0
 80054c2:	d008      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x15a>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2bf0      	cmp	r3, #240	@ 0xf0
 80054ca:	d004      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x15a>
 80054cc:	f240 3102 	movw	r1, #770	@ 0x302
 80054d0:	483d      	ldr	r0, [pc, #244]	@ (80055c8 <HAL_RCC_ClockConfig+0x24c>)
 80054d2:	f7fc fcd7 	bl	8001e84 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d6:	4b3e      	ldr	r3, [pc, #248]	@ (80055d0 <HAL_RCC_ClockConfig+0x254>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	493b      	ldr	r1, [pc, #236]	@ (80055d0 <HAL_RCC_ClockConfig+0x254>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d051      	beq.n	8005598 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00c      	beq.n	8005516 <HAL_RCC_ClockConfig+0x19a>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d008      	beq.n	8005516 <HAL_RCC_ClockConfig+0x19a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b02      	cmp	r3, #2
 800550a:	d004      	beq.n	8005516 <HAL_RCC_ClockConfig+0x19a>
 800550c:	f240 3109 	movw	r1, #777	@ 0x309
 8005510:	482d      	ldr	r0, [pc, #180]	@ (80055c8 <HAL_RCC_ClockConfig+0x24c>)
 8005512:	f7fc fcb7 	bl	8001e84 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d107      	bne.n	800552e <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551e:	4b2c      	ldr	r3, [pc, #176]	@ (80055d0 <HAL_RCC_ClockConfig+0x254>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d115      	bne.n	8005556 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e0bf      	b.n	80056ae <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d107      	bne.n	8005546 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005536:	4b26      	ldr	r3, [pc, #152]	@ (80055d0 <HAL_RCC_ClockConfig+0x254>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d109      	bne.n	8005556 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e0b3      	b.n	80056ae <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005546:	4b22      	ldr	r3, [pc, #136]	@ (80055d0 <HAL_RCC_ClockConfig+0x254>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e0ab      	b.n	80056ae <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005556:	4b1e      	ldr	r3, [pc, #120]	@ (80055d0 <HAL_RCC_ClockConfig+0x254>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f023 0203 	bic.w	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	491b      	ldr	r1, [pc, #108]	@ (80055d0 <HAL_RCC_ClockConfig+0x254>)
 8005564:	4313      	orrs	r3, r2
 8005566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005568:	f7fc ffce 	bl	8002508 <HAL_GetTick>
 800556c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	e00a      	b.n	8005586 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005570:	f7fc ffca 	bl	8002508 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e093      	b.n	80056ae <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005586:	4b12      	ldr	r3, [pc, #72]	@ (80055d0 <HAL_RCC_ClockConfig+0x254>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 020c 	and.w	r2, r3, #12
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	429a      	cmp	r2, r3
 8005596:	d1eb      	bne.n	8005570 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005598:	4b0c      	ldr	r3, [pc, #48]	@ (80055cc <HAL_RCC_ClockConfig+0x250>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d216      	bcs.n	80055d4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a6:	4b09      	ldr	r3, [pc, #36]	@ (80055cc <HAL_RCC_ClockConfig+0x250>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f023 020f 	bic.w	r2, r3, #15
 80055ae:	4907      	ldr	r1, [pc, #28]	@ (80055cc <HAL_RCC_ClockConfig+0x250>)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b6:	4b05      	ldr	r3, [pc, #20]	@ (80055cc <HAL_RCC_ClockConfig+0x250>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d007      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e072      	b.n	80056ae <HAL_RCC_ClockConfig+0x332>
 80055c8:	08007d48 	.word	0x08007d48
 80055cc:	40023c00 	.word	0x40023c00
 80055d0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d025      	beq.n	800562c <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d018      	beq.n	800561a <HAL_RCC_ClockConfig+0x29e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f0:	d013      	beq.n	800561a <HAL_RCC_ClockConfig+0x29e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80055fa:	d00e      	beq.n	800561a <HAL_RCC_ClockConfig+0x29e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005604:	d009      	beq.n	800561a <HAL_RCC_ClockConfig+0x29e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800560e:	d004      	beq.n	800561a <HAL_RCC_ClockConfig+0x29e>
 8005610:	f240 3146 	movw	r1, #838	@ 0x346
 8005614:	4828      	ldr	r0, [pc, #160]	@ (80056b8 <HAL_RCC_ClockConfig+0x33c>)
 8005616:	f7fc fc35 	bl	8001e84 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800561a:	4b28      	ldr	r3, [pc, #160]	@ (80056bc <HAL_RCC_ClockConfig+0x340>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	4925      	ldr	r1, [pc, #148]	@ (80056bc <HAL_RCC_ClockConfig+0x340>)
 8005628:	4313      	orrs	r3, r2
 800562a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d026      	beq.n	8005686 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d018      	beq.n	8005672 <HAL_RCC_ClockConfig+0x2f6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005648:	d013      	beq.n	8005672 <HAL_RCC_ClockConfig+0x2f6>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005652:	d00e      	beq.n	8005672 <HAL_RCC_ClockConfig+0x2f6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800565c:	d009      	beq.n	8005672 <HAL_RCC_ClockConfig+0x2f6>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005666:	d004      	beq.n	8005672 <HAL_RCC_ClockConfig+0x2f6>
 8005668:	f240 314d 	movw	r1, #845	@ 0x34d
 800566c:	4812      	ldr	r0, [pc, #72]	@ (80056b8 <HAL_RCC_ClockConfig+0x33c>)
 800566e:	f7fc fc09 	bl	8001e84 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005672:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <HAL_RCC_ClockConfig+0x340>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	490e      	ldr	r1, [pc, #56]	@ (80056bc <HAL_RCC_ClockConfig+0x340>)
 8005682:	4313      	orrs	r3, r2
 8005684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005686:	f000 f821 	bl	80056cc <HAL_RCC_GetSysClockFreq>
 800568a:	4602      	mov	r2, r0
 800568c:	4b0b      	ldr	r3, [pc, #44]	@ (80056bc <HAL_RCC_ClockConfig+0x340>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	490a      	ldr	r1, [pc, #40]	@ (80056c0 <HAL_RCC_ClockConfig+0x344>)
 8005698:	5ccb      	ldrb	r3, [r1, r3]
 800569a:	fa22 f303 	lsr.w	r3, r2, r3
 800569e:	4a09      	ldr	r2, [pc, #36]	@ (80056c4 <HAL_RCC_ClockConfig+0x348>)
 80056a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056a2:	4b09      	ldr	r3, [pc, #36]	@ (80056c8 <HAL_RCC_ClockConfig+0x34c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fc feea 	bl	8002480 <HAL_InitTick>

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	08007d48 	.word	0x08007d48
 80056bc:	40023800 	.word	0x40023800
 80056c0:	08007e30 	.word	0x08007e30
 80056c4:	20000048 	.word	0x20000048
 80056c8:	2000004c 	.word	0x2000004c

080056cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d0:	b090      	sub	sp, #64	@ 0x40
 80056d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d8:	2300      	movs	r3, #0
 80056da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056dc:	2300      	movs	r3, #0
 80056de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e4:	4b59      	ldr	r3, [pc, #356]	@ (800584c <HAL_RCC_GetSysClockFreq+0x180>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 030c 	and.w	r3, r3, #12
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d00d      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x40>
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	f200 80a1 	bhi.w	8005838 <HAL_RCC_GetSysClockFreq+0x16c>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_RCC_GetSysClockFreq+0x34>
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d003      	beq.n	8005706 <HAL_RCC_GetSysClockFreq+0x3a>
 80056fe:	e09b      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005700:	4b53      	ldr	r3, [pc, #332]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x184>)
 8005702:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005704:	e09b      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005706:	4b53      	ldr	r3, [pc, #332]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x188>)
 8005708:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800570a:	e098      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800570c:	4b4f      	ldr	r3, [pc, #316]	@ (800584c <HAL_RCC_GetSysClockFreq+0x180>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005714:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005716:	4b4d      	ldr	r3, [pc, #308]	@ (800584c <HAL_RCC_GetSysClockFreq+0x180>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d028      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005722:	4b4a      	ldr	r3, [pc, #296]	@ (800584c <HAL_RCC_GetSysClockFreq+0x180>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	099b      	lsrs	r3, r3, #6
 8005728:	2200      	movs	r2, #0
 800572a:	623b      	str	r3, [r7, #32]
 800572c:	627a      	str	r2, [r7, #36]	@ 0x24
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005734:	2100      	movs	r1, #0
 8005736:	4b47      	ldr	r3, [pc, #284]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x188>)
 8005738:	fb03 f201 	mul.w	r2, r3, r1
 800573c:	2300      	movs	r3, #0
 800573e:	fb00 f303 	mul.w	r3, r0, r3
 8005742:	4413      	add	r3, r2
 8005744:	4a43      	ldr	r2, [pc, #268]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x188>)
 8005746:	fba0 1202 	umull	r1, r2, r0, r2
 800574a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800574c:	460a      	mov	r2, r1
 800574e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005752:	4413      	add	r3, r2
 8005754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005758:	2200      	movs	r2, #0
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	61fa      	str	r2, [r7, #28]
 800575e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005762:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005766:	f7fb f901 	bl	800096c <__aeabi_uldivmod>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4613      	mov	r3, r2
 8005770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005772:	e053      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005774:	4b35      	ldr	r3, [pc, #212]	@ (800584c <HAL_RCC_GetSysClockFreq+0x180>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	099b      	lsrs	r3, r3, #6
 800577a:	2200      	movs	r2, #0
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	617a      	str	r2, [r7, #20]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005786:	f04f 0b00 	mov.w	fp, #0
 800578a:	4652      	mov	r2, sl
 800578c:	465b      	mov	r3, fp
 800578e:	f04f 0000 	mov.w	r0, #0
 8005792:	f04f 0100 	mov.w	r1, #0
 8005796:	0159      	lsls	r1, r3, #5
 8005798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800579c:	0150      	lsls	r0, r2, #5
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	ebb2 080a 	subs.w	r8, r2, sl
 80057a6:	eb63 090b 	sbc.w	r9, r3, fp
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057be:	ebb2 0408 	subs.w	r4, r2, r8
 80057c2:	eb63 0509 	sbc.w	r5, r3, r9
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	00eb      	lsls	r3, r5, #3
 80057d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057d4:	00e2      	lsls	r2, r4, #3
 80057d6:	4614      	mov	r4, r2
 80057d8:	461d      	mov	r5, r3
 80057da:	eb14 030a 	adds.w	r3, r4, sl
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	eb45 030b 	adc.w	r3, r5, fp
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057f2:	4629      	mov	r1, r5
 80057f4:	028b      	lsls	r3, r1, #10
 80057f6:	4621      	mov	r1, r4
 80057f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057fc:	4621      	mov	r1, r4
 80057fe:	028a      	lsls	r2, r1, #10
 8005800:	4610      	mov	r0, r2
 8005802:	4619      	mov	r1, r3
 8005804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005806:	2200      	movs	r2, #0
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	60fa      	str	r2, [r7, #12]
 800580c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005810:	f7fb f8ac 	bl	800096c <__aeabi_uldivmod>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4613      	mov	r3, r2
 800581a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800581c:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <HAL_RCC_GetSysClockFreq+0x180>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	0c1b      	lsrs	r3, r3, #16
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	3301      	adds	r3, #1
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800582c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	fbb2 f3f3 	udiv	r3, r2, r3
 8005834:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005836:	e002      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005838:	4b05      	ldr	r3, [pc, #20]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x184>)
 800583a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800583c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800583e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005840:	4618      	mov	r0, r3
 8005842:	3740      	adds	r7, #64	@ 0x40
 8005844:	46bd      	mov	sp, r7
 8005846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800584a:	bf00      	nop
 800584c:	40023800 	.word	0x40023800
 8005850:	00f42400 	.word	0x00f42400
 8005854:	017d7840 	.word	0x017d7840

08005858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	f040 8089 	bne.w	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 8082 	bne.w	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	d17b      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d175      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d16f      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d169      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d163      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d15d      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d157      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d151      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d14b      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d145      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d13f      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d139      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d133      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d12d      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d127      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d121      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d11b      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d115      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10f      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d109      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b00      	cmp	r3, #0
 800598a:	d103      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800598c:	2172      	movs	r1, #114	@ 0x72
 800598e:	4895      	ldr	r0, [pc, #596]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8005990:	f7fc fa78 	bl	8001e84 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01f      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x162>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059b0:	d003      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x162>
 80059b2:	2178      	movs	r1, #120	@ 0x78
 80059b4:	488b      	ldr	r0, [pc, #556]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80059b6:	f7fc fa65 	bl	8001e84 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059ba:	4b8b      	ldr	r3, [pc, #556]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	4a8a      	ldr	r2, [pc, #552]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80059c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80059c4:	6093      	str	r3, [r2, #8]
 80059c6:	4b88      	ldr	r3, [pc, #544]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ce:	4986      	ldr	r1, [pc, #536]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 80059dc:	2301      	movs	r3, #1
 80059de:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d029      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00d      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059fc:	d008      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a06:	d003      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005a08:	2188      	movs	r1, #136	@ 0x88
 8005a0a:	4876      	ldr	r0, [pc, #472]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8005a0c:	f7fc fa3a 	bl	8001e84 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a10:	4b75      	ldr	r3, [pc, #468]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1e:	4972      	ldr	r1, [pc, #456]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8005a30:	2301      	movs	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d029      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00d      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a5c:	d008      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a66:	d003      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005a68:	219c      	movs	r1, #156	@ 0x9c
 8005a6a:	485e      	ldr	r0, [pc, #376]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8005a6c:	f7fc fa0a 	bl	8001e84 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a70:	4b5d      	ldr	r3, [pc, #372]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7e:	495a      	ldr	r1, [pc, #360]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a8e:	d101      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8005a90:	2301      	movs	r3, #1
 8005a92:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8005aac:	2301      	movs	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8186 	beq.w	8005dca <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac6:	f000 80e4 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ad2:	f000 80de 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	4a44      	ldr	r2, [pc, #272]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	f000 80d8 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae6:	4a42      	ldr	r2, [pc, #264]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	f000 80d2 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af2:	4a40      	ldr	r2, [pc, #256]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	f000 80cc 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	4a3e      	ldr	r2, [pc, #248]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	f000 80c6 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0a:	4a3c      	ldr	r2, [pc, #240]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	f000 80c0 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b16:	4a3a      	ldr	r2, [pc, #232]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	f000 80ba 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b22:	4a38      	ldr	r2, [pc, #224]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	f000 80b4 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2e:	4a36      	ldr	r2, [pc, #216]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	f000 80ae 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3a:	4a34      	ldr	r2, [pc, #208]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	f000 80a8 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b46:	4a32      	ldr	r2, [pc, #200]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	f000 80a2 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b52:	4a30      	ldr	r2, [pc, #192]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	f000 809c 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5e:	4a2e      	ldr	r2, [pc, #184]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	f000 8096 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	f000 8090 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b76:	4a2a      	ldr	r2, [pc, #168]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	f000 808a 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b82:	4a28      	ldr	r2, [pc, #160]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	f000 8084 	beq.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8e:	4a26      	ldr	r2, [pc, #152]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d07e      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b98:	4a24      	ldr	r2, [pc, #144]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d079      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba2:	4a23      	ldr	r2, [pc, #140]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d074      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bac:	4a21      	ldr	r2, [pc, #132]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d06f      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb6:	4a20      	ldr	r2, [pc, #128]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d06a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d065      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bca:	4a1d      	ldr	r2, [pc, #116]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d060      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d05b      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bde:	4a1a      	ldr	r2, [pc, #104]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	e033      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005be4:	08007d80 	.word	0x08007d80
 8005be8:	40023800 	.word	0x40023800
 8005bec:	00020300 	.word	0x00020300
 8005bf0:	00030300 	.word	0x00030300
 8005bf4:	00040300 	.word	0x00040300
 8005bf8:	00050300 	.word	0x00050300
 8005bfc:	00060300 	.word	0x00060300
 8005c00:	00070300 	.word	0x00070300
 8005c04:	00080300 	.word	0x00080300
 8005c08:	00090300 	.word	0x00090300
 8005c0c:	000a0300 	.word	0x000a0300
 8005c10:	000b0300 	.word	0x000b0300
 8005c14:	000c0300 	.word	0x000c0300
 8005c18:	000d0300 	.word	0x000d0300
 8005c1c:	000e0300 	.word	0x000e0300
 8005c20:	000f0300 	.word	0x000f0300
 8005c24:	00100300 	.word	0x00100300
 8005c28:	00110300 	.word	0x00110300
 8005c2c:	00120300 	.word	0x00120300
 8005c30:	00130300 	.word	0x00130300
 8005c34:	00140300 	.word	0x00140300
 8005c38:	00150300 	.word	0x00150300
 8005c3c:	00160300 	.word	0x00160300
 8005c40:	00170300 	.word	0x00170300
 8005c44:	00180300 	.word	0x00180300
 8005c48:	00190300 	.word	0x00190300
 8005c4c:	d021      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c52:	4a4c      	ldr	r2, [pc, #304]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d01c      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c5c:	4a4a      	ldr	r2, [pc, #296]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d017      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c66:	4a49      	ldr	r2, [pc, #292]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d012      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c70:	4a47      	ldr	r2, [pc, #284]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00d      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7a:	4a46      	ldr	r2, [pc, #280]	@ (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d008      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c84:	4a44      	ldr	r2, [pc, #272]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005c8a:	21b7      	movs	r1, #183	@ 0xb7
 8005c8c:	4843      	ldr	r0, [pc, #268]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8005c8e:	f7fc f8f9 	bl	8001e84 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c92:	4b43      	ldr	r3, [pc, #268]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	4a42      	ldr	r2, [pc, #264]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c9e:	4b40      	ldr	r3, [pc, #256]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca6:	60bb      	str	r3, [r7, #8]
 8005ca8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005caa:	4b3e      	ldr	r3, [pc, #248]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a3d      	ldr	r2, [pc, #244]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8005cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb6:	f7fc fc27 	bl	8002508 <HAL_GetTick>
 8005cba:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005cbc:	e009      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cbe:	f7fc fc23 	bl	8002508 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b64      	cmp	r3, #100	@ 0x64
 8005cca:	d902      	bls.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	f000 bd9f 	b.w	8006810 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005cd2:	4b34      	ldr	r3, [pc, #208]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0ef      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cde:	4b30      	ldr	r3, [pc, #192]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ce6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d036      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d02f      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cfc:	4b28      	ldr	r3, [pc, #160]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d06:	4b26      	ldr	r3, [pc, #152]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0a:	4a25      	ldr	r2, [pc, #148]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d10:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d12:	4b23      	ldr	r3, [pc, #140]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	4a22      	ldr	r2, [pc, #136]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d1c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005d1e:	4a20      	ldr	r2, [pc, #128]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d24:	4b1e      	ldr	r3, [pc, #120]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d115      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d30:	f7fc fbea 	bl	8002508 <HAL_GetTick>
 8005d34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d36:	e00b      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d38:	f7fc fbe6 	bl	8002508 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d902      	bls.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	f000 bd60 	b.w	8006810 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d50:	4b13      	ldr	r3, [pc, #76]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0ed      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d68:	d120      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005d76:	4b0c      	ldr	r3, [pc, #48]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8005d78:	400b      	ands	r3, r1
 8005d7a:	4909      	ldr	r1, [pc, #36]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	608b      	str	r3, [r1, #8]
 8005d80:	e01a      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8005d82:	bf00      	nop
 8005d84:	001a0300 	.word	0x001a0300
 8005d88:	001b0300 	.word	0x001b0300
 8005d8c:	001c0300 	.word	0x001c0300
 8005d90:	001d0300 	.word	0x001d0300
 8005d94:	001e0300 	.word	0x001e0300
 8005d98:	001f0300 	.word	0x001f0300
 8005d9c:	08007d80 	.word	0x08007d80
 8005da0:	40023800 	.word	0x40023800
 8005da4:	40007000 	.word	0x40007000
 8005da8:	0ffffcff 	.word	0x0ffffcff
 8005dac:	4b9a      	ldr	r3, [pc, #616]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	4a99      	ldr	r2, [pc, #612]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005db2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005db6:	6093      	str	r3, [r2, #8]
 8005db8:	4b97      	ldr	r3, [pc, #604]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005dba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc4:	4994      	ldr	r1, [pc, #592]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01d      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d008      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005de6:	d003      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005de8:	21f1      	movs	r1, #241	@ 0xf1
 8005dea:	488c      	ldr	r0, [pc, #560]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005dec:	f7fc f84a 	bl	8001e84 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005df0:	4b89      	ldr	r3, [pc, #548]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005df6:	4a88      	ldr	r2, [pc, #544]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005df8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dfc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005e00:	4b85      	ldr	r3, [pc, #532]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005e02:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0a:	4983      	ldr	r1, [pc, #524]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01c      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00d      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e2e:	d008      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e38:	d003      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8005e3a:	21fb      	movs	r1, #251	@ 0xfb
 8005e3c:	4877      	ldr	r0, [pc, #476]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005e3e:	f7fc f821 	bl	8001e84 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e42:	4b75      	ldr	r3, [pc, #468]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e50:	4971      	ldr	r1, [pc, #452]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01d      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00e      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x632>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e74:	d009      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x632>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e7e:	d004      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x632>
 8005e80:	f240 1105 	movw	r1, #261	@ 0x105
 8005e84:	4865      	ldr	r0, [pc, #404]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005e86:	f7fb fffd 	bl	8001e84 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e8a:	4b63      	ldr	r3, [pc, #396]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e98:	495f      	ldr	r1, [pc, #380]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01d      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ebc:	d009      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ec2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ec6:	d004      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8005ec8:	f240 110f 	movw	r1, #271	@ 0x10f
 8005ecc:	4853      	ldr	r0, [pc, #332]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005ece:	f7fb ffd9 	bl	8001e84 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ed2:	4b51      	ldr	r3, [pc, #324]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ee0:	494d      	ldr	r1, [pc, #308]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01d      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00e      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f04:	d009      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f0e:	d004      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8005f10:	f240 1119 	movw	r1, #281	@ 0x119
 8005f14:	4841      	ldr	r0, [pc, #260]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005f16:	f7fb ffb5 	bl	8001e84 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f28:	493b      	ldr	r1, [pc, #236]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01f      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d010      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d00c      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d008      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d004      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8005f5c:	f240 1123 	movw	r1, #291	@ 0x123
 8005f60:	482e      	ldr	r0, [pc, #184]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005f62:	f7fb ff8f 	bl	8001e84 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f66:	4b2c      	ldr	r3, [pc, #176]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f6c:	f023 0203 	bic.w	r2, r3, #3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f74:	4928      	ldr	r1, [pc, #160]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01f      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d010      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d00c      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f9c:	2b0c      	cmp	r3, #12
 8005f9e:	d008      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d004      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8005fa8:	f240 112d 	movw	r1, #301	@ 0x12d
 8005fac:	481b      	ldr	r0, [pc, #108]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005fae:	f7fb ff69 	bl	8001e84 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fb2:	4b19      	ldr	r3, [pc, #100]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb8:	f023 020c 	bic.w	r2, r3, #12
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc0:	4915      	ldr	r1, [pc, #84]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d025      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d010      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	d00c      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fe8:	2b30      	cmp	r3, #48	@ 0x30
 8005fea:	d008      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d004      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8005ff4:	f240 1137 	movw	r1, #311	@ 0x137
 8005ff8:	4808      	ldr	r0, [pc, #32]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8005ffa:	f7fb ff43 	bl	8001e84 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ffe:	4b06      	ldr	r3, [pc, #24]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006004:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800600c:	4902      	ldr	r1, [pc, #8]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006014:	e004      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8006016:	bf00      	nop
 8006018:	40023800 	.word	0x40023800
 800601c:	08007d80 	.word	0x08007d80
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01f      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006030:	2b00      	cmp	r3, #0
 8006032:	d010      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006038:	2b40      	cmp	r3, #64	@ 0x40
 800603a:	d00c      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006040:	2bc0      	cmp	r3, #192	@ 0xc0
 8006042:	d008      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006048:	2b80      	cmp	r3, #128	@ 0x80
 800604a:	d004      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 800604c:	f240 1141 	movw	r1, #321	@ 0x141
 8006050:	48a0      	ldr	r0, [pc, #640]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006052:	f7fb ff17 	bl	8001e84 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006056:	4ba0      	ldr	r3, [pc, #640]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006064:	499c      	ldr	r1, [pc, #624]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006074:	2b00      	cmp	r3, #0
 8006076:	d022      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607c:	2b00      	cmp	r3, #0
 800607e:	d013      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006088:	d00e      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006092:	d009      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800609c:	d004      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800609e:	f240 114b 	movw	r1, #331	@ 0x14b
 80060a2:	488c      	ldr	r0, [pc, #560]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80060a4:	f7fb feee 	bl	8001e84 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060a8:	4b8b      	ldr	r3, [pc, #556]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b6:	4988      	ldr	r1, [pc, #544]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d022      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d013      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060da:	d00e      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060e4:	d009      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060ee:	d004      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80060f0:	f240 1155 	movw	r1, #341	@ 0x155
 80060f4:	4877      	ldr	r0, [pc, #476]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80060f6:	f7fb fec5 	bl	8001e84 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80060fa:	4b77      	ldr	r3, [pc, #476]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80060fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006100:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006108:	4973      	ldr	r1, [pc, #460]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800610a:	4313      	orrs	r3, r2
 800610c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d022      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d013      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800612c:	d00e      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006132:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006136:	d009      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800613c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006140:	d004      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006142:	f240 115f 	movw	r1, #351	@ 0x15f
 8006146:	4863      	ldr	r0, [pc, #396]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006148:	f7fb fe9c 	bl	8001e84 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800614c:	4b62      	ldr	r3, [pc, #392]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006152:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800615a:	495f      	ldr	r1, [pc, #380]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d022      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006172:	2b00      	cmp	r3, #0
 8006174:	d013      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800617a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800617e:	d00e      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006184:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006188:	d009      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x946>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800618e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006192:	d004      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006194:	f240 1169 	movw	r1, #361	@ 0x169
 8006198:	484e      	ldr	r0, [pc, #312]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800619a:	f7fb fe73 	bl	8001e84 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800619e:	4b4e      	ldr	r3, [pc, #312]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80061a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ac:	494a      	ldr	r1, [pc, #296]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d018      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061c8:	d008      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x984>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x984>
 80061d2:	f240 1173 	movw	r1, #371	@ 0x173
 80061d6:	483f      	ldr	r0, [pc, #252]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80061d8:	f7fb fe54 	bl	8001e84 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061dc:	4b3e      	ldr	r3, [pc, #248]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061ea:	493b      	ldr	r1, [pc, #236]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01f      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006206:	d008      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d004      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006210:	f240 117d 	movw	r1, #381	@ 0x17d
 8006214:	482f      	ldr	r0, [pc, #188]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006216:	f7fb fe35 	bl	8001e84 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800621a:	4b2f      	ldr	r3, [pc, #188]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800621c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006220:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006228:	492b      	ldr	r1, [pc, #172]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800622a:	4313      	orrs	r3, r2
 800622c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006234:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006238:	d101      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 800623a:	2301      	movs	r3, #1
 800623c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 800624a:	2301      	movs	r3, #1
 800624c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d022      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800625e:	2b00      	cmp	r3, #0
 8006260:	d013      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006266:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800626a:	d00e      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006270:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006274:	d009      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800627a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800627e:	d004      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006280:	f240 1195 	movw	r1, #405	@ 0x195
 8006284:	4813      	ldr	r0, [pc, #76]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006286:	f7fb fdfd 	bl	8001e84 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800628a:	4b13      	ldr	r3, [pc, #76]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800628c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006290:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006298:	490f      	ldr	r1, [pc, #60]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d020      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062b6:	d009      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80062c2:	f240 119f 	movw	r1, #415	@ 0x19f
 80062c6:	4803      	ldr	r0, [pc, #12]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80062c8:	f7fb fddc 	bl	8001e84 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80062cc:	4b02      	ldr	r3, [pc, #8]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80062ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d2:	e003      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
 80062d4:	08007d80 	.word	0x08007d80
 80062d8:	40023800 	.word	0x40023800
 80062dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062e6:	4910      	ldr	r1, [pc, #64]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d006      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8155 	beq.w	80065ac <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006302:	4b09      	ldr	r3, [pc, #36]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a08      	ldr	r2, [pc, #32]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006308:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800630c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800630e:	f7fc f8fb 	bl	8002508 <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006314:	e00a      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006316:	f7fc f8f7 	bl	8002508 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b64      	cmp	r3, #100	@ 0x64
 8006322:	d903      	bls.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e273      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8006328:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800632c:	4b9a      	ldr	r3, [pc, #616]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1ee      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2b31      	cmp	r3, #49	@ 0x31
 800633e:	d904      	bls.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8006348:	d904      	bls.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800634a:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800634e:	4893      	ldr	r0, [pc, #588]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006350:	f7fb fd98 	bl	8001e84 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d02e      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006364:	2b00      	cmp	r3, #0
 8006366:	d12a      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d903      	bls.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b07      	cmp	r3, #7
 8006376:	d904      	bls.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006378:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800637c:	4887      	ldr	r0, [pc, #540]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800637e:	f7fb fd81 	bl	8001e84 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006382:	4b85      	ldr	r3, [pc, #532]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006388:	0c1b      	lsrs	r3, r3, #16
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006390:	4b81      	ldr	r3, [pc, #516]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006396:	0e1b      	lsrs	r3, r3, #24
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	019a      	lsls	r2, r3, #6
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	041b      	lsls	r3, r3, #16
 80063a8:	431a      	orrs	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	061b      	lsls	r3, r3, #24
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	071b      	lsls	r3, r3, #28
 80063b6:	4978      	ldr	r1, [pc, #480]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063d2:	d00a      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d048      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063e8:	d143      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d903      	bls.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d904      	bls.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80063fa:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 80063fe:	4867      	ldr	r0, [pc, #412]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006400:	f7fb fd40 	bl	8001e84 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006410:	2b20      	cmp	r3, #32
 8006412:	d904      	bls.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8006414:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 8006418:	4860      	ldr	r0, [pc, #384]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800641a:	f7fb fd33 	bl	8001e84 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800641e:	4b5e      	ldr	r3, [pc, #376]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006424:	0c1b      	lsrs	r3, r3, #16
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800642c:	4b5a      	ldr	r3, [pc, #360]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800642e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006432:	0f1b      	lsrs	r3, r3, #28
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	019a      	lsls	r2, r3, #6
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	041b      	lsls	r3, r3, #16
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	061b      	lsls	r3, r3, #24
 800644c:	431a      	orrs	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	071b      	lsls	r3, r3, #28
 8006452:	4951      	ldr	r1, [pc, #324]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800645a:	4b4f      	ldr	r3, [pc, #316]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800645c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006460:	f023 021f 	bic.w	r2, r3, #31
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006468:	3b01      	subs	r3, #1
 800646a:	494b      	ldr	r1, [pc, #300]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d032      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d010      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d00c      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d008      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b03      	cmp	r3, #3
 800649c:	d004      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800649e:	f240 2105 	movw	r1, #517	@ 0x205
 80064a2:	483e      	ldr	r0, [pc, #248]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80064a4:	f7fb fcee 	bl	8001e84 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80064aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064ae:	0e1b      	lsrs	r3, r3, #24
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064b6:	4b38      	ldr	r3, [pc, #224]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80064b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064bc:	0f1b      	lsrs	r3, r3, #28
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	019a      	lsls	r2, r3, #6
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	041b      	lsls	r3, r3, #16
 80064d0:	431a      	orrs	r2, r3
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	061b      	lsls	r3, r3, #24
 80064d6:	431a      	orrs	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	071b      	lsls	r3, r3, #28
 80064dc:	492e      	ldr	r1, [pc, #184]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d040      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d010      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d00c      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d008      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b03      	cmp	r3, #3
 800650e:	d004      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006510:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8006514:	4821      	ldr	r0, [pc, #132]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006516:	f7fb fcb5 	bl	8001e84 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d903      	bls.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b07      	cmp	r3, #7
 8006528:	d904      	bls.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800652a:	f240 2115 	movw	r1, #533	@ 0x215
 800652e:	481b      	ldr	r0, [pc, #108]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006530:	f7fb fca8 	bl	8001e84 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d903      	bls.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b0f      	cmp	r3, #15
 8006542:	d904      	bls.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8006544:	f240 2116 	movw	r1, #534	@ 0x216
 8006548:	4814      	ldr	r0, [pc, #80]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800654a:	f7fb fc9b 	bl	8001e84 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	019a      	lsls	r2, r3, #6
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	041b      	lsls	r3, r3, #16
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	061b      	lsls	r3, r3, #24
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	071b      	lsls	r3, r3, #28
 800656a:	490b      	ldr	r1, [pc, #44]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800656c:	4313      	orrs	r3, r2
 800656e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006572:	4b09      	ldr	r3, [pc, #36]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a08      	ldr	r2, [pc, #32]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006578:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800657c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800657e:	f7fb ffc3 	bl	8002508 <HAL_GetTick>
 8006582:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006584:	e00c      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006586:	f7fb ffbf 	bl	8002508 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b64      	cmp	r3, #100	@ 0x64
 8006592:	d905      	bls.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e13b      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8006598:	40023800 	.word	0x40023800
 800659c:	08007d80 	.word	0x08007d80
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065a0:	4b9d      	ldr	r3, [pc, #628]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0ec      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	f040 812d 	bne.w	800680e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80065b4:	4b98      	ldr	r3, [pc, #608]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a97      	ldr	r2, [pc, #604]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80065ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c0:	f7fb ffa2 	bl	8002508 <HAL_GetTick>
 80065c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065c8:	f7fb ff9e 	bl	8002508 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b64      	cmp	r3, #100	@ 0x64
 80065d4:	d901      	bls.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e11a      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065da:	4b8f      	ldr	r3, [pc, #572]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065e6:	d0ef      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	2b31      	cmp	r3, #49	@ 0x31
 80065ee:	d904      	bls.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 80065f8:	d904      	bls.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80065fa:	f44f 7111 	mov.w	r1, #580	@ 0x244
 80065fe:	4887      	ldr	r0, [pc, #540]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006600:	f7fb fc40 	bl	8001e84 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d009      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006620:	2b00      	cmp	r3, #0
 8006622:	d048      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d144      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d903      	bls.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	2b0f      	cmp	r3, #15
 800663a:	d904      	bls.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 800663c:	f240 214b 	movw	r1, #587	@ 0x24b
 8006640:	4876      	ldr	r0, [pc, #472]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006642:	f7fb fc1f 	bl	8001e84 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006652:	2b20      	cmp	r3, #32
 8006654:	d904      	bls.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8006656:	f240 214d 	movw	r1, #589	@ 0x24d
 800665a:	4870      	ldr	r0, [pc, #448]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800665c:	f7fb fc12 	bl	8001e84 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006660:	4b6d      	ldr	r3, [pc, #436]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006666:	0c1b      	lsrs	r3, r3, #16
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800666e:	4b6a      	ldr	r3, [pc, #424]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006674:	0f1b      	lsrs	r3, r3, #28
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	019a      	lsls	r2, r3, #6
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	041b      	lsls	r3, r3, #16
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	431a      	orrs	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	071b      	lsls	r3, r3, #28
 8006694:	4960      	ldr	r1, [pc, #384]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800669c:	4b5e      	ldr	r3, [pc, #376]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800669e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066a2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066aa:	3b01      	subs	r3, #1
 80066ac:	021b      	lsls	r3, r3, #8
 80066ae:	495a      	ldr	r1, [pc, #360]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d037      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ca:	d132      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d010      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d00c      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d008      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d004      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80066ec:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80066f0:	484a      	ldr	r0, [pc, #296]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80066f2:	f7fb fbc7 	bl	8001e84 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066f6:	4b48      	ldr	r3, [pc, #288]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066fc:	0e1b      	lsrs	r3, r3, #24
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006704:	4b44      	ldr	r3, [pc, #272]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670a:	0f1b      	lsrs	r3, r3, #28
 800670c:	f003 0307 	and.w	r3, r3, #7
 8006710:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	019a      	lsls	r2, r3, #6
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	041b      	lsls	r3, r3, #16
 800671e:	431a      	orrs	r2, r3
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	061b      	lsls	r3, r3, #24
 8006724:	431a      	orrs	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	071b      	lsls	r3, r3, #28
 800672a:	493b      	ldr	r1, [pc, #236]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d04d      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d903      	bls.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	2b07      	cmp	r3, #7
 800674c:	d904      	bls.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 800674e:	f240 216f 	movw	r1, #623	@ 0x26f
 8006752:	4832      	ldr	r0, [pc, #200]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006754:	f7fb fb96 	bl	8001e84 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d013      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006768:	d00e      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006772:	d009      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006778:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800677c:	d004      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800677e:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8006782:	4826      	ldr	r0, [pc, #152]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006784:	f7fb fb7e 	bl	8001e84 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006788:	4b23      	ldr	r3, [pc, #140]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800678a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678e:	0e1b      	lsrs	r3, r3, #24
 8006790:	f003 030f 	and.w	r3, r3, #15
 8006794:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006796:	4b20      	ldr	r3, [pc, #128]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800679c:	0c1b      	lsrs	r3, r3, #16
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	019a      	lsls	r2, r3, #6
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	041b      	lsls	r3, r3, #16
 80067ae:	431a      	orrs	r2, r3
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	061b      	lsls	r3, r3, #24
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	071b      	lsls	r3, r3, #28
 80067bc:	4916      	ldr	r1, [pc, #88]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067c4:	4b14      	ldr	r3, [pc, #80]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80067c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d2:	4911      	ldr	r1, [pc, #68]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80067da:	4b0f      	ldr	r3, [pc, #60]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a0e      	ldr	r2, [pc, #56]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80067e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e6:	f7fb fe8f 	bl	8002508 <HAL_GetTick>
 80067ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067ec:	e008      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067ee:	f7fb fe8b 	bl	8002508 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b64      	cmp	r3, #100	@ 0x64
 80067fa:	d901      	bls.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e007      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006800:	4b05      	ldr	r3, [pc, #20]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800680c:	d1ef      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3720      	adds	r7, #32
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	40023800 	.word	0x40023800
 800681c:	08007d80 	.word	0x08007d80

08006820 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e1a8      	b.n	8006b86 <HAL_TIM_Encoder_Init+0x366>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a7f      	ldr	r2, [pc, #508]	@ (8006a38 <HAL_TIM_Encoder_Init+0x218>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01d      	beq.n	800687a <HAL_TIM_Encoder_Init+0x5a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006846:	d018      	beq.n	800687a <HAL_TIM_Encoder_Init+0x5a>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a7b      	ldr	r2, [pc, #492]	@ (8006a3c <HAL_TIM_Encoder_Init+0x21c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_TIM_Encoder_Init+0x5a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a7a      	ldr	r2, [pc, #488]	@ (8006a40 <HAL_TIM_Encoder_Init+0x220>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_TIM_Encoder_Init+0x5a>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a78      	ldr	r2, [pc, #480]	@ (8006a44 <HAL_TIM_Encoder_Init+0x224>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_TIM_Encoder_Init+0x5a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a77      	ldr	r2, [pc, #476]	@ (8006a48 <HAL_TIM_Encoder_Init+0x228>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_TIM_Encoder_Init+0x5a>
 8006870:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8006874:	4875      	ldr	r0, [pc, #468]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 8006876:	f7fb fb05 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d014      	beq.n	80068ac <HAL_TIM_Encoder_Init+0x8c>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b10      	cmp	r3, #16
 8006888:	d010      	beq.n	80068ac <HAL_TIM_Encoder_Init+0x8c>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b20      	cmp	r3, #32
 8006890:	d00c      	beq.n	80068ac <HAL_TIM_Encoder_Init+0x8c>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b40      	cmp	r3, #64	@ 0x40
 8006898:	d008      	beq.n	80068ac <HAL_TIM_Encoder_Init+0x8c>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	2b60      	cmp	r3, #96	@ 0x60
 80068a0:	d004      	beq.n	80068ac <HAL_TIM_Encoder_Init+0x8c>
 80068a2:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 80068a6:	4869      	ldr	r0, [pc, #420]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 80068a8:	f7fb faec 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00e      	beq.n	80068d2 <HAL_TIM_Encoder_Init+0xb2>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068bc:	d009      	beq.n	80068d2 <HAL_TIM_Encoder_Init+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068c6:	d004      	beq.n	80068d2 <HAL_TIM_Encoder_Init+0xb2>
 80068c8:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 80068cc:	485f      	ldr	r0, [pc, #380]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 80068ce:	f7fb fad9 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <HAL_TIM_Encoder_Init+0xcc>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	2b80      	cmp	r3, #128	@ 0x80
 80068e0:	d004      	beq.n	80068ec <HAL_TIM_Encoder_Init+0xcc>
 80068e2:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 80068e6:	4859      	ldr	r0, [pc, #356]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 80068e8:	f7fb facc 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d00c      	beq.n	800690e <HAL_TIM_Encoder_Init+0xee>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d008      	beq.n	800690e <HAL_TIM_Encoder_Init+0xee>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b03      	cmp	r3, #3
 8006902:	d004      	beq.n	800690e <HAL_TIM_Encoder_Init+0xee>
 8006904:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 8006908:	4850      	ldr	r0, [pc, #320]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 800690a:	f7fb fabb 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d00c      	beq.n	8006930 <HAL_TIM_Encoder_Init+0x110>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d008      	beq.n	8006930 <HAL_TIM_Encoder_Init+0x110>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	2b03      	cmp	r3, #3
 8006924:	d004      	beq.n	8006930 <HAL_TIM_Encoder_Init+0x110>
 8006926:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800692a:	4848      	ldr	r0, [pc, #288]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 800692c:	f7fb faaa 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d00c      	beq.n	8006952 <HAL_TIM_Encoder_Init+0x132>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d008      	beq.n	8006952 <HAL_TIM_Encoder_Init+0x132>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b03      	cmp	r3, #3
 8006946:	d004      	beq.n	8006952 <HAL_TIM_Encoder_Init+0x132>
 8006948:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 800694c:	483f      	ldr	r0, [pc, #252]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 800694e:	f7fb fa99 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d008      	beq.n	800696c <HAL_TIM_Encoder_Init+0x14c>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d004      	beq.n	800696c <HAL_TIM_Encoder_Init+0x14c>
 8006962:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8006966:	4839      	ldr	r0, [pc, #228]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 8006968:	f7fb fa8c 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d008      	beq.n	8006986 <HAL_TIM_Encoder_Init+0x166>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d004      	beq.n	8006986 <HAL_TIM_Encoder_Init+0x166>
 800697c:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 8006980:	4832      	ldr	r0, [pc, #200]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 8006982:	f7fb fa7f 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d010      	beq.n	80069b0 <HAL_TIM_Encoder_Init+0x190>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	2b04      	cmp	r3, #4
 8006994:	d00c      	beq.n	80069b0 <HAL_TIM_Encoder_Init+0x190>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	2b08      	cmp	r3, #8
 800699c:	d008      	beq.n	80069b0 <HAL_TIM_Encoder_Init+0x190>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	2b0c      	cmp	r3, #12
 80069a4:	d004      	beq.n	80069b0 <HAL_TIM_Encoder_Init+0x190>
 80069a6:	f640 31ec 	movw	r1, #3052	@ 0xbec
 80069aa:	4828      	ldr	r0, [pc, #160]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 80069ac:	f7fb fa6a 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d010      	beq.n	80069da <HAL_TIM_Encoder_Init+0x1ba>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d00c      	beq.n	80069da <HAL_TIM_Encoder_Init+0x1ba>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d008      	beq.n	80069da <HAL_TIM_Encoder_Init+0x1ba>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	2b0c      	cmp	r3, #12
 80069ce:	d004      	beq.n	80069da <HAL_TIM_Encoder_Init+0x1ba>
 80069d0:	f640 31ed 	movw	r1, #3053	@ 0xbed
 80069d4:	481d      	ldr	r0, [pc, #116]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 80069d6:	f7fb fa55 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b0f      	cmp	r3, #15
 80069e0:	d904      	bls.n	80069ec <HAL_TIM_Encoder_Init+0x1cc>
 80069e2:	f640 31ee 	movw	r1, #3054	@ 0xbee
 80069e6:	4819      	ldr	r0, [pc, #100]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 80069e8:	f7fb fa4c 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	2b0f      	cmp	r3, #15
 80069f2:	d904      	bls.n	80069fe <HAL_TIM_Encoder_Init+0x1de>
 80069f4:	f640 31ef 	movw	r1, #3055	@ 0xbef
 80069f8:	4814      	ldr	r0, [pc, #80]	@ (8006a4c <HAL_TIM_Encoder_Init+0x22c>)
 80069fa:	f7fb fa43 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a06:	d004      	beq.n	8006a12 <HAL_TIM_Encoder_Init+0x1f2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8006a44 <HAL_TIM_Encoder_Init+0x224>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d107      	bne.n	8006a22 <HAL_TIM_Encoder_Init+0x202>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bf14      	ite	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	2300      	moveq	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	e01a      	b.n	8006a58 <HAL_TIM_Encoder_Init+0x238>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d012      	beq.n	8006a50 <HAL_TIM_Encoder_Init+0x230>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a32:	d20d      	bcs.n	8006a50 <HAL_TIM_Encoder_Init+0x230>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e00c      	b.n	8006a52 <HAL_TIM_Encoder_Init+0x232>
 8006a38:	40010000 	.word	0x40010000
 8006a3c:	40000400 	.word	0x40000400
 8006a40:	40000800 	.word	0x40000800
 8006a44:	40000c00 	.word	0x40000c00
 8006a48:	40010400 	.word	0x40010400
 8006a4c:	08007dbc 	.word	0x08007dbc
 8006a50:	2300      	movs	r3, #0
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <HAL_TIM_Encoder_Init+0x246>
 8006a5c:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8006a60:	484b      	ldr	r0, [pc, #300]	@ (8006b90 <HAL_TIM_Encoder_Init+0x370>)
 8006a62:	f7fb fa0f 	bl	8001e84 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fb fbac 	bl	80021d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6899      	ldr	r1, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b40      	ldr	r3, [pc, #256]	@ (8006b94 <HAL_TIM_Encoder_Init+0x374>)
 8006a94:	400b      	ands	r3, r1
 8006a96:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	f000 f93c 	bl	8006d20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4b32      	ldr	r3, [pc, #200]	@ (8006b98 <HAL_TIM_Encoder_Init+0x378>)
 8006ace:	4013      	ands	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	021b      	lsls	r3, r3, #8
 8006adc:	4313      	orrs	r3, r2
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8006b9c <HAL_TIM_Encoder_Init+0x37c>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4b2c      	ldr	r3, [pc, #176]	@ (8006ba0 <HAL_TIM_Encoder_Init+0x380>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	4313      	orrs	r3, r2
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	011a      	lsls	r2, r3, #4
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	031b      	lsls	r3, r3, #12
 8006b12:	4313      	orrs	r3, r2
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006b20:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006b28:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	4313      	orrs	r3, r2
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	08007dbc 	.word	0x08007dbc
 8006b94:	fffebff8 	.word	0xfffebff8
 8006b98:	fffffcfc 	.word	0xfffffcfc
 8006b9c:	fffff3f3 	.word	0xfffff3f3
 8006ba0:	ffff0f0f 	.word	0xffff0f0f

08006ba4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bbc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bc4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bcc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a4d      	ldr	r2, [pc, #308]	@ (8006d08 <HAL_TIM_Encoder_Start+0x164>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d01d      	beq.n	8006c14 <HAL_TIM_Encoder_Start+0x70>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be0:	d018      	beq.n	8006c14 <HAL_TIM_Encoder_Start+0x70>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a49      	ldr	r2, [pc, #292]	@ (8006d0c <HAL_TIM_Encoder_Start+0x168>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d013      	beq.n	8006c14 <HAL_TIM_Encoder_Start+0x70>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a47      	ldr	r2, [pc, #284]	@ (8006d10 <HAL_TIM_Encoder_Start+0x16c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00e      	beq.n	8006c14 <HAL_TIM_Encoder_Start+0x70>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a46      	ldr	r2, [pc, #280]	@ (8006d14 <HAL_TIM_Encoder_Start+0x170>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d009      	beq.n	8006c14 <HAL_TIM_Encoder_Start+0x70>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a44      	ldr	r2, [pc, #272]	@ (8006d18 <HAL_TIM_Encoder_Start+0x174>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <HAL_TIM_Encoder_Start+0x70>
 8006c0a:	f640 41a1 	movw	r1, #3233	@ 0xca1
 8006c0e:	4843      	ldr	r0, [pc, #268]	@ (8006d1c <HAL_TIM_Encoder_Start+0x178>)
 8006c10:	f7fb f938 	bl	8001e84 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d110      	bne.n	8006c3c <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d102      	bne.n	8006c26 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c20:	7b7b      	ldrb	r3, [r7, #13]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d001      	beq.n	8006c2a <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e069      	b.n	8006cfe <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2202      	movs	r2, #2
 8006c36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c3a:	e031      	b.n	8006ca0 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d110      	bne.n	8006c64 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d102      	bne.n	8006c4e <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c48:	7b3b      	ldrb	r3, [r7, #12]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d001      	beq.n	8006c52 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e055      	b.n	8006cfe <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c62:	e01d      	b.n	8006ca0 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d108      	bne.n	8006c7c <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d105      	bne.n	8006c7c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c70:	7b7b      	ldrb	r3, [r7, #13]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d102      	bne.n	8006c7c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c76:	7b3b      	ldrb	r3, [r7, #12]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d001      	beq.n	8006c80 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e03e      	b.n	8006cfe <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_TIM_Encoder_Start+0x10a>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d008      	beq.n	8006cbe <HAL_TIM_Encoder_Start+0x11a>
 8006cac:	e00f      	b.n	8006cce <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 f8d8 	bl	8006e6c <TIM_CCxChannelCmd>
      break;
 8006cbc:	e016      	b.n	8006cec <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	2104      	movs	r1, #4
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 f8d0 	bl	8006e6c <TIM_CCxChannelCmd>
      break;
 8006ccc:	e00e      	b.n	8006cec <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 f8c8 	bl	8006e6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	2104      	movs	r1, #4
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 f8c1 	bl	8006e6c <TIM_CCxChannelCmd>
      break;
 8006cea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	40010000 	.word	0x40010000
 8006d0c:	40000400 	.word	0x40000400
 8006d10:	40000800 	.word	0x40000800
 8006d14:	40000c00 	.word	0x40000c00
 8006d18:	40010400 	.word	0x40010400
 8006d1c:	08007dbc 	.word	0x08007dbc

08006d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a43      	ldr	r2, [pc, #268]	@ (8006e40 <TIM_Base_SetConfig+0x120>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d013      	beq.n	8006d60 <TIM_Base_SetConfig+0x40>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3e:	d00f      	beq.n	8006d60 <TIM_Base_SetConfig+0x40>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a40      	ldr	r2, [pc, #256]	@ (8006e44 <TIM_Base_SetConfig+0x124>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00b      	beq.n	8006d60 <TIM_Base_SetConfig+0x40>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a3f      	ldr	r2, [pc, #252]	@ (8006e48 <TIM_Base_SetConfig+0x128>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d007      	beq.n	8006d60 <TIM_Base_SetConfig+0x40>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a3e      	ldr	r2, [pc, #248]	@ (8006e4c <TIM_Base_SetConfig+0x12c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d003      	beq.n	8006d60 <TIM_Base_SetConfig+0x40>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8006e50 <TIM_Base_SetConfig+0x130>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d108      	bne.n	8006d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a32      	ldr	r2, [pc, #200]	@ (8006e40 <TIM_Base_SetConfig+0x120>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d02b      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d80:	d027      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a2f      	ldr	r2, [pc, #188]	@ (8006e44 <TIM_Base_SetConfig+0x124>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d023      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8006e48 <TIM_Base_SetConfig+0x128>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d01f      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a2d      	ldr	r2, [pc, #180]	@ (8006e4c <TIM_Base_SetConfig+0x12c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d01b      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8006e50 <TIM_Base_SetConfig+0x130>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d017      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a2b      	ldr	r2, [pc, #172]	@ (8006e54 <TIM_Base_SetConfig+0x134>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d013      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a2a      	ldr	r2, [pc, #168]	@ (8006e58 <TIM_Base_SetConfig+0x138>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00f      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a29      	ldr	r2, [pc, #164]	@ (8006e5c <TIM_Base_SetConfig+0x13c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00b      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a28      	ldr	r2, [pc, #160]	@ (8006e60 <TIM_Base_SetConfig+0x140>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d007      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a27      	ldr	r2, [pc, #156]	@ (8006e64 <TIM_Base_SetConfig+0x144>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d003      	beq.n	8006dd2 <TIM_Base_SetConfig+0xb2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a26      	ldr	r2, [pc, #152]	@ (8006e68 <TIM_Base_SetConfig+0x148>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d108      	bne.n	8006de4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a0e      	ldr	r2, [pc, #56]	@ (8006e40 <TIM_Base_SetConfig+0x120>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d003      	beq.n	8006e12 <TIM_Base_SetConfig+0xf2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a10      	ldr	r2, [pc, #64]	@ (8006e50 <TIM_Base_SetConfig+0x130>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d103      	bne.n	8006e1a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	691a      	ldr	r2, [r3, #16]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f043 0204 	orr.w	r2, r3, #4
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	601a      	str	r2, [r3, #0]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40010000 	.word	0x40010000
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40000800 	.word	0x40000800
 8006e4c:	40000c00 	.word	0x40000c00
 8006e50:	40010400 	.word	0x40010400
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40014400 	.word	0x40014400
 8006e5c:	40014800 	.word	0x40014800
 8006e60:	40001800 	.word	0x40001800
 8006e64:	40001c00 	.word	0x40001c00
 8006e68:	40002000 	.word	0x40002000

08006e6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4a35      	ldr	r2, [pc, #212]	@ (8006f50 <TIM_CCxChannelCmd+0xe4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d030      	beq.n	8006ee2 <TIM_CCxChannelCmd+0x76>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e86:	d02c      	beq.n	8006ee2 <TIM_CCxChannelCmd+0x76>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4a32      	ldr	r2, [pc, #200]	@ (8006f54 <TIM_CCxChannelCmd+0xe8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d028      	beq.n	8006ee2 <TIM_CCxChannelCmd+0x76>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a31      	ldr	r2, [pc, #196]	@ (8006f58 <TIM_CCxChannelCmd+0xec>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d024      	beq.n	8006ee2 <TIM_CCxChannelCmd+0x76>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4a30      	ldr	r2, [pc, #192]	@ (8006f5c <TIM_CCxChannelCmd+0xf0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d020      	beq.n	8006ee2 <TIM_CCxChannelCmd+0x76>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8006f60 <TIM_CCxChannelCmd+0xf4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d01c      	beq.n	8006ee2 <TIM_CCxChannelCmd+0x76>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8006f64 <TIM_CCxChannelCmd+0xf8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d018      	beq.n	8006ee2 <TIM_CCxChannelCmd+0x76>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a2d      	ldr	r2, [pc, #180]	@ (8006f68 <TIM_CCxChannelCmd+0xfc>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d014      	beq.n	8006ee2 <TIM_CCxChannelCmd+0x76>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4a2c      	ldr	r2, [pc, #176]	@ (8006f6c <TIM_CCxChannelCmd+0x100>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d010      	beq.n	8006ee2 <TIM_CCxChannelCmd+0x76>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8006f70 <TIM_CCxChannelCmd+0x104>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00c      	beq.n	8006ee2 <TIM_CCxChannelCmd+0x76>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4a2a      	ldr	r2, [pc, #168]	@ (8006f74 <TIM_CCxChannelCmd+0x108>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d008      	beq.n	8006ee2 <TIM_CCxChannelCmd+0x76>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4a29      	ldr	r2, [pc, #164]	@ (8006f78 <TIM_CCxChannelCmd+0x10c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d004      	beq.n	8006ee2 <TIM_CCxChannelCmd+0x76>
 8006ed8:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 8006edc:	4827      	ldr	r0, [pc, #156]	@ (8006f7c <TIM_CCxChannelCmd+0x110>)
 8006ede:	f7fa ffd1 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d016      	beq.n	8006f16 <TIM_CCxChannelCmd+0xaa>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d013      	beq.n	8006f16 <TIM_CCxChannelCmd+0xaa>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d010      	beq.n	8006f16 <TIM_CCxChannelCmd+0xaa>
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b0c      	cmp	r3, #12
 8006ef8:	d00d      	beq.n	8006f16 <TIM_CCxChannelCmd+0xaa>
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b10      	cmp	r3, #16
 8006efe:	d00a      	beq.n	8006f16 <TIM_CCxChannelCmd+0xaa>
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b14      	cmp	r3, #20
 8006f04:	d007      	beq.n	8006f16 <TIM_CCxChannelCmd+0xaa>
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2b3c      	cmp	r3, #60	@ 0x3c
 8006f0a:	d004      	beq.n	8006f16 <TIM_CCxChannelCmd+0xaa>
 8006f0c:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 8006f10:	481a      	ldr	r0, [pc, #104]	@ (8006f7c <TIM_CCxChannelCmd+0x110>)
 8006f12:	f7fa ffb7 	bl	8001e84 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f003 031f 	and.w	r3, r3, #31
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a1a      	ldr	r2, [r3, #32]
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	43db      	mvns	r3, r3
 8006f2c:	401a      	ands	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a1a      	ldr	r2, [r3, #32]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f003 031f 	and.w	r3, r3, #31
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f42:	431a      	orrs	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	621a      	str	r2, [r3, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40010000 	.word	0x40010000
 8006f54:	40000400 	.word	0x40000400
 8006f58:	40000800 	.word	0x40000800
 8006f5c:	40000c00 	.word	0x40000c00
 8006f60:	40010400 	.word	0x40010400
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800
 8006f70:	40001800 	.word	0x40001800
 8006f74:	40001c00 	.word	0x40001c00
 8006f78:	40002000 	.word	0x40002000
 8006f7c:	08007dbc 	.word	0x08007dbc

08006f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a32      	ldr	r2, [pc, #200]	@ (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d027      	beq.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f9c:	d022      	beq.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800705c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d01d      	beq.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a2c      	ldr	r2, [pc, #176]	@ (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d018      	beq.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d013      	beq.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a29      	ldr	r2, [pc, #164]	@ (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00e      	beq.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a28      	ldr	r2, [pc, #160]	@ (800706c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d009      	beq.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a26      	ldr	r2, [pc, #152]	@ (8007070 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d004      	beq.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006fda:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 8006fde:	4825      	ldr	r0, [pc, #148]	@ (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fe0:	f7fa ff50 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d020      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b10      	cmp	r3, #16
 8006ff2:	d01c      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d018      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b30      	cmp	r3, #48	@ 0x30
 8007002:	d014      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b40      	cmp	r3, #64	@ 0x40
 800700a:	d010      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b50      	cmp	r3, #80	@ 0x50
 8007012:	d00c      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b60      	cmp	r3, #96	@ 0x60
 800701a:	d008      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b70      	cmp	r3, #112	@ 0x70
 8007022:	d004      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007024:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8007028:	4812      	ldr	r0, [pc, #72]	@ (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800702a:	f7fa ff2b 	bl	8001e84 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b80      	cmp	r3, #128	@ 0x80
 8007034:	d008      	beq.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d004      	beq.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800703e:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8007042:	480c      	ldr	r0, [pc, #48]	@ (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007044:	f7fa ff1e 	bl	8001e84 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800704e:	2b01      	cmp	r3, #1
 8007050:	d112      	bne.n	8007078 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007052:	2302      	movs	r3, #2
 8007054:	e0d7      	b.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8007056:	bf00      	nop
 8007058:	40010000 	.word	0x40010000
 800705c:	40000400 	.word	0x40000400
 8007060:	40000800 	.word	0x40000800
 8007064:	40000c00 	.word	0x40000c00
 8007068:	40001000 	.word	0x40001000
 800706c:	40001400 	.word	0x40001400
 8007070:	40010400 	.word	0x40010400
 8007074:	08007df4 	.word	0x08007df4
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a5c      	ldr	r2, [pc, #368]	@ (8007210 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d004      	beq.n	80070ac <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a5b      	ldr	r2, [pc, #364]	@ (8007214 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d161      	bne.n	8007170 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d054      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070bc:	d04f      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070c6:	d04a      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070d0:	d045      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070da:	d040      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80070e4:	d03b      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070ee:	d036      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070f8:	d031      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8007102:	d02c      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800710c:	d027      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8007116:	d022      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007120:	d01d      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800712a:	d018      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007134:	d013      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800713e:	d00e      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8007148:	d009      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8007152:	d004      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007154:	f240 71bf 	movw	r1, #1983	@ 0x7bf
 8007158:	482f      	ldr	r0, [pc, #188]	@ (8007218 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800715a:	f7fa fe93 	bl	8001e84 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007164:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a20      	ldr	r2, [pc, #128]	@ (8007210 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d022      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800719c:	d01d      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1e      	ldr	r2, [pc, #120]	@ (800721c <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d018      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007220 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d013      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007224 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00e      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a14      	ldr	r2, [pc, #80]	@ (8007214 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d009      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a17      	ldr	r2, [pc, #92]	@ (8007228 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a15      	ldr	r2, [pc, #84]	@ (800722c <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d10c      	bne.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	40010000 	.word	0x40010000
 8007214:	40010400 	.word	0x40010400
 8007218:	08007df4 	.word	0x08007df4
 800721c:	40000400 	.word	0x40000400
 8007220:	40000800 	.word	0x40000800
 8007224:	40000c00 	.word	0x40000c00
 8007228:	40014000 	.word	0x40014000
 800722c:	40001800 	.word	0x40001800

08007230 <siprintf>:
 8007230:	b40e      	push	{r1, r2, r3}
 8007232:	b510      	push	{r4, lr}
 8007234:	b09d      	sub	sp, #116	@ 0x74
 8007236:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007238:	9002      	str	r0, [sp, #8]
 800723a:	9006      	str	r0, [sp, #24]
 800723c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007240:	480a      	ldr	r0, [pc, #40]	@ (800726c <siprintf+0x3c>)
 8007242:	9107      	str	r1, [sp, #28]
 8007244:	9104      	str	r1, [sp, #16]
 8007246:	490a      	ldr	r1, [pc, #40]	@ (8007270 <siprintf+0x40>)
 8007248:	f853 2b04 	ldr.w	r2, [r3], #4
 800724c:	9105      	str	r1, [sp, #20]
 800724e:	2400      	movs	r4, #0
 8007250:	a902      	add	r1, sp, #8
 8007252:	6800      	ldr	r0, [r0, #0]
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007258:	f000 f994 	bl	8007584 <_svfiprintf_r>
 800725c:	9b02      	ldr	r3, [sp, #8]
 800725e:	701c      	strb	r4, [r3, #0]
 8007260:	b01d      	add	sp, #116	@ 0x74
 8007262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007266:	b003      	add	sp, #12
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	20000054 	.word	0x20000054
 8007270:	ffff0208 	.word	0xffff0208

08007274 <memset>:
 8007274:	4402      	add	r2, r0
 8007276:	4603      	mov	r3, r0
 8007278:	4293      	cmp	r3, r2
 800727a:	d100      	bne.n	800727e <memset+0xa>
 800727c:	4770      	bx	lr
 800727e:	f803 1b01 	strb.w	r1, [r3], #1
 8007282:	e7f9      	b.n	8007278 <memset+0x4>

08007284 <__errno>:
 8007284:	4b01      	ldr	r3, [pc, #4]	@ (800728c <__errno+0x8>)
 8007286:	6818      	ldr	r0, [r3, #0]
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	20000054 	.word	0x20000054

08007290 <__libc_init_array>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	4d0d      	ldr	r5, [pc, #52]	@ (80072c8 <__libc_init_array+0x38>)
 8007294:	4c0d      	ldr	r4, [pc, #52]	@ (80072cc <__libc_init_array+0x3c>)
 8007296:	1b64      	subs	r4, r4, r5
 8007298:	10a4      	asrs	r4, r4, #2
 800729a:	2600      	movs	r6, #0
 800729c:	42a6      	cmp	r6, r4
 800729e:	d109      	bne.n	80072b4 <__libc_init_array+0x24>
 80072a0:	4d0b      	ldr	r5, [pc, #44]	@ (80072d0 <__libc_init_array+0x40>)
 80072a2:	4c0c      	ldr	r4, [pc, #48]	@ (80072d4 <__libc_init_array+0x44>)
 80072a4:	f000 fc64 	bl	8007b70 <_init>
 80072a8:	1b64      	subs	r4, r4, r5
 80072aa:	10a4      	asrs	r4, r4, #2
 80072ac:	2600      	movs	r6, #0
 80072ae:	42a6      	cmp	r6, r4
 80072b0:	d105      	bne.n	80072be <__libc_init_array+0x2e>
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b8:	4798      	blx	r3
 80072ba:	3601      	adds	r6, #1
 80072bc:	e7ee      	b.n	800729c <__libc_init_array+0xc>
 80072be:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c2:	4798      	blx	r3
 80072c4:	3601      	adds	r6, #1
 80072c6:	e7f2      	b.n	80072ae <__libc_init_array+0x1e>
 80072c8:	08007e84 	.word	0x08007e84
 80072cc:	08007e84 	.word	0x08007e84
 80072d0:	08007e84 	.word	0x08007e84
 80072d4:	08007e88 	.word	0x08007e88

080072d8 <__retarget_lock_acquire_recursive>:
 80072d8:	4770      	bx	lr

080072da <__retarget_lock_release_recursive>:
 80072da:	4770      	bx	lr

080072dc <_free_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4605      	mov	r5, r0
 80072e0:	2900      	cmp	r1, #0
 80072e2:	d041      	beq.n	8007368 <_free_r+0x8c>
 80072e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e8:	1f0c      	subs	r4, r1, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	bfb8      	it	lt
 80072ee:	18e4      	addlt	r4, r4, r3
 80072f0:	f000 f8e0 	bl	80074b4 <__malloc_lock>
 80072f4:	4a1d      	ldr	r2, [pc, #116]	@ (800736c <_free_r+0x90>)
 80072f6:	6813      	ldr	r3, [r2, #0]
 80072f8:	b933      	cbnz	r3, 8007308 <_free_r+0x2c>
 80072fa:	6063      	str	r3, [r4, #4]
 80072fc:	6014      	str	r4, [r2, #0]
 80072fe:	4628      	mov	r0, r5
 8007300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007304:	f000 b8dc 	b.w	80074c0 <__malloc_unlock>
 8007308:	42a3      	cmp	r3, r4
 800730a:	d908      	bls.n	800731e <_free_r+0x42>
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	1821      	adds	r1, r4, r0
 8007310:	428b      	cmp	r3, r1
 8007312:	bf01      	itttt	eq
 8007314:	6819      	ldreq	r1, [r3, #0]
 8007316:	685b      	ldreq	r3, [r3, #4]
 8007318:	1809      	addeq	r1, r1, r0
 800731a:	6021      	streq	r1, [r4, #0]
 800731c:	e7ed      	b.n	80072fa <_free_r+0x1e>
 800731e:	461a      	mov	r2, r3
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	b10b      	cbz	r3, 8007328 <_free_r+0x4c>
 8007324:	42a3      	cmp	r3, r4
 8007326:	d9fa      	bls.n	800731e <_free_r+0x42>
 8007328:	6811      	ldr	r1, [r2, #0]
 800732a:	1850      	adds	r0, r2, r1
 800732c:	42a0      	cmp	r0, r4
 800732e:	d10b      	bne.n	8007348 <_free_r+0x6c>
 8007330:	6820      	ldr	r0, [r4, #0]
 8007332:	4401      	add	r1, r0
 8007334:	1850      	adds	r0, r2, r1
 8007336:	4283      	cmp	r3, r0
 8007338:	6011      	str	r1, [r2, #0]
 800733a:	d1e0      	bne.n	80072fe <_free_r+0x22>
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	6053      	str	r3, [r2, #4]
 8007342:	4408      	add	r0, r1
 8007344:	6010      	str	r0, [r2, #0]
 8007346:	e7da      	b.n	80072fe <_free_r+0x22>
 8007348:	d902      	bls.n	8007350 <_free_r+0x74>
 800734a:	230c      	movs	r3, #12
 800734c:	602b      	str	r3, [r5, #0]
 800734e:	e7d6      	b.n	80072fe <_free_r+0x22>
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	1821      	adds	r1, r4, r0
 8007354:	428b      	cmp	r3, r1
 8007356:	bf04      	itt	eq
 8007358:	6819      	ldreq	r1, [r3, #0]
 800735a:	685b      	ldreq	r3, [r3, #4]
 800735c:	6063      	str	r3, [r4, #4]
 800735e:	bf04      	itt	eq
 8007360:	1809      	addeq	r1, r1, r0
 8007362:	6021      	streq	r1, [r4, #0]
 8007364:	6054      	str	r4, [r2, #4]
 8007366:	e7ca      	b.n	80072fe <_free_r+0x22>
 8007368:	bd38      	pop	{r3, r4, r5, pc}
 800736a:	bf00      	nop
 800736c:	2003d5dc 	.word	0x2003d5dc

08007370 <sbrk_aligned>:
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	4e0f      	ldr	r6, [pc, #60]	@ (80073b0 <sbrk_aligned+0x40>)
 8007374:	460c      	mov	r4, r1
 8007376:	6831      	ldr	r1, [r6, #0]
 8007378:	4605      	mov	r5, r0
 800737a:	b911      	cbnz	r1, 8007382 <sbrk_aligned+0x12>
 800737c:	f000 fba4 	bl	8007ac8 <_sbrk_r>
 8007380:	6030      	str	r0, [r6, #0]
 8007382:	4621      	mov	r1, r4
 8007384:	4628      	mov	r0, r5
 8007386:	f000 fb9f 	bl	8007ac8 <_sbrk_r>
 800738a:	1c43      	adds	r3, r0, #1
 800738c:	d103      	bne.n	8007396 <sbrk_aligned+0x26>
 800738e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007392:	4620      	mov	r0, r4
 8007394:	bd70      	pop	{r4, r5, r6, pc}
 8007396:	1cc4      	adds	r4, r0, #3
 8007398:	f024 0403 	bic.w	r4, r4, #3
 800739c:	42a0      	cmp	r0, r4
 800739e:	d0f8      	beq.n	8007392 <sbrk_aligned+0x22>
 80073a0:	1a21      	subs	r1, r4, r0
 80073a2:	4628      	mov	r0, r5
 80073a4:	f000 fb90 	bl	8007ac8 <_sbrk_r>
 80073a8:	3001      	adds	r0, #1
 80073aa:	d1f2      	bne.n	8007392 <sbrk_aligned+0x22>
 80073ac:	e7ef      	b.n	800738e <sbrk_aligned+0x1e>
 80073ae:	bf00      	nop
 80073b0:	2003d5d8 	.word	0x2003d5d8

080073b4 <_malloc_r>:
 80073b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b8:	1ccd      	adds	r5, r1, #3
 80073ba:	f025 0503 	bic.w	r5, r5, #3
 80073be:	3508      	adds	r5, #8
 80073c0:	2d0c      	cmp	r5, #12
 80073c2:	bf38      	it	cc
 80073c4:	250c      	movcc	r5, #12
 80073c6:	2d00      	cmp	r5, #0
 80073c8:	4606      	mov	r6, r0
 80073ca:	db01      	blt.n	80073d0 <_malloc_r+0x1c>
 80073cc:	42a9      	cmp	r1, r5
 80073ce:	d904      	bls.n	80073da <_malloc_r+0x26>
 80073d0:	230c      	movs	r3, #12
 80073d2:	6033      	str	r3, [r6, #0]
 80073d4:	2000      	movs	r0, #0
 80073d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074b0 <_malloc_r+0xfc>
 80073de:	f000 f869 	bl	80074b4 <__malloc_lock>
 80073e2:	f8d8 3000 	ldr.w	r3, [r8]
 80073e6:	461c      	mov	r4, r3
 80073e8:	bb44      	cbnz	r4, 800743c <_malloc_r+0x88>
 80073ea:	4629      	mov	r1, r5
 80073ec:	4630      	mov	r0, r6
 80073ee:	f7ff ffbf 	bl	8007370 <sbrk_aligned>
 80073f2:	1c43      	adds	r3, r0, #1
 80073f4:	4604      	mov	r4, r0
 80073f6:	d158      	bne.n	80074aa <_malloc_r+0xf6>
 80073f8:	f8d8 4000 	ldr.w	r4, [r8]
 80073fc:	4627      	mov	r7, r4
 80073fe:	2f00      	cmp	r7, #0
 8007400:	d143      	bne.n	800748a <_malloc_r+0xd6>
 8007402:	2c00      	cmp	r4, #0
 8007404:	d04b      	beq.n	800749e <_malloc_r+0xea>
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	4639      	mov	r1, r7
 800740a:	4630      	mov	r0, r6
 800740c:	eb04 0903 	add.w	r9, r4, r3
 8007410:	f000 fb5a 	bl	8007ac8 <_sbrk_r>
 8007414:	4581      	cmp	r9, r0
 8007416:	d142      	bne.n	800749e <_malloc_r+0xea>
 8007418:	6821      	ldr	r1, [r4, #0]
 800741a:	1a6d      	subs	r5, r5, r1
 800741c:	4629      	mov	r1, r5
 800741e:	4630      	mov	r0, r6
 8007420:	f7ff ffa6 	bl	8007370 <sbrk_aligned>
 8007424:	3001      	adds	r0, #1
 8007426:	d03a      	beq.n	800749e <_malloc_r+0xea>
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	442b      	add	r3, r5
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	f8d8 3000 	ldr.w	r3, [r8]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	bb62      	cbnz	r2, 8007490 <_malloc_r+0xdc>
 8007436:	f8c8 7000 	str.w	r7, [r8]
 800743a:	e00f      	b.n	800745c <_malloc_r+0xa8>
 800743c:	6822      	ldr	r2, [r4, #0]
 800743e:	1b52      	subs	r2, r2, r5
 8007440:	d420      	bmi.n	8007484 <_malloc_r+0xd0>
 8007442:	2a0b      	cmp	r2, #11
 8007444:	d917      	bls.n	8007476 <_malloc_r+0xc2>
 8007446:	1961      	adds	r1, r4, r5
 8007448:	42a3      	cmp	r3, r4
 800744a:	6025      	str	r5, [r4, #0]
 800744c:	bf18      	it	ne
 800744e:	6059      	strne	r1, [r3, #4]
 8007450:	6863      	ldr	r3, [r4, #4]
 8007452:	bf08      	it	eq
 8007454:	f8c8 1000 	streq.w	r1, [r8]
 8007458:	5162      	str	r2, [r4, r5]
 800745a:	604b      	str	r3, [r1, #4]
 800745c:	4630      	mov	r0, r6
 800745e:	f000 f82f 	bl	80074c0 <__malloc_unlock>
 8007462:	f104 000b 	add.w	r0, r4, #11
 8007466:	1d23      	adds	r3, r4, #4
 8007468:	f020 0007 	bic.w	r0, r0, #7
 800746c:	1ac2      	subs	r2, r0, r3
 800746e:	bf1c      	itt	ne
 8007470:	1a1b      	subne	r3, r3, r0
 8007472:	50a3      	strne	r3, [r4, r2]
 8007474:	e7af      	b.n	80073d6 <_malloc_r+0x22>
 8007476:	6862      	ldr	r2, [r4, #4]
 8007478:	42a3      	cmp	r3, r4
 800747a:	bf0c      	ite	eq
 800747c:	f8c8 2000 	streq.w	r2, [r8]
 8007480:	605a      	strne	r2, [r3, #4]
 8007482:	e7eb      	b.n	800745c <_malloc_r+0xa8>
 8007484:	4623      	mov	r3, r4
 8007486:	6864      	ldr	r4, [r4, #4]
 8007488:	e7ae      	b.n	80073e8 <_malloc_r+0x34>
 800748a:	463c      	mov	r4, r7
 800748c:	687f      	ldr	r7, [r7, #4]
 800748e:	e7b6      	b.n	80073fe <_malloc_r+0x4a>
 8007490:	461a      	mov	r2, r3
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	42a3      	cmp	r3, r4
 8007496:	d1fb      	bne.n	8007490 <_malloc_r+0xdc>
 8007498:	2300      	movs	r3, #0
 800749a:	6053      	str	r3, [r2, #4]
 800749c:	e7de      	b.n	800745c <_malloc_r+0xa8>
 800749e:	230c      	movs	r3, #12
 80074a0:	6033      	str	r3, [r6, #0]
 80074a2:	4630      	mov	r0, r6
 80074a4:	f000 f80c 	bl	80074c0 <__malloc_unlock>
 80074a8:	e794      	b.n	80073d4 <_malloc_r+0x20>
 80074aa:	6005      	str	r5, [r0, #0]
 80074ac:	e7d6      	b.n	800745c <_malloc_r+0xa8>
 80074ae:	bf00      	nop
 80074b0:	2003d5dc 	.word	0x2003d5dc

080074b4 <__malloc_lock>:
 80074b4:	4801      	ldr	r0, [pc, #4]	@ (80074bc <__malloc_lock+0x8>)
 80074b6:	f7ff bf0f 	b.w	80072d8 <__retarget_lock_acquire_recursive>
 80074ba:	bf00      	nop
 80074bc:	2003d5d4 	.word	0x2003d5d4

080074c0 <__malloc_unlock>:
 80074c0:	4801      	ldr	r0, [pc, #4]	@ (80074c8 <__malloc_unlock+0x8>)
 80074c2:	f7ff bf0a 	b.w	80072da <__retarget_lock_release_recursive>
 80074c6:	bf00      	nop
 80074c8:	2003d5d4 	.word	0x2003d5d4

080074cc <__ssputs_r>:
 80074cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d0:	688e      	ldr	r6, [r1, #8]
 80074d2:	461f      	mov	r7, r3
 80074d4:	42be      	cmp	r6, r7
 80074d6:	680b      	ldr	r3, [r1, #0]
 80074d8:	4682      	mov	sl, r0
 80074da:	460c      	mov	r4, r1
 80074dc:	4690      	mov	r8, r2
 80074de:	d82d      	bhi.n	800753c <__ssputs_r+0x70>
 80074e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074e8:	d026      	beq.n	8007538 <__ssputs_r+0x6c>
 80074ea:	6965      	ldr	r5, [r4, #20]
 80074ec:	6909      	ldr	r1, [r1, #16]
 80074ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074f2:	eba3 0901 	sub.w	r9, r3, r1
 80074f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074fa:	1c7b      	adds	r3, r7, #1
 80074fc:	444b      	add	r3, r9
 80074fe:	106d      	asrs	r5, r5, #1
 8007500:	429d      	cmp	r5, r3
 8007502:	bf38      	it	cc
 8007504:	461d      	movcc	r5, r3
 8007506:	0553      	lsls	r3, r2, #21
 8007508:	d527      	bpl.n	800755a <__ssputs_r+0x8e>
 800750a:	4629      	mov	r1, r5
 800750c:	f7ff ff52 	bl	80073b4 <_malloc_r>
 8007510:	4606      	mov	r6, r0
 8007512:	b360      	cbz	r0, 800756e <__ssputs_r+0xa2>
 8007514:	6921      	ldr	r1, [r4, #16]
 8007516:	464a      	mov	r2, r9
 8007518:	f000 fae6 	bl	8007ae8 <memcpy>
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007526:	81a3      	strh	r3, [r4, #12]
 8007528:	6126      	str	r6, [r4, #16]
 800752a:	6165      	str	r5, [r4, #20]
 800752c:	444e      	add	r6, r9
 800752e:	eba5 0509 	sub.w	r5, r5, r9
 8007532:	6026      	str	r6, [r4, #0]
 8007534:	60a5      	str	r5, [r4, #8]
 8007536:	463e      	mov	r6, r7
 8007538:	42be      	cmp	r6, r7
 800753a:	d900      	bls.n	800753e <__ssputs_r+0x72>
 800753c:	463e      	mov	r6, r7
 800753e:	6820      	ldr	r0, [r4, #0]
 8007540:	4632      	mov	r2, r6
 8007542:	4641      	mov	r1, r8
 8007544:	f000 faa6 	bl	8007a94 <memmove>
 8007548:	68a3      	ldr	r3, [r4, #8]
 800754a:	1b9b      	subs	r3, r3, r6
 800754c:	60a3      	str	r3, [r4, #8]
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	4433      	add	r3, r6
 8007552:	6023      	str	r3, [r4, #0]
 8007554:	2000      	movs	r0, #0
 8007556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755a:	462a      	mov	r2, r5
 800755c:	f000 fad2 	bl	8007b04 <_realloc_r>
 8007560:	4606      	mov	r6, r0
 8007562:	2800      	cmp	r0, #0
 8007564:	d1e0      	bne.n	8007528 <__ssputs_r+0x5c>
 8007566:	6921      	ldr	r1, [r4, #16]
 8007568:	4650      	mov	r0, sl
 800756a:	f7ff feb7 	bl	80072dc <_free_r>
 800756e:	230c      	movs	r3, #12
 8007570:	f8ca 3000 	str.w	r3, [sl]
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800757a:	81a3      	strh	r3, [r4, #12]
 800757c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007580:	e7e9      	b.n	8007556 <__ssputs_r+0x8a>
	...

08007584 <_svfiprintf_r>:
 8007584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007588:	4698      	mov	r8, r3
 800758a:	898b      	ldrh	r3, [r1, #12]
 800758c:	061b      	lsls	r3, r3, #24
 800758e:	b09d      	sub	sp, #116	@ 0x74
 8007590:	4607      	mov	r7, r0
 8007592:	460d      	mov	r5, r1
 8007594:	4614      	mov	r4, r2
 8007596:	d510      	bpl.n	80075ba <_svfiprintf_r+0x36>
 8007598:	690b      	ldr	r3, [r1, #16]
 800759a:	b973      	cbnz	r3, 80075ba <_svfiprintf_r+0x36>
 800759c:	2140      	movs	r1, #64	@ 0x40
 800759e:	f7ff ff09 	bl	80073b4 <_malloc_r>
 80075a2:	6028      	str	r0, [r5, #0]
 80075a4:	6128      	str	r0, [r5, #16]
 80075a6:	b930      	cbnz	r0, 80075b6 <_svfiprintf_r+0x32>
 80075a8:	230c      	movs	r3, #12
 80075aa:	603b      	str	r3, [r7, #0]
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075b0:	b01d      	add	sp, #116	@ 0x74
 80075b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b6:	2340      	movs	r3, #64	@ 0x40
 80075b8:	616b      	str	r3, [r5, #20]
 80075ba:	2300      	movs	r3, #0
 80075bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80075be:	2320      	movs	r3, #32
 80075c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80075c8:	2330      	movs	r3, #48	@ 0x30
 80075ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007768 <_svfiprintf_r+0x1e4>
 80075ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075d2:	f04f 0901 	mov.w	r9, #1
 80075d6:	4623      	mov	r3, r4
 80075d8:	469a      	mov	sl, r3
 80075da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075de:	b10a      	cbz	r2, 80075e4 <_svfiprintf_r+0x60>
 80075e0:	2a25      	cmp	r2, #37	@ 0x25
 80075e2:	d1f9      	bne.n	80075d8 <_svfiprintf_r+0x54>
 80075e4:	ebba 0b04 	subs.w	fp, sl, r4
 80075e8:	d00b      	beq.n	8007602 <_svfiprintf_r+0x7e>
 80075ea:	465b      	mov	r3, fp
 80075ec:	4622      	mov	r2, r4
 80075ee:	4629      	mov	r1, r5
 80075f0:	4638      	mov	r0, r7
 80075f2:	f7ff ff6b 	bl	80074cc <__ssputs_r>
 80075f6:	3001      	adds	r0, #1
 80075f8:	f000 80a7 	beq.w	800774a <_svfiprintf_r+0x1c6>
 80075fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075fe:	445a      	add	r2, fp
 8007600:	9209      	str	r2, [sp, #36]	@ 0x24
 8007602:	f89a 3000 	ldrb.w	r3, [sl]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 809f 	beq.w	800774a <_svfiprintf_r+0x1c6>
 800760c:	2300      	movs	r3, #0
 800760e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007616:	f10a 0a01 	add.w	sl, sl, #1
 800761a:	9304      	str	r3, [sp, #16]
 800761c:	9307      	str	r3, [sp, #28]
 800761e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007622:	931a      	str	r3, [sp, #104]	@ 0x68
 8007624:	4654      	mov	r4, sl
 8007626:	2205      	movs	r2, #5
 8007628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800762c:	484e      	ldr	r0, [pc, #312]	@ (8007768 <_svfiprintf_r+0x1e4>)
 800762e:	f7f8 fdef 	bl	8000210 <memchr>
 8007632:	9a04      	ldr	r2, [sp, #16]
 8007634:	b9d8      	cbnz	r0, 800766e <_svfiprintf_r+0xea>
 8007636:	06d0      	lsls	r0, r2, #27
 8007638:	bf44      	itt	mi
 800763a:	2320      	movmi	r3, #32
 800763c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007640:	0711      	lsls	r1, r2, #28
 8007642:	bf44      	itt	mi
 8007644:	232b      	movmi	r3, #43	@ 0x2b
 8007646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800764a:	f89a 3000 	ldrb.w	r3, [sl]
 800764e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007650:	d015      	beq.n	800767e <_svfiprintf_r+0xfa>
 8007652:	9a07      	ldr	r2, [sp, #28]
 8007654:	4654      	mov	r4, sl
 8007656:	2000      	movs	r0, #0
 8007658:	f04f 0c0a 	mov.w	ip, #10
 800765c:	4621      	mov	r1, r4
 800765e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007662:	3b30      	subs	r3, #48	@ 0x30
 8007664:	2b09      	cmp	r3, #9
 8007666:	d94b      	bls.n	8007700 <_svfiprintf_r+0x17c>
 8007668:	b1b0      	cbz	r0, 8007698 <_svfiprintf_r+0x114>
 800766a:	9207      	str	r2, [sp, #28]
 800766c:	e014      	b.n	8007698 <_svfiprintf_r+0x114>
 800766e:	eba0 0308 	sub.w	r3, r0, r8
 8007672:	fa09 f303 	lsl.w	r3, r9, r3
 8007676:	4313      	orrs	r3, r2
 8007678:	9304      	str	r3, [sp, #16]
 800767a:	46a2      	mov	sl, r4
 800767c:	e7d2      	b.n	8007624 <_svfiprintf_r+0xa0>
 800767e:	9b03      	ldr	r3, [sp, #12]
 8007680:	1d19      	adds	r1, r3, #4
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	9103      	str	r1, [sp, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	bfbb      	ittet	lt
 800768a:	425b      	neglt	r3, r3
 800768c:	f042 0202 	orrlt.w	r2, r2, #2
 8007690:	9307      	strge	r3, [sp, #28]
 8007692:	9307      	strlt	r3, [sp, #28]
 8007694:	bfb8      	it	lt
 8007696:	9204      	strlt	r2, [sp, #16]
 8007698:	7823      	ldrb	r3, [r4, #0]
 800769a:	2b2e      	cmp	r3, #46	@ 0x2e
 800769c:	d10a      	bne.n	80076b4 <_svfiprintf_r+0x130>
 800769e:	7863      	ldrb	r3, [r4, #1]
 80076a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80076a2:	d132      	bne.n	800770a <_svfiprintf_r+0x186>
 80076a4:	9b03      	ldr	r3, [sp, #12]
 80076a6:	1d1a      	adds	r2, r3, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	9203      	str	r2, [sp, #12]
 80076ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076b0:	3402      	adds	r4, #2
 80076b2:	9305      	str	r3, [sp, #20]
 80076b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007778 <_svfiprintf_r+0x1f4>
 80076b8:	7821      	ldrb	r1, [r4, #0]
 80076ba:	2203      	movs	r2, #3
 80076bc:	4650      	mov	r0, sl
 80076be:	f7f8 fda7 	bl	8000210 <memchr>
 80076c2:	b138      	cbz	r0, 80076d4 <_svfiprintf_r+0x150>
 80076c4:	9b04      	ldr	r3, [sp, #16]
 80076c6:	eba0 000a 	sub.w	r0, r0, sl
 80076ca:	2240      	movs	r2, #64	@ 0x40
 80076cc:	4082      	lsls	r2, r0
 80076ce:	4313      	orrs	r3, r2
 80076d0:	3401      	adds	r4, #1
 80076d2:	9304      	str	r3, [sp, #16]
 80076d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d8:	4824      	ldr	r0, [pc, #144]	@ (800776c <_svfiprintf_r+0x1e8>)
 80076da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076de:	2206      	movs	r2, #6
 80076e0:	f7f8 fd96 	bl	8000210 <memchr>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d036      	beq.n	8007756 <_svfiprintf_r+0x1d2>
 80076e8:	4b21      	ldr	r3, [pc, #132]	@ (8007770 <_svfiprintf_r+0x1ec>)
 80076ea:	bb1b      	cbnz	r3, 8007734 <_svfiprintf_r+0x1b0>
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	3307      	adds	r3, #7
 80076f0:	f023 0307 	bic.w	r3, r3, #7
 80076f4:	3308      	adds	r3, #8
 80076f6:	9303      	str	r3, [sp, #12]
 80076f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076fa:	4433      	add	r3, r6
 80076fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80076fe:	e76a      	b.n	80075d6 <_svfiprintf_r+0x52>
 8007700:	fb0c 3202 	mla	r2, ip, r2, r3
 8007704:	460c      	mov	r4, r1
 8007706:	2001      	movs	r0, #1
 8007708:	e7a8      	b.n	800765c <_svfiprintf_r+0xd8>
 800770a:	2300      	movs	r3, #0
 800770c:	3401      	adds	r4, #1
 800770e:	9305      	str	r3, [sp, #20]
 8007710:	4619      	mov	r1, r3
 8007712:	f04f 0c0a 	mov.w	ip, #10
 8007716:	4620      	mov	r0, r4
 8007718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800771c:	3a30      	subs	r2, #48	@ 0x30
 800771e:	2a09      	cmp	r2, #9
 8007720:	d903      	bls.n	800772a <_svfiprintf_r+0x1a6>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0c6      	beq.n	80076b4 <_svfiprintf_r+0x130>
 8007726:	9105      	str	r1, [sp, #20]
 8007728:	e7c4      	b.n	80076b4 <_svfiprintf_r+0x130>
 800772a:	fb0c 2101 	mla	r1, ip, r1, r2
 800772e:	4604      	mov	r4, r0
 8007730:	2301      	movs	r3, #1
 8007732:	e7f0      	b.n	8007716 <_svfiprintf_r+0x192>
 8007734:	ab03      	add	r3, sp, #12
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	462a      	mov	r2, r5
 800773a:	4b0e      	ldr	r3, [pc, #56]	@ (8007774 <_svfiprintf_r+0x1f0>)
 800773c:	a904      	add	r1, sp, #16
 800773e:	4638      	mov	r0, r7
 8007740:	f3af 8000 	nop.w
 8007744:	1c42      	adds	r2, r0, #1
 8007746:	4606      	mov	r6, r0
 8007748:	d1d6      	bne.n	80076f8 <_svfiprintf_r+0x174>
 800774a:	89ab      	ldrh	r3, [r5, #12]
 800774c:	065b      	lsls	r3, r3, #25
 800774e:	f53f af2d 	bmi.w	80075ac <_svfiprintf_r+0x28>
 8007752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007754:	e72c      	b.n	80075b0 <_svfiprintf_r+0x2c>
 8007756:	ab03      	add	r3, sp, #12
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	462a      	mov	r2, r5
 800775c:	4b05      	ldr	r3, [pc, #20]	@ (8007774 <_svfiprintf_r+0x1f0>)
 800775e:	a904      	add	r1, sp, #16
 8007760:	4638      	mov	r0, r7
 8007762:	f000 f879 	bl	8007858 <_printf_i>
 8007766:	e7ed      	b.n	8007744 <_svfiprintf_r+0x1c0>
 8007768:	08007e48 	.word	0x08007e48
 800776c:	08007e52 	.word	0x08007e52
 8007770:	00000000 	.word	0x00000000
 8007774:	080074cd 	.word	0x080074cd
 8007778:	08007e4e 	.word	0x08007e4e

0800777c <_printf_common>:
 800777c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007780:	4616      	mov	r6, r2
 8007782:	4698      	mov	r8, r3
 8007784:	688a      	ldr	r2, [r1, #8]
 8007786:	690b      	ldr	r3, [r1, #16]
 8007788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800778c:	4293      	cmp	r3, r2
 800778e:	bfb8      	it	lt
 8007790:	4613      	movlt	r3, r2
 8007792:	6033      	str	r3, [r6, #0]
 8007794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007798:	4607      	mov	r7, r0
 800779a:	460c      	mov	r4, r1
 800779c:	b10a      	cbz	r2, 80077a2 <_printf_common+0x26>
 800779e:	3301      	adds	r3, #1
 80077a0:	6033      	str	r3, [r6, #0]
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	0699      	lsls	r1, r3, #26
 80077a6:	bf42      	ittt	mi
 80077a8:	6833      	ldrmi	r3, [r6, #0]
 80077aa:	3302      	addmi	r3, #2
 80077ac:	6033      	strmi	r3, [r6, #0]
 80077ae:	6825      	ldr	r5, [r4, #0]
 80077b0:	f015 0506 	ands.w	r5, r5, #6
 80077b4:	d106      	bne.n	80077c4 <_printf_common+0x48>
 80077b6:	f104 0a19 	add.w	sl, r4, #25
 80077ba:	68e3      	ldr	r3, [r4, #12]
 80077bc:	6832      	ldr	r2, [r6, #0]
 80077be:	1a9b      	subs	r3, r3, r2
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dc26      	bgt.n	8007812 <_printf_common+0x96>
 80077c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077c8:	6822      	ldr	r2, [r4, #0]
 80077ca:	3b00      	subs	r3, #0
 80077cc:	bf18      	it	ne
 80077ce:	2301      	movne	r3, #1
 80077d0:	0692      	lsls	r2, r2, #26
 80077d2:	d42b      	bmi.n	800782c <_printf_common+0xb0>
 80077d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077d8:	4641      	mov	r1, r8
 80077da:	4638      	mov	r0, r7
 80077dc:	47c8      	blx	r9
 80077de:	3001      	adds	r0, #1
 80077e0:	d01e      	beq.n	8007820 <_printf_common+0xa4>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	6922      	ldr	r2, [r4, #16]
 80077e6:	f003 0306 	and.w	r3, r3, #6
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	bf02      	ittt	eq
 80077ee:	68e5      	ldreq	r5, [r4, #12]
 80077f0:	6833      	ldreq	r3, [r6, #0]
 80077f2:	1aed      	subeq	r5, r5, r3
 80077f4:	68a3      	ldr	r3, [r4, #8]
 80077f6:	bf0c      	ite	eq
 80077f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077fc:	2500      	movne	r5, #0
 80077fe:	4293      	cmp	r3, r2
 8007800:	bfc4      	itt	gt
 8007802:	1a9b      	subgt	r3, r3, r2
 8007804:	18ed      	addgt	r5, r5, r3
 8007806:	2600      	movs	r6, #0
 8007808:	341a      	adds	r4, #26
 800780a:	42b5      	cmp	r5, r6
 800780c:	d11a      	bne.n	8007844 <_printf_common+0xc8>
 800780e:	2000      	movs	r0, #0
 8007810:	e008      	b.n	8007824 <_printf_common+0xa8>
 8007812:	2301      	movs	r3, #1
 8007814:	4652      	mov	r2, sl
 8007816:	4641      	mov	r1, r8
 8007818:	4638      	mov	r0, r7
 800781a:	47c8      	blx	r9
 800781c:	3001      	adds	r0, #1
 800781e:	d103      	bne.n	8007828 <_printf_common+0xac>
 8007820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007828:	3501      	adds	r5, #1
 800782a:	e7c6      	b.n	80077ba <_printf_common+0x3e>
 800782c:	18e1      	adds	r1, r4, r3
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	2030      	movs	r0, #48	@ 0x30
 8007832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007836:	4422      	add	r2, r4
 8007838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800783c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007840:	3302      	adds	r3, #2
 8007842:	e7c7      	b.n	80077d4 <_printf_common+0x58>
 8007844:	2301      	movs	r3, #1
 8007846:	4622      	mov	r2, r4
 8007848:	4641      	mov	r1, r8
 800784a:	4638      	mov	r0, r7
 800784c:	47c8      	blx	r9
 800784e:	3001      	adds	r0, #1
 8007850:	d0e6      	beq.n	8007820 <_printf_common+0xa4>
 8007852:	3601      	adds	r6, #1
 8007854:	e7d9      	b.n	800780a <_printf_common+0x8e>
	...

08007858 <_printf_i>:
 8007858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800785c:	7e0f      	ldrb	r7, [r1, #24]
 800785e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007860:	2f78      	cmp	r7, #120	@ 0x78
 8007862:	4691      	mov	r9, r2
 8007864:	4680      	mov	r8, r0
 8007866:	460c      	mov	r4, r1
 8007868:	469a      	mov	sl, r3
 800786a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800786e:	d807      	bhi.n	8007880 <_printf_i+0x28>
 8007870:	2f62      	cmp	r7, #98	@ 0x62
 8007872:	d80a      	bhi.n	800788a <_printf_i+0x32>
 8007874:	2f00      	cmp	r7, #0
 8007876:	f000 80d1 	beq.w	8007a1c <_printf_i+0x1c4>
 800787a:	2f58      	cmp	r7, #88	@ 0x58
 800787c:	f000 80b8 	beq.w	80079f0 <_printf_i+0x198>
 8007880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007888:	e03a      	b.n	8007900 <_printf_i+0xa8>
 800788a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800788e:	2b15      	cmp	r3, #21
 8007890:	d8f6      	bhi.n	8007880 <_printf_i+0x28>
 8007892:	a101      	add	r1, pc, #4	@ (adr r1, 8007898 <_printf_i+0x40>)
 8007894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007898:	080078f1 	.word	0x080078f1
 800789c:	08007905 	.word	0x08007905
 80078a0:	08007881 	.word	0x08007881
 80078a4:	08007881 	.word	0x08007881
 80078a8:	08007881 	.word	0x08007881
 80078ac:	08007881 	.word	0x08007881
 80078b0:	08007905 	.word	0x08007905
 80078b4:	08007881 	.word	0x08007881
 80078b8:	08007881 	.word	0x08007881
 80078bc:	08007881 	.word	0x08007881
 80078c0:	08007881 	.word	0x08007881
 80078c4:	08007a03 	.word	0x08007a03
 80078c8:	0800792f 	.word	0x0800792f
 80078cc:	080079bd 	.word	0x080079bd
 80078d0:	08007881 	.word	0x08007881
 80078d4:	08007881 	.word	0x08007881
 80078d8:	08007a25 	.word	0x08007a25
 80078dc:	08007881 	.word	0x08007881
 80078e0:	0800792f 	.word	0x0800792f
 80078e4:	08007881 	.word	0x08007881
 80078e8:	08007881 	.word	0x08007881
 80078ec:	080079c5 	.word	0x080079c5
 80078f0:	6833      	ldr	r3, [r6, #0]
 80078f2:	1d1a      	adds	r2, r3, #4
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6032      	str	r2, [r6, #0]
 80078f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007900:	2301      	movs	r3, #1
 8007902:	e09c      	b.n	8007a3e <_printf_i+0x1e6>
 8007904:	6833      	ldr	r3, [r6, #0]
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	1d19      	adds	r1, r3, #4
 800790a:	6031      	str	r1, [r6, #0]
 800790c:	0606      	lsls	r6, r0, #24
 800790e:	d501      	bpl.n	8007914 <_printf_i+0xbc>
 8007910:	681d      	ldr	r5, [r3, #0]
 8007912:	e003      	b.n	800791c <_printf_i+0xc4>
 8007914:	0645      	lsls	r5, r0, #25
 8007916:	d5fb      	bpl.n	8007910 <_printf_i+0xb8>
 8007918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800791c:	2d00      	cmp	r5, #0
 800791e:	da03      	bge.n	8007928 <_printf_i+0xd0>
 8007920:	232d      	movs	r3, #45	@ 0x2d
 8007922:	426d      	negs	r5, r5
 8007924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007928:	4858      	ldr	r0, [pc, #352]	@ (8007a8c <_printf_i+0x234>)
 800792a:	230a      	movs	r3, #10
 800792c:	e011      	b.n	8007952 <_printf_i+0xfa>
 800792e:	6821      	ldr	r1, [r4, #0]
 8007930:	6833      	ldr	r3, [r6, #0]
 8007932:	0608      	lsls	r0, r1, #24
 8007934:	f853 5b04 	ldr.w	r5, [r3], #4
 8007938:	d402      	bmi.n	8007940 <_printf_i+0xe8>
 800793a:	0649      	lsls	r1, r1, #25
 800793c:	bf48      	it	mi
 800793e:	b2ad      	uxthmi	r5, r5
 8007940:	2f6f      	cmp	r7, #111	@ 0x6f
 8007942:	4852      	ldr	r0, [pc, #328]	@ (8007a8c <_printf_i+0x234>)
 8007944:	6033      	str	r3, [r6, #0]
 8007946:	bf14      	ite	ne
 8007948:	230a      	movne	r3, #10
 800794a:	2308      	moveq	r3, #8
 800794c:	2100      	movs	r1, #0
 800794e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007952:	6866      	ldr	r6, [r4, #4]
 8007954:	60a6      	str	r6, [r4, #8]
 8007956:	2e00      	cmp	r6, #0
 8007958:	db05      	blt.n	8007966 <_printf_i+0x10e>
 800795a:	6821      	ldr	r1, [r4, #0]
 800795c:	432e      	orrs	r6, r5
 800795e:	f021 0104 	bic.w	r1, r1, #4
 8007962:	6021      	str	r1, [r4, #0]
 8007964:	d04b      	beq.n	80079fe <_printf_i+0x1a6>
 8007966:	4616      	mov	r6, r2
 8007968:	fbb5 f1f3 	udiv	r1, r5, r3
 800796c:	fb03 5711 	mls	r7, r3, r1, r5
 8007970:	5dc7      	ldrb	r7, [r0, r7]
 8007972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007976:	462f      	mov	r7, r5
 8007978:	42bb      	cmp	r3, r7
 800797a:	460d      	mov	r5, r1
 800797c:	d9f4      	bls.n	8007968 <_printf_i+0x110>
 800797e:	2b08      	cmp	r3, #8
 8007980:	d10b      	bne.n	800799a <_printf_i+0x142>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	07df      	lsls	r7, r3, #31
 8007986:	d508      	bpl.n	800799a <_printf_i+0x142>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	6861      	ldr	r1, [r4, #4]
 800798c:	4299      	cmp	r1, r3
 800798e:	bfde      	ittt	le
 8007990:	2330      	movle	r3, #48	@ 0x30
 8007992:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007996:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800799a:	1b92      	subs	r2, r2, r6
 800799c:	6122      	str	r2, [r4, #16]
 800799e:	f8cd a000 	str.w	sl, [sp]
 80079a2:	464b      	mov	r3, r9
 80079a4:	aa03      	add	r2, sp, #12
 80079a6:	4621      	mov	r1, r4
 80079a8:	4640      	mov	r0, r8
 80079aa:	f7ff fee7 	bl	800777c <_printf_common>
 80079ae:	3001      	adds	r0, #1
 80079b0:	d14a      	bne.n	8007a48 <_printf_i+0x1f0>
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079b6:	b004      	add	sp, #16
 80079b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	f043 0320 	orr.w	r3, r3, #32
 80079c2:	6023      	str	r3, [r4, #0]
 80079c4:	4832      	ldr	r0, [pc, #200]	@ (8007a90 <_printf_i+0x238>)
 80079c6:	2778      	movs	r7, #120	@ 0x78
 80079c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	6831      	ldr	r1, [r6, #0]
 80079d0:	061f      	lsls	r7, r3, #24
 80079d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80079d6:	d402      	bmi.n	80079de <_printf_i+0x186>
 80079d8:	065f      	lsls	r7, r3, #25
 80079da:	bf48      	it	mi
 80079dc:	b2ad      	uxthmi	r5, r5
 80079de:	6031      	str	r1, [r6, #0]
 80079e0:	07d9      	lsls	r1, r3, #31
 80079e2:	bf44      	itt	mi
 80079e4:	f043 0320 	orrmi.w	r3, r3, #32
 80079e8:	6023      	strmi	r3, [r4, #0]
 80079ea:	b11d      	cbz	r5, 80079f4 <_printf_i+0x19c>
 80079ec:	2310      	movs	r3, #16
 80079ee:	e7ad      	b.n	800794c <_printf_i+0xf4>
 80079f0:	4826      	ldr	r0, [pc, #152]	@ (8007a8c <_printf_i+0x234>)
 80079f2:	e7e9      	b.n	80079c8 <_printf_i+0x170>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	f023 0320 	bic.w	r3, r3, #32
 80079fa:	6023      	str	r3, [r4, #0]
 80079fc:	e7f6      	b.n	80079ec <_printf_i+0x194>
 80079fe:	4616      	mov	r6, r2
 8007a00:	e7bd      	b.n	800797e <_printf_i+0x126>
 8007a02:	6833      	ldr	r3, [r6, #0]
 8007a04:	6825      	ldr	r5, [r4, #0]
 8007a06:	6961      	ldr	r1, [r4, #20]
 8007a08:	1d18      	adds	r0, r3, #4
 8007a0a:	6030      	str	r0, [r6, #0]
 8007a0c:	062e      	lsls	r6, r5, #24
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	d501      	bpl.n	8007a16 <_printf_i+0x1be>
 8007a12:	6019      	str	r1, [r3, #0]
 8007a14:	e002      	b.n	8007a1c <_printf_i+0x1c4>
 8007a16:	0668      	lsls	r0, r5, #25
 8007a18:	d5fb      	bpl.n	8007a12 <_printf_i+0x1ba>
 8007a1a:	8019      	strh	r1, [r3, #0]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	4616      	mov	r6, r2
 8007a22:	e7bc      	b.n	800799e <_printf_i+0x146>
 8007a24:	6833      	ldr	r3, [r6, #0]
 8007a26:	1d1a      	adds	r2, r3, #4
 8007a28:	6032      	str	r2, [r6, #0]
 8007a2a:	681e      	ldr	r6, [r3, #0]
 8007a2c:	6862      	ldr	r2, [r4, #4]
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4630      	mov	r0, r6
 8007a32:	f7f8 fbed 	bl	8000210 <memchr>
 8007a36:	b108      	cbz	r0, 8007a3c <_printf_i+0x1e4>
 8007a38:	1b80      	subs	r0, r0, r6
 8007a3a:	6060      	str	r0, [r4, #4]
 8007a3c:	6863      	ldr	r3, [r4, #4]
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	2300      	movs	r3, #0
 8007a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a46:	e7aa      	b.n	800799e <_printf_i+0x146>
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	4632      	mov	r2, r6
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	4640      	mov	r0, r8
 8007a50:	47d0      	blx	sl
 8007a52:	3001      	adds	r0, #1
 8007a54:	d0ad      	beq.n	80079b2 <_printf_i+0x15a>
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	079b      	lsls	r3, r3, #30
 8007a5a:	d413      	bmi.n	8007a84 <_printf_i+0x22c>
 8007a5c:	68e0      	ldr	r0, [r4, #12]
 8007a5e:	9b03      	ldr	r3, [sp, #12]
 8007a60:	4298      	cmp	r0, r3
 8007a62:	bfb8      	it	lt
 8007a64:	4618      	movlt	r0, r3
 8007a66:	e7a6      	b.n	80079b6 <_printf_i+0x15e>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	4632      	mov	r2, r6
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	4640      	mov	r0, r8
 8007a70:	47d0      	blx	sl
 8007a72:	3001      	adds	r0, #1
 8007a74:	d09d      	beq.n	80079b2 <_printf_i+0x15a>
 8007a76:	3501      	adds	r5, #1
 8007a78:	68e3      	ldr	r3, [r4, #12]
 8007a7a:	9903      	ldr	r1, [sp, #12]
 8007a7c:	1a5b      	subs	r3, r3, r1
 8007a7e:	42ab      	cmp	r3, r5
 8007a80:	dcf2      	bgt.n	8007a68 <_printf_i+0x210>
 8007a82:	e7eb      	b.n	8007a5c <_printf_i+0x204>
 8007a84:	2500      	movs	r5, #0
 8007a86:	f104 0619 	add.w	r6, r4, #25
 8007a8a:	e7f5      	b.n	8007a78 <_printf_i+0x220>
 8007a8c:	08007e59 	.word	0x08007e59
 8007a90:	08007e6a 	.word	0x08007e6a

08007a94 <memmove>:
 8007a94:	4288      	cmp	r0, r1
 8007a96:	b510      	push	{r4, lr}
 8007a98:	eb01 0402 	add.w	r4, r1, r2
 8007a9c:	d902      	bls.n	8007aa4 <memmove+0x10>
 8007a9e:	4284      	cmp	r4, r0
 8007aa0:	4623      	mov	r3, r4
 8007aa2:	d807      	bhi.n	8007ab4 <memmove+0x20>
 8007aa4:	1e43      	subs	r3, r0, #1
 8007aa6:	42a1      	cmp	r1, r4
 8007aa8:	d008      	beq.n	8007abc <memmove+0x28>
 8007aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ab2:	e7f8      	b.n	8007aa6 <memmove+0x12>
 8007ab4:	4402      	add	r2, r0
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	428a      	cmp	r2, r1
 8007aba:	d100      	bne.n	8007abe <memmove+0x2a>
 8007abc:	bd10      	pop	{r4, pc}
 8007abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ac6:	e7f7      	b.n	8007ab8 <memmove+0x24>

08007ac8 <_sbrk_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4d06      	ldr	r5, [pc, #24]	@ (8007ae4 <_sbrk_r+0x1c>)
 8007acc:	2300      	movs	r3, #0
 8007ace:	4604      	mov	r4, r0
 8007ad0:	4608      	mov	r0, r1
 8007ad2:	602b      	str	r3, [r5, #0]
 8007ad4:	f7fa fc56 	bl	8002384 <_sbrk>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_sbrk_r+0x1a>
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_sbrk_r+0x1a>
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	2003d5d0 	.word	0x2003d5d0

08007ae8 <memcpy>:
 8007ae8:	440a      	add	r2, r1
 8007aea:	4291      	cmp	r1, r2
 8007aec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007af0:	d100      	bne.n	8007af4 <memcpy+0xc>
 8007af2:	4770      	bx	lr
 8007af4:	b510      	push	{r4, lr}
 8007af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007afe:	4291      	cmp	r1, r2
 8007b00:	d1f9      	bne.n	8007af6 <memcpy+0xe>
 8007b02:	bd10      	pop	{r4, pc}

08007b04 <_realloc_r>:
 8007b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b08:	4607      	mov	r7, r0
 8007b0a:	4614      	mov	r4, r2
 8007b0c:	460d      	mov	r5, r1
 8007b0e:	b921      	cbnz	r1, 8007b1a <_realloc_r+0x16>
 8007b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b14:	4611      	mov	r1, r2
 8007b16:	f7ff bc4d 	b.w	80073b4 <_malloc_r>
 8007b1a:	b92a      	cbnz	r2, 8007b28 <_realloc_r+0x24>
 8007b1c:	f7ff fbde 	bl	80072dc <_free_r>
 8007b20:	4625      	mov	r5, r4
 8007b22:	4628      	mov	r0, r5
 8007b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b28:	f000 f81a 	bl	8007b60 <_malloc_usable_size_r>
 8007b2c:	4284      	cmp	r4, r0
 8007b2e:	4606      	mov	r6, r0
 8007b30:	d802      	bhi.n	8007b38 <_realloc_r+0x34>
 8007b32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b36:	d8f4      	bhi.n	8007b22 <_realloc_r+0x1e>
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	f7ff fc3a 	bl	80073b4 <_malloc_r>
 8007b40:	4680      	mov	r8, r0
 8007b42:	b908      	cbnz	r0, 8007b48 <_realloc_r+0x44>
 8007b44:	4645      	mov	r5, r8
 8007b46:	e7ec      	b.n	8007b22 <_realloc_r+0x1e>
 8007b48:	42b4      	cmp	r4, r6
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	bf28      	it	cs
 8007b50:	4632      	movcs	r2, r6
 8007b52:	f7ff ffc9 	bl	8007ae8 <memcpy>
 8007b56:	4629      	mov	r1, r5
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7ff fbbf 	bl	80072dc <_free_r>
 8007b5e:	e7f1      	b.n	8007b44 <_realloc_r+0x40>

08007b60 <_malloc_usable_size_r>:
 8007b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b64:	1f18      	subs	r0, r3, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bfbc      	itt	lt
 8007b6a:	580b      	ldrlt	r3, [r1, r0]
 8007b6c:	18c0      	addlt	r0, r0, r3
 8007b6e:	4770      	bx	lr

08007b70 <_init>:
 8007b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b72:	bf00      	nop
 8007b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b76:	bc08      	pop	{r3}
 8007b78:	469e      	mov	lr, r3
 8007b7a:	4770      	bx	lr

08007b7c <_fini>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	bf00      	nop
 8007b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b82:	bc08      	pop	{r3}
 8007b84:	469e      	mov	lr, r3
 8007b86:	4770      	bx	lr
