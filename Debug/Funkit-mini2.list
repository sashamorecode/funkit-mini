
Funkit-mini2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c260  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  0800c430  0800c430  0000d430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccb8  0800ccb8  0000e23c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ccb8  0800ccb8  0000dcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccc0  0800ccc0  0000e23c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccc0  0800ccc0  0000dcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ccc4  0800ccc4  0000dcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000023c  20000000  0800ccc8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003ddc4  2000023c  0800cf04  0000e23c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003e000  0800cf04  0000f000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e23c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014365  00000000  00000000  0000e26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003305  00000000  00000000  000225cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  000258d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d6b  00000000  00000000  00026a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d23  00000000  00000000  000277cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a02e  00000000  00000000  0002b4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3e4f  00000000  00000000  0004551c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  0013936b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b70  00000000  00000000  00139428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013ef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000ccd  00000000  00000000  0013f000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0013fccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000023c 	.word	0x2000023c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c418 	.word	0x0800c418

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000240 	.word	0x20000240
 800020c:	0800c418 	.word	0x0800c418

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <EchoInit>:
extern volatile int delayPtr;

static char strBuff[20] = { "1" };
echoState eState = { 5000, 0., 0.5, 2000 };

void EchoInit(I2C_LCD_HandleTypeDef *lcdHandler, int audioFreq) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	memset(delayLeft, 0, sizeof(delayLeft));
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <EchoInit+0x34>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	480a      	ldr	r0, [pc, #40]	@ (8000fec <EchoInit+0x38>)
 8000fc4:	f008 f8e3 	bl	800918e <memset>
	memset(delayRight, 0, sizeof(delayRight));
 8000fc8:	4a07      	ldr	r2, [pc, #28]	@ (8000fe8 <EchoInit+0x34>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4808      	ldr	r0, [pc, #32]	@ (8000ff0 <EchoInit+0x3c>)
 8000fce:	f008 f8de 	bl	800918e <memset>
	lcdPtr = lcdHandler;
 8000fd2:	4a08      	ldr	r2, [pc, #32]	@ (8000ff4 <EchoInit+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6013      	str	r3, [r2, #0]
	initFilter(&filter, audioFreq);
 8000fd8:	6839      	ldr	r1, [r7, #0]
 8000fda:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <EchoInit+0x44>)
 8000fdc:	f000 fb1a 	bl	8001614 <initFilter>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	0001d4c0 	.word	0x0001d4c0
 8000fec:	2000029c 	.word	0x2000029c
 8000ff0:	2001d75c 	.word	0x2001d75c
 8000ff4:	20000258 	.word	0x20000258
 8000ff8:	2000025c 	.word	0x2000025c

08000ffc <doEcho>:

void doEcho(int b) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08e      	sub	sp, #56	@ 0x38
 8001000:	af02      	add	r7, sp, #8
 8001002:	6078      	str	r0, [r7, #4]

	int startBuf = b * BUF_SAMPLES / 2;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	029b      	lsls	r3, r3, #10
 8001008:	623b      	str	r3, [r7, #32]
	int endBuf = startBuf + BUF_SAMPLES / 2;
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001010:	61fb      	str	r3, [r7, #28]

	int i = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int pos = startBuf; pos < endBuf; pos += 4) {
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800101a:	e030      	b.n	800107e <doEcho+0x82>
		srcLeft[i] = ((rxBuf[pos] << 16) | rxBuf[pos + 1]);
 800101c:	4a88      	ldr	r2, [pc, #544]	@ (8001240 <doEcho+0x244>)
 800101e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001024:	041b      	lsls	r3, r3, #16
 8001026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001028:	3201      	adds	r2, #1
 800102a:	4985      	ldr	r1, [pc, #532]	@ (8001240 <doEcho+0x244>)
 800102c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001030:	4313      	orrs	r3, r2
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103a:	4a82      	ldr	r2, [pc, #520]	@ (8001244 <doEcho+0x248>)
 800103c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	edc3 7a00 	vstr	s15, [r3]
		srcRight[i] = ((rxBuf[pos + 2] << 16) | rxBuf[pos + 3]);
 8001046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001048:	3302      	adds	r3, #2
 800104a:	4a7d      	ldr	r2, [pc, #500]	@ (8001240 <doEcho+0x244>)
 800104c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001054:	3203      	adds	r2, #3
 8001056:	497a      	ldr	r1, [pc, #488]	@ (8001240 <doEcho+0x244>)
 8001058:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800105c:	4313      	orrs	r3, r2
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	4a78      	ldr	r2, [pc, #480]	@ (8001248 <doEcho+0x24c>)
 8001068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	edc3 7a00 	vstr	s15, [r3]
		i++;
 8001072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001074:	3301      	adds	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int pos = startBuf; pos < endBuf; pos += 4) {
 8001078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800107a:	3304      	adds	r3, #4
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800107e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	429a      	cmp	r2, r3
 8001084:	dbca      	blt.n	800101c <doEcho+0x20>
	}

	i = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int pos = startBuf; pos < endBuf; pos += 4) {
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
 800108e:	e0cd      	b.n	800122c <doEcho+0x230>

		int32_t lval = srcLeft[i]
 8001090:	4a6c      	ldr	r2, [pc, #432]	@ (8001244 <doEcho+0x248>)
 8001092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	ed93 7a00 	vldr	s14, [r3]
				+ delayLeft[delayPtr] * eState.mix * eState.feedback;
 800109c:	4b6b      	ldr	r3, [pc, #428]	@ (800124c <doEcho+0x250>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a6b      	ldr	r2, [pc, #428]	@ (8001250 <doEcho+0x254>)
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	edd3 6a00 	vldr	s13, [r3]
 80010aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001254 <doEcho+0x258>)
 80010ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80010b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010b4:	4b67      	ldr	r3, [pc, #412]	@ (8001254 <doEcho+0x258>)
 80010b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010be:	ee77 7a27 	vadd.f32	s15, s14, s15
		int32_t lval = srcLeft[i]
 80010c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c6:	ee17 3a90 	vmov	r3, s15
 80010ca:	61bb      	str	r3, [r7, #24]
		int32_t rval = srcRight[i]
 80010cc:	4a5e      	ldr	r2, [pc, #376]	@ (8001248 <doEcho+0x24c>)
 80010ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	ed93 7a00 	vldr	s14, [r3]
				+ delayRight[delayPtr] * eState.mix * eState.feedback;
 80010d8:	4b5c      	ldr	r3, [pc, #368]	@ (800124c <doEcho+0x250>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a5e      	ldr	r2, [pc, #376]	@ (8001258 <doEcho+0x25c>)
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	edd3 6a00 	vldr	s13, [r3]
 80010e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001254 <doEcho+0x258>)
 80010e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80010ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010f0:	4b58      	ldr	r3, [pc, #352]	@ (8001254 <doEcho+0x258>)
 80010f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80010f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
		int32_t rval = srcRight[i]
 80010fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001102:	ee17 3a90 	vmov	r3, s15
 8001106:	617b      	str	r3, [r7, #20]

		delayLeft[delayPtr] = srcLeft[i]
 8001108:	4a4e      	ldr	r2, [pc, #312]	@ (8001244 <doEcho+0x248>)
 800110a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	ed93 7a00 	vldr	s14, [r3]
				+ delayLeft[delayPtr] * eState.feedback;
 8001114:	4b4d      	ldr	r3, [pc, #308]	@ (800124c <doEcho+0x250>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a4d      	ldr	r2, [pc, #308]	@ (8001250 <doEcho+0x254>)
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	edd3 6a00 	vldr	s13, [r3]
 8001122:	4b4c      	ldr	r3, [pc, #304]	@ (8001254 <doEcho+0x258>)
 8001124:	edd3 7a02 	vldr	s15, [r3, #8]
 8001128:	ee66 7aa7 	vmul.f32	s15, s13, s15
		delayLeft[delayPtr] = srcLeft[i]
 800112c:	4b47      	ldr	r3, [pc, #284]	@ (800124c <doEcho+0x250>)
 800112e:	681b      	ldr	r3, [r3, #0]
				+ delayLeft[delayPtr] * eState.feedback;
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
		delayLeft[delayPtr] = srcLeft[i]
 8001134:	4a46      	ldr	r2, [pc, #280]	@ (8001250 <doEcho+0x254>)
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	edc3 7a00 	vstr	s15, [r3]
		delayRight[delayPtr] = srcRight[i]
 800113e:	4a42      	ldr	r2, [pc, #264]	@ (8001248 <doEcho+0x24c>)
 8001140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	ed93 7a00 	vldr	s14, [r3]
				+ delayRight[delayPtr] * eState.feedback;
 800114a:	4b40      	ldr	r3, [pc, #256]	@ (800124c <doEcho+0x250>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a42      	ldr	r2, [pc, #264]	@ (8001258 <doEcho+0x25c>)
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	edd3 6a00 	vldr	s13, [r3]
 8001158:	4b3e      	ldr	r3, [pc, #248]	@ (8001254 <doEcho+0x258>)
 800115a:	edd3 7a02 	vldr	s15, [r3, #8]
 800115e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		delayRight[delayPtr] = srcRight[i]
 8001162:	4b3a      	ldr	r3, [pc, #232]	@ (800124c <doEcho+0x250>)
 8001164:	681b      	ldr	r3, [r3, #0]
				+ delayRight[delayPtr] * eState.feedback;
 8001166:	ee77 7a27 	vadd.f32	s15, s14, s15
		delayRight[delayPtr] = srcRight[i]
 800116a:	4a3b      	ldr	r2, [pc, #236]	@ (8001258 <doEcho+0x25c>)
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	edc3 7a00 	vstr	s15, [r3]

		float32_t lFilter, rFilter;
		if (eState.filterFreq < 19000) {
 8001174:	4b37      	ldr	r3, [pc, #220]	@ (8001254 <doEcho+0x258>)
 8001176:	edd3 7a03 	vldr	s15, [r3, #12]
 800117a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800125c <doEcho+0x260>
 800117e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	d522      	bpl.n	80011ce <doEcho+0x1d2>
			doFilter(&filter, &delayLeft[delayPtr], &delayRight[delayPtr],
 8001188:	4b30      	ldr	r3, [pc, #192]	@ (800124c <doEcho+0x250>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4a30      	ldr	r2, [pc, #192]	@ (8001250 <doEcho+0x254>)
 8001190:	1899      	adds	r1, r3, r2
 8001192:	4b2e      	ldr	r3, [pc, #184]	@ (800124c <doEcho+0x250>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4a2f      	ldr	r2, [pc, #188]	@ (8001258 <doEcho+0x25c>)
 800119a:	441a      	add	r2, r3
 800119c:	f107 0010 	add.w	r0, r7, #16
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	4603      	mov	r3, r0
 80011ac:	482c      	ldr	r0, [pc, #176]	@ (8001260 <doEcho+0x264>)
 80011ae:	f000 fa5f 	bl	8001670 <doFilter>
					&lFilter, &rFilter, 1);
			delayLeft[delayPtr] = lFilter;
 80011b2:	4b26      	ldr	r3, [pc, #152]	@ (800124c <doEcho+0x250>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4925      	ldr	r1, [pc, #148]	@ (8001250 <doEcho+0x254>)
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	601a      	str	r2, [r3, #0]
			delayRight[delayPtr] = rFilter;
 80011c0:	4b22      	ldr	r3, [pc, #136]	@ (800124c <doEcho+0x250>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4924      	ldr	r1, [pc, #144]	@ (8001258 <doEcho+0x25c>)
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	601a      	str	r2, [r3, #0]
		}

		delayPtr = (delayPtr + 1) % eState.delayLen;
 80011ce:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <doEcho+0x250>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001254 <doEcho+0x258>)
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80011dc:	fb01 f202 	mul.w	r2, r1, r2
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	4a1a      	ldr	r2, [pc, #104]	@ (800124c <doEcho+0x250>)
 80011e4:	6013      	str	r3, [r2, #0]
		txBuf[pos] = (lval >> 16) & 0xFFFF;
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	0c1b      	lsrs	r3, r3, #16
 80011ea:	b299      	uxth	r1, r3
 80011ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001264 <doEcho+0x268>)
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		txBuf[pos + 1] = lval & 0xFFFF;
 80011f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f6:	3301      	adds	r3, #1
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	b291      	uxth	r1, r2
 80011fc:	4a19      	ldr	r2, [pc, #100]	@ (8001264 <doEcho+0x268>)
 80011fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		txBuf[pos + 2] = (rval >> 16) & 0xFFFF;
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	0c1a      	lsrs	r2, r3, #16
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	3302      	adds	r3, #2
 800120a:	b291      	uxth	r1, r2
 800120c:	4a15      	ldr	r2, [pc, #84]	@ (8001264 <doEcho+0x268>)
 800120e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		txBuf[pos + 3] = rval & 0xFFFF;
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	3303      	adds	r3, #3
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	b291      	uxth	r1, r2
 800121a:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <doEcho+0x268>)
 800121c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		i++;
 8001220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001222:	3301      	adds	r3, #1
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int pos = startBuf; pos < endBuf; pos += 4) {
 8001226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001228:	3304      	adds	r3, #4
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
 800122c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	429a      	cmp	r2, r3
 8001232:	f6ff af2d 	blt.w	8001090 <doEcho+0x94>
	}

}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	@ 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2003aea0 	.word	0x2003aea0
 8001244:	2003cea0 	.word	0x2003cea0
 8001248:	2003d2a0 	.word	0x2003d2a0
 800124c:	2003dea0 	.word	0x2003dea0
 8001250:	2000029c 	.word	0x2000029c
 8001254:	20000014 	.word	0x20000014
 8001258:	2001d75c 	.word	0x2001d75c
 800125c:	46947000 	.word	0x46947000
 8001260:	2000025c 	.word	0x2000025c
 8001264:	2003bea0 	.word	0x2003bea0

08001268 <EchoUpdateState>:

void EchoUpdateState(masterState *mState) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	int encoder1Switch = (HAL_GPIO_ReadPin(EncoderSW_GPIO_Port, EncoderSW_Pin)
 8001270:	2101      	movs	r1, #1
 8001272:	4876      	ldr	r0, [pc, #472]	@ (800144c <EchoUpdateState+0x1e4>)
 8001274:	f003 fb82 	bl	800497c <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
			== GPIO_PIN_RESET);
 800127a:	2b00      	cmp	r3, #0
 800127c:	bf0c      	ite	eq
 800127e:	2301      	moveq	r3, #1
 8001280:	2300      	movne	r3, #0
 8001282:	b2db      	uxtb	r3, r3
	int encoder1Switch = (HAL_GPIO_ReadPin(EncoderSW_GPIO_Port, EncoderSW_Pin)
 8001284:	613b      	str	r3, [r7, #16]
	int encoder2Switch = (HAL_GPIO_ReadPin(EncoderSW2_GPIO_Port, EncoderSW2_Pin)
 8001286:	2102      	movs	r1, #2
 8001288:	4871      	ldr	r0, [pc, #452]	@ (8001450 <EchoUpdateState+0x1e8>)
 800128a:	f003 fb77 	bl	800497c <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
			== GPIO_PIN_RESET);
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
	int encoder2Switch = (HAL_GPIO_ReadPin(EncoderSW2_GPIO_Port, EncoderSW2_Pin)
 800129a:	60fb      	str	r3, [r7, #12]
	int dirty = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
	if (!encoder1Switch && mState->encoder1Delta != 0) {
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d122      	bne.n	80012ec <EchoUpdateState+0x84>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d01e      	beq.n	80012ec <EchoUpdateState+0x84>
		eState.delayLen += mState->encoder1Delta * 200;
 80012ae:	4b69      	ldr	r3, [pc, #420]	@ (8001454 <EchoUpdateState+0x1ec>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	21c8      	movs	r1, #200	@ 0xc8
 80012b8:	fb01 f303 	mul.w	r3, r1, r3
 80012bc:	4413      	add	r3, r2
 80012be:	4a65      	ldr	r2, [pc, #404]	@ (8001454 <EchoUpdateState+0x1ec>)
 80012c0:	6013      	str	r3, [r2, #0]
		if (eState.delayLen >= DELAY_BUF)
 80012c2:	4b64      	ldr	r3, [pc, #400]	@ (8001454 <EchoUpdateState+0x1ec>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80012ca:	4293      	cmp	r3, r2
 80012cc:	dd04      	ble.n	80012d8 <EchoUpdateState+0x70>
			eState.delayLen = DELAY_BUF - 1;
 80012ce:	4b61      	ldr	r3, [pc, #388]	@ (8001454 <EchoUpdateState+0x1ec>)
 80012d0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	e006      	b.n	80012e6 <EchoUpdateState+0x7e>
		else if (eState.delayLen < 1)
 80012d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001454 <EchoUpdateState+0x1ec>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	dc02      	bgt.n	80012e6 <EchoUpdateState+0x7e>
			eState.delayLen = 1;
 80012e0:	4b5c      	ldr	r3, [pc, #368]	@ (8001454 <EchoUpdateState+0x1ec>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
		dirty = 1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	e031      	b.n	8001350 <EchoUpdateState+0xe8>
	} else if (mState->encoder1Delta != 0) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d02d      	beq.n	8001350 <EchoUpdateState+0xe8>
		eState.mix += ((float) mState->encoder1Delta) * 0.01f;
 80012f4:	4b57      	ldr	r3, [pc, #348]	@ (8001454 <EchoUpdateState+0x1ec>)
 80012f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001306:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8001458 <EchoUpdateState+0x1f0>
 800130a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	4b50      	ldr	r3, [pc, #320]	@ (8001454 <EchoUpdateState+0x1ec>)
 8001314:	edc3 7a01 	vstr	s15, [r3, #4]
		if (eState.mix < 0.)
 8001318:	4b4e      	ldr	r3, [pc, #312]	@ (8001454 <EchoUpdateState+0x1ec>)
 800131a:	edd3 7a01 	vldr	s15, [r3, #4]
 800131e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001326:	d503      	bpl.n	8001330 <EchoUpdateState+0xc8>
			eState.mix = 0.;
 8001328:	4b4a      	ldr	r3, [pc, #296]	@ (8001454 <EchoUpdateState+0x1ec>)
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
		if (eState.mix > 1.)
 8001330:	4b48      	ldr	r3, [pc, #288]	@ (8001454 <EchoUpdateState+0x1ec>)
 8001332:	edd3 7a01 	vldr	s15, [r3, #4]
 8001336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800133a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	dd03      	ble.n	800134c <EchoUpdateState+0xe4>
			eState.mix = 1.;
 8001344:	4b43      	ldr	r3, [pc, #268]	@ (8001454 <EchoUpdateState+0x1ec>)
 8001346:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800134a:	605a      	str	r2, [r3, #4]
		dirty = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
	}
	if (!encoder2Switch && mState->encoder2Delta != 0) {
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d133      	bne.n	80013be <EchoUpdateState+0x156>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d02f      	beq.n	80013be <EchoUpdateState+0x156>
		eState.feedback += ((float) mState->encoder2Delta) * 0.01f;
 800135e:	4b3d      	ldr	r3, [pc, #244]	@ (8001454 <EchoUpdateState+0x1ec>)
 8001360:	ed93 7a02 	vldr	s14, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001370:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001458 <EchoUpdateState+0x1f0>
 8001374:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137c:	4b35      	ldr	r3, [pc, #212]	@ (8001454 <EchoUpdateState+0x1ec>)
 800137e:	edc3 7a02 	vstr	s15, [r3, #8]
		if (eState.feedback < 0.)
 8001382:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <EchoUpdateState+0x1ec>)
 8001384:	edd3 7a02 	vldr	s15, [r3, #8]
 8001388:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800138c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001390:	d504      	bpl.n	800139c <EchoUpdateState+0x134>
			eState.feedback = 0.;
 8001392:	4b30      	ldr	r3, [pc, #192]	@ (8001454 <EchoUpdateState+0x1ec>)
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	e00d      	b.n	80013b8 <EchoUpdateState+0x150>
		else if (eState.feedback > 1.)
 800139c:	4b2d      	ldr	r3, [pc, #180]	@ (8001454 <EchoUpdateState+0x1ec>)
 800139e:	edd3 7a02 	vldr	s15, [r3, #8]
 80013a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	dd03      	ble.n	80013b8 <EchoUpdateState+0x150>
			eState.feedback = 1.;
 80013b0:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <EchoUpdateState+0x1ec>)
 80013b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013b6:	609a      	str	r2, [r3, #8]
		dirty = 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e03c      	b.n	8001438 <EchoUpdateState+0x1d0>
	} else if (mState->encoder2Delta != 0) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d038      	beq.n	8001438 <EchoUpdateState+0x1d0>
		eState.filterFreq += ((float) mState->encoder2Delta) * 100.f;
 80013c6:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <EchoUpdateState+0x1ec>)
 80013c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800145c <EchoUpdateState+0x1f4>
 80013dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <EchoUpdateState+0x1ec>)
 80013e6:	edc3 7a03 	vstr	s15, [r3, #12]
		if (eState.filterFreq >= 20000)
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <EchoUpdateState+0x1ec>)
 80013ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80013f0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001460 <EchoUpdateState+0x1f8>
 80013f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	db02      	blt.n	8001404 <EchoUpdateState+0x19c>
			eState.filterFreq = 20000;
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <EchoUpdateState+0x1ec>)
 8001400:	4a18      	ldr	r2, [pc, #96]	@ (8001464 <EchoUpdateState+0x1fc>)
 8001402:	60da      	str	r2, [r3, #12]
		if (eState.filterFreq < 1)
 8001404:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <EchoUpdateState+0x1ec>)
 8001406:	edd3 7a03 	vldr	s15, [r3, #12]
 800140a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800140e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001416:	d503      	bpl.n	8001420 <EchoUpdateState+0x1b8>
			eState.filterFreq = 1;
 8001418:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <EchoUpdateState+0x1ec>)
 800141a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800141e:	60da      	str	r2, [r3, #12]
		compute_lowpass_coeffs(&filter, eState.filterFreq, 1.78);
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <EchoUpdateState+0x1ec>)
 8001422:	edd3 7a03 	vldr	s15, [r3, #12]
 8001426:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8001468 <EchoUpdateState+0x200>
 800142a:	eeb0 0a67 	vmov.f32	s0, s15
 800142e:	480f      	ldr	r0, [pc, #60]	@ (800146c <EchoUpdateState+0x204>)
 8001430:	f000 f938 	bl	80016a4 <compute_lowpass_coeffs>
		dirty = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
	}
	if (dirty) {
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <EchoUpdateState+0x1da>
		EchoPrintState();
 800143e:	f000 f861 	bl	8001504 <EchoPrintState>
	}
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021800 	.word	0x40021800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	20000014 	.word	0x20000014
 8001458:	3c23d70a 	.word	0x3c23d70a
 800145c:	42c80000 	.word	0x42c80000
 8001460:	469c4000 	.word	0x469c4000
 8001464:	469c4000 	.word	0x469c4000
 8001468:	3fe3d70a 	.word	0x3fe3d70a
 800146c:	2000025c 	.word	0x2000025c

08001470 <EchoPrintInit>:

void EchoPrintInit() {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	lcd_clear(lcdPtr);
 8001474:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <EchoPrintInit+0x80>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fd31 	bl	8001ee0 <lcd_clear>
	lcd_gotoxy(lcdPtr, 0, 0);
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <EchoPrintInit+0x80>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fd44 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, "Echo Len smp:");
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <EchoPrintInit+0x80>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4918      	ldr	r1, [pc, #96]	@ (80014f4 <EchoPrintInit+0x84>)
 8001492:	4618      	mov	r0, r3
 8001494:	f000 fdb7 	bl	8002006 <lcd_puts>

	lcd_gotoxy(lcdPtr, 0, 1);
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <EchoPrintInit+0x80>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2201      	movs	r2, #1
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fd37 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, "Echo Feedback%:");
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <EchoPrintInit+0x80>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4913      	ldr	r1, [pc, #76]	@ (80014f8 <EchoPrintInit+0x88>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fdaa 	bl	8002006 <lcd_puts>

	lcd_gotoxy(lcdPtr, 0, 2);
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <EchoPrintInit+0x80>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2202      	movs	r2, #2
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fd2a 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, "Echo Wet%:");
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <EchoPrintInit+0x80>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	490d      	ldr	r1, [pc, #52]	@ (80014fc <EchoPrintInit+0x8c>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fd9d 	bl	8002006 <lcd_puts>

	lcd_gotoxy(lcdPtr, 0, 3);
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <EchoPrintInit+0x80>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2203      	movs	r2, #3
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fd1d 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, "Filter Freq:");
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <EchoPrintInit+0x80>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4908      	ldr	r1, [pc, #32]	@ (8001500 <EchoPrintInit+0x90>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fd90 	bl	8002006 <lcd_puts>

	EchoPrintState();
 80014e6:	f000 f80d 	bl	8001504 <EchoPrintState>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000258 	.word	0x20000258
 80014f4:	0800c430 	.word	0x0800c430
 80014f8:	0800c440 	.word	0x0800c440
 80014fc:	0800c450 	.word	0x0800c450
 8001500:	0800c45c 	.word	0x0800c45c

08001504 <EchoPrintState>:

void EchoPrintState() {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0

	sprintf(strBuff, "%d     ", eState.delayLen);
 8001508:	4b3c      	ldr	r3, [pc, #240]	@ (80015fc <EchoPrintState+0xf8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	493c      	ldr	r1, [pc, #240]	@ (8001600 <EchoPrintState+0xfc>)
 8001510:	483c      	ldr	r0, [pc, #240]	@ (8001604 <EchoPrintState+0x100>)
 8001512:	f007 fdd7 	bl	80090c4 <siprintf>
	strBuff[7] = '\0';
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <EchoPrintState+0x100>)
 8001518:	2200      	movs	r2, #0
 800151a:	71da      	strb	r2, [r3, #7]
	lcd_gotoxy(lcdPtr, 13, 0);
 800151c:	4b3a      	ldr	r3, [pc, #232]	@ (8001608 <EchoPrintState+0x104>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2200      	movs	r2, #0
 8001522:	210d      	movs	r1, #13
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fcf5 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, strBuff);
 800152a:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <EchoPrintState+0x104>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4935      	ldr	r1, [pc, #212]	@ (8001604 <EchoPrintState+0x100>)
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fd68 	bl	8002006 <lcd_puts>
	sprintf(strBuff, "%d  ", (int) (eState.feedback * 100.));
 8001536:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <EchoPrintState+0xf8>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f824 	bl	8000588 <__aeabi_f2d>
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	4b31      	ldr	r3, [pc, #196]	@ (800160c <EchoPrintState+0x108>)
 8001546:	f7ff f877 	bl	8000638 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fb21 	bl	8000b98 <__aeabi_d2iz>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	492d      	ldr	r1, [pc, #180]	@ (8001610 <EchoPrintState+0x10c>)
 800155c:	4829      	ldr	r0, [pc, #164]	@ (8001604 <EchoPrintState+0x100>)
 800155e:	f007 fdb1 	bl	80090c4 <siprintf>
	lcd_gotoxy(lcdPtr, 15, 1);
 8001562:	4b29      	ldr	r3, [pc, #164]	@ (8001608 <EchoPrintState+0x104>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2201      	movs	r2, #1
 8001568:	210f      	movs	r1, #15
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fcd2 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, strBuff);
 8001570:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <EchoPrintState+0x104>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4923      	ldr	r1, [pc, #140]	@ (8001604 <EchoPrintState+0x100>)
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fd45 	bl	8002006 <lcd_puts>
	sprintf(strBuff, "%d  ", (int) (eState.mix * 100.));
 800157c:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <EchoPrintState+0xf8>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff f801 	bl	8000588 <__aeabi_f2d>
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b20      	ldr	r3, [pc, #128]	@ (800160c <EchoPrintState+0x108>)
 800158c:	f7ff f854 	bl	8000638 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fafe 	bl	8000b98 <__aeabi_d2iz>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	491b      	ldr	r1, [pc, #108]	@ (8001610 <EchoPrintState+0x10c>)
 80015a2:	4818      	ldr	r0, [pc, #96]	@ (8001604 <EchoPrintState+0x100>)
 80015a4:	f007 fd8e 	bl	80090c4 <siprintf>
	lcd_gotoxy(lcdPtr, 10, 2);
 80015a8:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <EchoPrintState+0x104>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2202      	movs	r2, #2
 80015ae:	210a      	movs	r1, #10
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 fcaf 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, strBuff);
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <EchoPrintState+0x104>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4912      	ldr	r1, [pc, #72]	@ (8001604 <EchoPrintState+0x100>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fd22 	bl	8002006 <lcd_puts>
	sprintf(strBuff, "%d  ", (int) (eState.filterFreq));
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <EchoPrintState+0xf8>)
 80015c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80015c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015cc:	ee17 2a90 	vmov	r2, s15
 80015d0:	490f      	ldr	r1, [pc, #60]	@ (8001610 <EchoPrintState+0x10c>)
 80015d2:	480c      	ldr	r0, [pc, #48]	@ (8001604 <EchoPrintState+0x100>)
 80015d4:	f007 fd76 	bl	80090c4 <siprintf>
	strBuff[7] = '\0';
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <EchoPrintState+0x100>)
 80015da:	2200      	movs	r2, #0
 80015dc:	71da      	strb	r2, [r3, #7]
	lcd_gotoxy(lcdPtr, 12, 3);
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <EchoPrintState+0x104>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2203      	movs	r2, #3
 80015e4:	210c      	movs	r1, #12
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fc94 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, strBuff);
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <EchoPrintState+0x104>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4904      	ldr	r1, [pc, #16]	@ (8001604 <EchoPrintState+0x100>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fd07 	bl	8002006 <lcd_puts>

}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000014 	.word	0x20000014
 8001600:	0800c46c 	.word	0x0800c46c
 8001604:	20000000 	.word	0x20000000
 8001608:	20000258 	.word	0x20000258
 800160c:	40590000 	.word	0x40590000
 8001610:	0800c474 	.word	0x0800c474

08001614 <initFilter>:





void initFilter(filterUnit* filterObject, int audioFreq){
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
	filterObject->audioFreq = (float) audioFreq;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	arm_biquad_cascade_df2T_init_f32(&filterObject->arm_inst_left,NUM_STAGES, filterObject->pCoeffs, &filterObject->pStateL[0]);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f103 0218 	add.w	r2, r3, #24
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	332c      	adds	r3, #44	@ 0x2c
 800163a:	2101      	movs	r1, #1
 800163c:	f007 f81c 	bl	8008678 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&filterObject->arm_inst_right, NUM_STAGES, filterObject->pCoeffs, &filterObject->pStateR[0]);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f103 000c 	add.w	r0, r3, #12
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f103 0218 	add.w	r2, r3, #24
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3334      	adds	r3, #52	@ 0x34
 8001650:	2101      	movs	r1, #1
 8001652:	f007 f811 	bl	8008678 <arm_biquad_cascade_df2T_init_f32>
	compute_lowpass_coeffs(filterObject, 10000.f, 1.f);
 8001656:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800165a:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 800166c <initFilter+0x58>
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f820 	bl	80016a4 <compute_lowpass_coeffs>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	461c4000 	.word	0x461c4000

08001670 <doFilter>:
  * @param [out] *dstL: pointer that will be set to the internal output buffer
  * @param [out] *dstR: pointer that will be set to the internal output buffer
  * @retval None
  */

void doFilter(filterUnit* filterObjectLR, float32_t *srcL, float32_t *srcR, float32_t *dstL, float32_t *dstR, int num_samples){
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	603b      	str	r3, [r7, #0]

	arm_biquad_cascade_df2T_f32(&(filterObjectLR->arm_inst_left), srcL, dstR, num_samples);
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	f006 fe3b 	bl	8008300 <arm_biquad_cascade_df2T_f32>
	arm_biquad_cascade_df2T_f32(&(filterObjectLR->arm_inst_right), srcR, dstR, num_samples);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f103 000c 	add.w	r0, r3, #12
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	f006 fe33 	bl	8008300 <arm_biquad_cascade_df2T_f32>
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <compute_lowpass_coeffs>:
/*
void doFilter(filterUnit* filterObjectLR, float32_t *srcL, float32_t *srcR, float32_t *dstL, float32_t *dstR, int num_samples){

}
*/
void compute_lowpass_coeffs(filterUnit* filterObjectLR, float cutoff, float res){
 80016a4:	b5b0      	push	{r4, r5, r7, lr}
 80016a6:	b08e      	sub	sp, #56	@ 0x38
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80016b0:	edc7 0a01 	vstr	s1, [r7, #4]
	const float omega = 2.f * PI * (cutoff/filterObjectLR->audioFreq);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80016ba:	edd7 6a02 	vldr	s13, [r7, #8]
 80016be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c2:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80017fc <compute_lowpass_coeffs+0x158>
 80016c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ca:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	const float cs = cos(omega);
 80016ce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80016d0:	f7fe ff5a 	bl	8000588 <__aeabi_f2d>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	ec43 2b10 	vmov	d0, r2, r3
 80016dc:	f009 fe24 	bl	800b328 <cos>
 80016e0:	ec53 2b10 	vmov	r2, r3, d0
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff fa7e 	bl	8000be8 <__aeabi_d2f>
 80016ec:	4603      	mov	r3, r0
 80016ee:	633b      	str	r3, [r7, #48]	@ 0x30
	const float alpha = sin(omega)/(cs*res);
 80016f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80016f2:	f7fe ff49 	bl	8000588 <__aeabi_f2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	ec43 2b10 	vmov	d0, r2, r3
 80016fe:	f009 fe67 	bl	800b3d0 <sin>
 8001702:	ec55 4b10 	vmov	r4, r5, d0
 8001706:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800170a:	edd7 7a01 	vldr	s15, [r7, #4]
 800170e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001712:	ee17 0a90 	vmov	r0, s15
 8001716:	f7fe ff37 	bl	8000588 <__aeabi_f2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4620      	mov	r0, r4
 8001720:	4629      	mov	r1, r5
 8001722:	f7ff f8b3 	bl	800088c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff fa5b 	bl	8000be8 <__aeabi_d2f>
 8001732:	4603      	mov	r3, r0
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c
	const float a0 = 1 + alpha;
 8001736:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800173a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800173e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001742:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	const float b0 = (1 - cs) / 2;
 8001746:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800174a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800174e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001752:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001756:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800175a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	const float b1 = (1 - cs);
 800175e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001762:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176a:	edc7 7a08 	vstr	s15, [r7, #32]
	const float b2 = b0;
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	61fb      	str	r3, [r7, #28]
	const float a1 = -2 * cs;
 8001772:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001776:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800177a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177e:	edc7 7a06 	vstr	s15, [r7, #24]
	const float a2 = 1 - alpha;
 8001782:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001786:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800178a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178e:	edc7 7a05 	vstr	s15, [r7, #20]

	filterObjectLR->pCoeffs[0] = b0/a0; //b0
 8001792:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001796:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800179a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	edc3 7a06 	vstr	s15, [r3, #24]
	filterObjectLR->pCoeffs[1] = b1/a0; //b1
 80017a4:	edd7 6a08 	vldr	s13, [r7, #32]
 80017a8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80017ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	edc3 7a07 	vstr	s15, [r3, #28]
 	filterObjectLR->pCoeffs[2] = b2/a0;//b2
 80017b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80017ba:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80017be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	edc3 7a08 	vstr	s15, [r3, #32]
 	filterObjectLR->pCoeffs[3] = -a1/a0;//a1
 80017c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80017cc:	eef1 6a67 	vneg.f32	s13, s15
 80017d0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80017d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 	filterObjectLR->pCoeffs[4] = -a2/a0;//a2
 80017de:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e2:	eef1 6a67 	vneg.f32	s13, s15
 80017e6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80017ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 80017f4:	bf00      	nop
 80017f6:	3738      	adds	r7, #56	@ 0x38
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bdb0      	pop	{r4, r5, r7, pc}
 80017fc:	40c90fdb 	.word	0x40c90fdb

08001800 <FilterEffectInit>:
extern float32_t srcLeft[SAMPLES / 2];
extern float32_t srcRight[SAMPLES / 2];
extern float32_t destLeft[SAMPLES / 2];
extern float32_t destRight[SAMPLES / 2];

void FilterEffectInit(I2C_LCD_HandleTypeDef *lcd, int audioFreq) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	lcdPtr = lcd;
 800180a:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <FilterEffectInit+0x20>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6013      	str	r3, [r2, #0]
	initFilter(&filter, audioFreq);
 8001810:	6839      	ldr	r1, [r7, #0]
 8001812:	4804      	ldr	r0, [pc, #16]	@ (8001824 <FilterEffectInit+0x24>)
 8001814:	f7ff fefe 	bl	8001614 <initFilter>

}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2003ac1c 	.word	0x2003ac1c
 8001824:	2003ac20 	.word	0x2003ac20

08001828 <doFilterEffect>:

void doFilterEffect(int b) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	@ 0x30
 800182c:	af02      	add	r7, sp, #8
 800182e:	6078      	str	r0, [r7, #4]
	int startBuf = b * BUF_SAMPLES / 2;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	029b      	lsls	r3, r3, #10
 8001834:	61bb      	str	r3, [r7, #24]
	int endBuf = startBuf + BUF_SAMPLES / 2;
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800183c:	617b      	str	r3, [r7, #20]

	int i = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int pos = startBuf; pos < endBuf; pos += 4) {
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	623b      	str	r3, [r7, #32]
 8001846:	e030      	b.n	80018aa <doFilterEffect+0x82>
		srcLeft[i] = ((rxBuf[pos] << 16) | rxBuf[pos + 1]);
 8001848:	4a58      	ldr	r2, [pc, #352]	@ (80019ac <doFilterEffect+0x184>)
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001850:	041b      	lsls	r3, r3, #16
 8001852:	6a3a      	ldr	r2, [r7, #32]
 8001854:	3201      	adds	r2, #1
 8001856:	4955      	ldr	r1, [pc, #340]	@ (80019ac <doFilterEffect+0x184>)
 8001858:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800185c:	4313      	orrs	r3, r2
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001866:	4a52      	ldr	r2, [pc, #328]	@ (80019b0 <doFilterEffect+0x188>)
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	edc3 7a00 	vstr	s15, [r3]
		srcRight[i] = ((rxBuf[pos + 2] << 16) | rxBuf[pos + 3]);
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	3302      	adds	r3, #2
 8001876:	4a4d      	ldr	r2, [pc, #308]	@ (80019ac <doFilterEffect+0x184>)
 8001878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	6a3a      	ldr	r2, [r7, #32]
 8001880:	3203      	adds	r2, #3
 8001882:	494a      	ldr	r1, [pc, #296]	@ (80019ac <doFilterEffect+0x184>)
 8001884:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001888:	4313      	orrs	r3, r2
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001892:	4a48      	ldr	r2, [pc, #288]	@ (80019b4 <doFilterEffect+0x18c>)
 8001894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	edc3 7a00 	vstr	s15, [r3]
		i++;
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	3301      	adds	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int pos = startBuf; pos < endBuf; pos += 4) {
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	3304      	adds	r3, #4
 80018a8:	623b      	str	r3, [r7, #32]
 80018aa:	6a3a      	ldr	r2, [r7, #32]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dbca      	blt.n	8001848 <doFilterEffect+0x20>
	}
	doFilter(&filter, srcLeft, srcRight, destLeft, destRight, i);
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	4b40      	ldr	r3, [pc, #256]	@ (80019b8 <doFilterEffect+0x190>)
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	4b40      	ldr	r3, [pc, #256]	@ (80019bc <doFilterEffect+0x194>)
 80018bc:	4a3d      	ldr	r2, [pc, #244]	@ (80019b4 <doFilterEffect+0x18c>)
 80018be:	493c      	ldr	r1, [pc, #240]	@ (80019b0 <doFilterEffect+0x188>)
 80018c0:	483f      	ldr	r0, [pc, #252]	@ (80019c0 <doFilterEffect+0x198>)
 80018c2:	f7ff fed5 	bl	8001670 <doFilter>
	i = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int pos = startBuf; pos < endBuf; pos += 4) {
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	e064      	b.n	800199a <doFilterEffect+0x172>
		int32_t lval = destLeft[i] * fState.mix + srcLeft[i] * (1 - fState.mix);
 80018d0:	4a3a      	ldr	r2, [pc, #232]	@ (80019bc <doFilterEffect+0x194>)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	ed93 7a00 	vldr	s14, [r3]
 80018dc:	4b39      	ldr	r3, [pc, #228]	@ (80019c4 <doFilterEffect+0x19c>)
 80018de:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e6:	4a32      	ldr	r2, [pc, #200]	@ (80019b0 <doFilterEffect+0x188>)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	edd3 6a00 	vldr	s13, [r3]
 80018f2:	4b34      	ldr	r3, [pc, #208]	@ (80019c4 <doFilterEffect+0x19c>)
 80018f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80018fc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190c:	ee17 3a90 	vmov	r3, s15
 8001910:	613b      	str	r3, [r7, #16]
		int32_t rval = destRight[i] * fState.mix
 8001912:	4a29      	ldr	r2, [pc, #164]	@ (80019b8 <doFilterEffect+0x190>)
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	ed93 7a00 	vldr	s14, [r3]
 800191e:	4b29      	ldr	r3, [pc, #164]	@ (80019c4 <doFilterEffect+0x19c>)
 8001920:	edd3 7a02 	vldr	s15, [r3, #8]
 8001924:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ srcRight[i] * (1 - fState.mix);
 8001928:	4a22      	ldr	r2, [pc, #136]	@ (80019b4 <doFilterEffect+0x18c>)
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	edd3 6a00 	vldr	s13, [r3]
 8001934:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <doFilterEffect+0x19c>)
 8001936:	edd3 7a02 	vldr	s15, [r3, #8]
 800193a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800193e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001946:	ee77 7a27 	vadd.f32	s15, s14, s15
		int32_t rval = destRight[i] * fState.mix
 800194a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194e:	ee17 3a90 	vmov	r3, s15
 8001952:	60fb      	str	r3, [r7, #12]
		txBuf[pos] = (lval >> 16) & 0xFFFF;
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	b299      	uxth	r1, r3
 800195a:	4a1b      	ldr	r2, [pc, #108]	@ (80019c8 <doFilterEffect+0x1a0>)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		txBuf[pos + 1] = lval & 0xFFFF;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3301      	adds	r3, #1
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	b291      	uxth	r1, r2
 800196a:	4a17      	ldr	r2, [pc, #92]	@ (80019c8 <doFilterEffect+0x1a0>)
 800196c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		txBuf[pos + 2] = (rval >> 16) & 0xFFFF;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	0c1a      	lsrs	r2, r3, #16
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	3302      	adds	r3, #2
 8001978:	b291      	uxth	r1, r2
 800197a:	4a13      	ldr	r2, [pc, #76]	@ (80019c8 <doFilterEffect+0x1a0>)
 800197c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		txBuf[pos + 3] = rval & 0xFFFF;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	3303      	adds	r3, #3
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	b291      	uxth	r1, r2
 8001988:	4a0f      	ldr	r2, [pc, #60]	@ (80019c8 <doFilterEffect+0x1a0>)
 800198a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		i++;
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	3301      	adds	r3, #1
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int pos = startBuf; pos < endBuf; pos += 4) {
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	3304      	adds	r3, #4
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	429a      	cmp	r2, r3
 80019a0:	db96      	blt.n	80018d0 <doFilterEffect+0xa8>
	}
}
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
 80019a6:	3728      	adds	r7, #40	@ 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2003aea0 	.word	0x2003aea0
 80019b0:	2003cea0 	.word	0x2003cea0
 80019b4:	2003d2a0 	.word	0x2003d2a0
 80019b8:	2003daa0 	.word	0x2003daa0
 80019bc:	2003d6a0 	.word	0x2003d6a0
 80019c0:	2003ac20 	.word	0x2003ac20
 80019c4:	20000024 	.word	0x20000024
 80019c8:	2003bea0 	.word	0x2003bea0
 80019cc:	00000000 	.word	0x00000000

080019d0 <FilterEffectUpdateState>:
void FilterEffectUpdateState(masterState *mState) {
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	GPIO_PinState encoder1Switch = (HAL_GPIO_ReadPin(EncoderSW_GPIO_Port,
 80019d8:	2101      	movs	r1, #1
 80019da:	4895      	ldr	r0, [pc, #596]	@ (8001c30 <FilterEffectUpdateState+0x260>)
 80019dc:	f002 ffce 	bl	800497c <HAL_GPIO_ReadPin>
 80019e0:	4603      	mov	r3, r0
			EncoderSW_Pin) == GPIO_PIN_RESET);
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf0c      	ite	eq
 80019e6:	2301      	moveq	r3, #1
 80019e8:	2300      	movne	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
	GPIO_PinState encoder1Switch = (HAL_GPIO_ReadPin(EncoderSW_GPIO_Port,
 80019ec:	72fb      	strb	r3, [r7, #11]
	GPIO_PinState encoder2Switch = (HAL_GPIO_ReadPin(EncoderSW2_GPIO_Port,
 80019ee:	2102      	movs	r1, #2
 80019f0:	4890      	ldr	r0, [pc, #576]	@ (8001c34 <FilterEffectUpdateState+0x264>)
 80019f2:	f002 ffc3 	bl	800497c <HAL_GPIO_ReadPin>
 80019f6:	4603      	mov	r3, r0
				EncoderSW2_Pin) == GPIO_PIN_RESET);
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf0c      	ite	eq
 80019fc:	2301      	moveq	r3, #1
 80019fe:	2300      	movne	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
	GPIO_PinState encoder2Switch = (HAL_GPIO_ReadPin(EncoderSW2_GPIO_Port,
 8001a02:	72bb      	strb	r3, [r7, #10]

	int dirty = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
	if (mState->encoder1Delta != 0) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d07f      	beq.n	8001b10 <FilterEffectUpdateState+0x140>
		if (!encoder1Switch) {
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d135      	bne.n	8001a82 <FilterEffectUpdateState+0xb2>
			fState.freq += ((float) mState->encoder1Delta) * (fState.freq/100.f);
 8001a16:	4b88      	ldr	r3, [pc, #544]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001a18:	ed93 7a00 	vldr	s14, [r3]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a28:	4b83      	ldr	r3, [pc, #524]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001a2a:	ed93 6a00 	vldr	s12, [r3]
 8001a2e:	eddf 5a83 	vldr	s11, [pc, #524]	@ 8001c3c <FilterEffectUpdateState+0x26c>
 8001a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3e:	4b7e      	ldr	r3, [pc, #504]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001a40:	edc3 7a00 	vstr	s15, [r3]
			if (fState.freq >= 20000)
 8001a44:	4b7c      	ldr	r3, [pc, #496]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001c40 <FilterEffectUpdateState+0x270>
 8001a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a56:	db02      	blt.n	8001a5e <FilterEffectUpdateState+0x8e>
				fState.freq = 20000;
 8001a58:	4b77      	ldr	r3, [pc, #476]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001a5a:	4a7a      	ldr	r2, [pc, #488]	@ (8001c44 <FilterEffectUpdateState+0x274>)
 8001a5c:	601a      	str	r2, [r3, #0]
			if (fState.freq < 20)
 8001a5e:	4b76      	ldr	r3, [pc, #472]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	d503      	bpl.n	8001a7a <FilterEffectUpdateState+0xaa>
				fState.freq = 20;
 8001a72:	4b71      	ldr	r3, [pc, #452]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001a74:	4a74      	ldr	r2, [pc, #464]	@ (8001c48 <FilterEffectUpdateState+0x278>)
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e04a      	b.n	8001b10 <FilterEffectUpdateState+0x140>
			else
				dirty += 2;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e046      	b.n	8001b10 <FilterEffectUpdateState+0x140>
		} else {
			if (mState->encoder1Delta != 0) {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d042      	beq.n	8001b10 <FilterEffectUpdateState+0x140>
				fState.mix += ((float) (mState->encoder1Delta)) * 0.01;
 8001a8a:	4b6b      	ldr	r3, [pc, #428]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd7a 	bl	8000588 <__aeabi_f2d>
 8001a94:	4604      	mov	r4, r0
 8001a96:	460d      	mov	r5, r1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa4:	ee17 0a90 	vmov	r0, s15
 8001aa8:	f7fe fd6e 	bl	8000588 <__aeabi_f2d>
 8001aac:	a35e      	add	r3, pc, #376	@ (adr r3, 8001c28 <FilterEffectUpdateState+0x258>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	f7fe fdc1 	bl	8000638 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4620      	mov	r0, r4
 8001abc:	4629      	mov	r1, r5
 8001abe:	f7fe fc05 	bl	80002cc <__adddf3>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff f88d 	bl	8000be8 <__aeabi_d2f>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4a59      	ldr	r2, [pc, #356]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001ad2:	6093      	str	r3, [r2, #8]
				if (fState.mix < 0.)
 8001ad4:	4b58      	ldr	r3, [pc, #352]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001ad6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae2:	d503      	bpl.n	8001aec <FilterEffectUpdateState+0x11c>
					fState.mix = 0.;
 8001ae4:	4b54      	ldr	r3, [pc, #336]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
				if (fState.mix > 1.)
 8001aec:	4b52      	ldr	r3, [pc, #328]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001aee:	edd3 7a02 	vldr	s15, [r3, #8]
 8001af2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afe:	dd04      	ble.n	8001b0a <FilterEffectUpdateState+0x13a>
					fState.mix = 1.;
 8001b00:	4b4d      	ldr	r3, [pc, #308]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001b02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	e002      	b.n	8001b10 <FilterEffectUpdateState+0x140>
				else
					dirty += 1;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
			}
		}
	}
	if (mState->encoder2Delta != 0) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d06b      	beq.n	8001bf0 <FilterEffectUpdateState+0x220>
		if (!encoder2Switch) {
 8001b18:	7abb      	ldrb	r3, [r7, #10]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d131      	bne.n	8001b82 <FilterEffectUpdateState+0x1b2>
			fState.res += ((float) mState->encoder2Delta) * 0.05f;
 8001b1e:	4b46      	ldr	r3, [pc, #280]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001b20:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b30:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001c4c <FilterEffectUpdateState+0x27c>
 8001b34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001b3e:	edc3 7a01 	vstr	s15, [r3, #4]
			if (fState.res < 0.1f)
 8001b42:	4b3d      	ldr	r3, [pc, #244]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001b44:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b48:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001c50 <FilterEffectUpdateState+0x280>
 8001b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	d502      	bpl.n	8001b5c <FilterEffectUpdateState+0x18c>
				fState.res = 0.1f;
 8001b56:	4b38      	ldr	r3, [pc, #224]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001b58:	4a3e      	ldr	r2, [pc, #248]	@ (8001c54 <FilterEffectUpdateState+0x284>)
 8001b5a:	605a      	str	r2, [r3, #4]
			if (fState.res > 16.f)
 8001b5c:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001b5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b62:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	dd04      	ble.n	8001b7a <FilterEffectUpdateState+0x1aa>
				fState.res = 16.f;
 8001b70:	4b31      	ldr	r3, [pc, #196]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001b72:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	e03a      	b.n	8001bf0 <FilterEffectUpdateState+0x220>
			else
				dirty += 2;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e036      	b.n	8001bf0 <FilterEffectUpdateState+0x220>
		} else {
			if (mState->encoder2Delta > 0) {
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	dd17      	ble.n	8001bba <FilterEffectUpdateState+0x1ea>
				if (fState.filterTypeTracker > 2
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	dd0d      	ble.n	8001bae <FilterEffectUpdateState+0x1de>
						&& fState.type < NUM_FILTER_TYPES - 1){
 8001b92:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001b94:	7b1b      	ldrb	r3, [r3, #12]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d809      	bhi.n	8001bae <FilterEffectUpdateState+0x1de>
					fState.type++;
 8001b9a:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001b9c:	7b1b      	ldrb	r3, [r3, #12]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b25      	ldr	r3, [pc, #148]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001ba4:	731a      	strb	r2, [r3, #12]
					fState.filterTypeTracker=0;
 8001ba6:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	e01d      	b.n	8001bea <FilterEffectUpdateState+0x21a>
				}
				else fState.filterTypeTracker++;
 8001bae:	4b22      	ldr	r3, [pc, #136]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a20      	ldr	r2, [pc, #128]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001bb6:	6113      	str	r3, [r2, #16]
 8001bb8:	e017      	b.n	8001bea <FilterEffectUpdateState+0x21a>
			} else {
				if (fState.filterTypeTracker < -2 && fState.type > 0){
 8001bba:	4b1f      	ldr	r3, [pc, #124]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f113 0f02 	cmn.w	r3, #2
 8001bc2:	da0d      	bge.n	8001be0 <FilterEffectUpdateState+0x210>
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001bc6:	7b1b      	ldrb	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <FilterEffectUpdateState+0x210>
					fState.type--;
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001bce:	7b1b      	ldrb	r3, [r3, #12]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001bd6:	731a      	strb	r2, [r3, #12]
					fState.filterTypeTracker = 0;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	e004      	b.n	8001bea <FilterEffectUpdateState+0x21a>
				}
				else fState.filterTypeTracker--;
 8001be0:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	4a14      	ldr	r2, [pc, #80]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001be8:	6113      	str	r3, [r2, #16]
			}
			dirty += 2;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3302      	adds	r3, #2
 8001bee:	60fb      	str	r3, [r7, #12]
		}
	}
	if (dirty != 0) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <FilterEffectUpdateState+0x22a>
		FilterEffectPrintState();
 8001bf6:	f000 f87b 	bl	8001cf0 <FilterEffectPrintState>
	}
	if (dirty >= 2) {
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	dd0c      	ble.n	8001c1a <FilterEffectUpdateState+0x24a>
		compute_lowpass_coeffs(&filter, fState.freq, fState.res);
 8001c00:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <FilterEffectUpdateState+0x268>)
 8001c08:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c0c:	eef0 0a47 	vmov.f32	s1, s14
 8001c10:	eeb0 0a67 	vmov.f32	s0, s15
 8001c14:	4810      	ldr	r0, [pc, #64]	@ (8001c58 <FilterEffectUpdateState+0x288>)
 8001c16:	f7ff fd45 	bl	80016a4 <compute_lowpass_coeffs>
	}
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bdb0      	pop	{r4, r5, r7, pc}
 8001c22:	bf00      	nop
 8001c24:	f3af 8000 	nop.w
 8001c28:	47ae147b 	.word	0x47ae147b
 8001c2c:	3f847ae1 	.word	0x3f847ae1
 8001c30:	40021800 	.word	0x40021800
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	20000024 	.word	0x20000024
 8001c3c:	42c80000 	.word	0x42c80000
 8001c40:	469c4000 	.word	0x469c4000
 8001c44:	469c4000 	.word	0x469c4000
 8001c48:	41a00000 	.word	0x41a00000
 8001c4c:	3d4ccccd 	.word	0x3d4ccccd
 8001c50:	3dcccccd 	.word	0x3dcccccd
 8001c54:	3dcccccd 	.word	0x3dcccccd
 8001c58:	2003ac20 	.word	0x2003ac20

08001c5c <FilterEffectPrintInit>:

void FilterEffectPrintInit() {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
	lcd_clear(lcdPtr);
 8001c60:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <FilterEffectPrintInit+0x80>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f93b 	bl	8001ee0 <lcd_clear>
	lcd_gotoxy(lcdPtr, 0, 0);
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <FilterEffectPrintInit+0x80>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f94e 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, "Filter Freq:");
 8001c78:	4b18      	ldr	r3, [pc, #96]	@ (8001cdc <FilterEffectPrintInit+0x80>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4918      	ldr	r1, [pc, #96]	@ (8001ce0 <FilterEffectPrintInit+0x84>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f9c1 	bl	8002006 <lcd_puts>

	lcd_gotoxy(lcdPtr, 0, 1);
 8001c84:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <FilterEffectPrintInit+0x80>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 f941 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, "Filter Res :");
 8001c92:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <FilterEffectPrintInit+0x80>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4913      	ldr	r1, [pc, #76]	@ (8001ce4 <FilterEffectPrintInit+0x88>)
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 f9b4 	bl	8002006 <lcd_puts>

	lcd_gotoxy(lcdPtr, 0, 2);
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <FilterEffectPrintInit+0x80>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f934 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, "Filter Type:");
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <FilterEffectPrintInit+0x80>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	490d      	ldr	r1, [pc, #52]	@ (8001ce8 <FilterEffectPrintInit+0x8c>)
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f9a7 	bl	8002006 <lcd_puts>

	lcd_gotoxy(lcdPtr, 0, 3);
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <FilterEffectPrintInit+0x80>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f927 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, "Filter Mix%:");
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <FilterEffectPrintInit+0x80>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4908      	ldr	r1, [pc, #32]	@ (8001cec <FilterEffectPrintInit+0x90>)
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 f99a 	bl	8002006 <lcd_puts>

	FilterEffectPrintState();
 8001cd2:	f000 f80d 	bl	8001cf0 <FilterEffectPrintState>
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2003ac1c 	.word	0x2003ac1c
 8001ce0:	0800c47c 	.word	0x0800c47c
 8001ce4:	0800c48c 	.word	0x0800c48c
 8001ce8:	0800c49c 	.word	0x0800c49c
 8001cec:	0800c4ac 	.word	0x0800c4ac

08001cf0 <FilterEffectPrintState>:

void FilterEffectPrintState() {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0

	sprintf(strBuff, "%d     ", (int) fState.freq);
 8001cf4:	4b3f      	ldr	r3, [pc, #252]	@ (8001df4 <FilterEffectPrintState+0x104>)
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfe:	ee17 2a90 	vmov	r2, s15
 8001d02:	493d      	ldr	r1, [pc, #244]	@ (8001df8 <FilterEffectPrintState+0x108>)
 8001d04:	483d      	ldr	r0, [pc, #244]	@ (8001dfc <FilterEffectPrintState+0x10c>)
 8001d06:	f007 f9dd 	bl	80090c4 <siprintf>

	lcd_gotoxy(lcdPtr, 12, 0);
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e00 <FilterEffectPrintState+0x110>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	210c      	movs	r1, #12
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f8fe 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, strBuff);
 8001d18:	4b39      	ldr	r3, [pc, #228]	@ (8001e00 <FilterEffectPrintState+0x110>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4937      	ldr	r1, [pc, #220]	@ (8001dfc <FilterEffectPrintState+0x10c>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f971 	bl	8002006 <lcd_puts>

	sprintf(strBuff, "%f  ", (fState.res));
 8001d24:	4b33      	ldr	r3, [pc, #204]	@ (8001df4 <FilterEffectPrintState+0x104>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc2d 	bl	8000588 <__aeabi_f2d>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4934      	ldr	r1, [pc, #208]	@ (8001e04 <FilterEffectPrintState+0x114>)
 8001d34:	4831      	ldr	r0, [pc, #196]	@ (8001dfc <FilterEffectPrintState+0x10c>)
 8001d36:	f007 f9c5 	bl	80090c4 <siprintf>
	strBuff[5] = '\0';
 8001d3a:	4b30      	ldr	r3, [pc, #192]	@ (8001dfc <FilterEffectPrintState+0x10c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	715a      	strb	r2, [r3, #5]
	lcd_gotoxy(lcdPtr, 12, 1);
 8001d40:	4b2f      	ldr	r3, [pc, #188]	@ (8001e00 <FilterEffectPrintState+0x110>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2201      	movs	r2, #1
 8001d46:	210c      	movs	r1, #12
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 f8e3 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, strBuff);
 8001d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e00 <FilterEffectPrintState+0x110>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	492a      	ldr	r1, [pc, #168]	@ (8001dfc <FilterEffectPrintState+0x10c>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 f956 	bl	8002006 <lcd_puts>

	switch (fState.type) {
 8001d5a:	4b26      	ldr	r3, [pc, #152]	@ (8001df4 <FilterEffectPrintState+0x104>)
 8001d5c:	7b1b      	ldrb	r3, [r3, #12]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d010      	beq.n	8001d84 <FilterEffectPrintState+0x94>
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	dc13      	bgt.n	8001d8e <FilterEffectPrintState+0x9e>
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <FilterEffectPrintState+0x80>
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d005      	beq.n	8001d7a <FilterEffectPrintState+0x8a>
 8001d6e:	e00e      	b.n	8001d8e <FilterEffectPrintState+0x9e>
	case LP:
		sprintf(strBuff, "LP");
 8001d70:	4925      	ldr	r1, [pc, #148]	@ (8001e08 <FilterEffectPrintState+0x118>)
 8001d72:	4822      	ldr	r0, [pc, #136]	@ (8001dfc <FilterEffectPrintState+0x10c>)
 8001d74:	f007 f9a6 	bl	80090c4 <siprintf>
		break;
 8001d78:	e009      	b.n	8001d8e <FilterEffectPrintState+0x9e>
	case HP:
		sprintf(strBuff, "HP");
 8001d7a:	4924      	ldr	r1, [pc, #144]	@ (8001e0c <FilterEffectPrintState+0x11c>)
 8001d7c:	481f      	ldr	r0, [pc, #124]	@ (8001dfc <FilterEffectPrintState+0x10c>)
 8001d7e:	f007 f9a1 	bl	80090c4 <siprintf>
		break;
 8001d82:	e004      	b.n	8001d8e <FilterEffectPrintState+0x9e>
	case BP:
		sprintf(strBuff, "BP");
 8001d84:	4922      	ldr	r1, [pc, #136]	@ (8001e10 <FilterEffectPrintState+0x120>)
 8001d86:	481d      	ldr	r0, [pc, #116]	@ (8001dfc <FilterEffectPrintState+0x10c>)
 8001d88:	f007 f99c 	bl	80090c4 <siprintf>
		break;
 8001d8c:	bf00      	nop
	}
	lcd_gotoxy(lcdPtr, 12, 2);
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e00 <FilterEffectPrintState+0x110>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2202      	movs	r2, #2
 8001d94:	210c      	movs	r1, #12
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f8bc 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, strBuff);
 8001d9c:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <FilterEffectPrintState+0x110>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4916      	ldr	r1, [pc, #88]	@ (8001dfc <FilterEffectPrintState+0x10c>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f92f 	bl	8002006 <lcd_puts>

	sprintf(strBuff, "%d  ", (int) (fState.mix * 100.));
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <FilterEffectPrintState+0x104>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fbeb 	bl	8000588 <__aeabi_f2d>
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <FilterEffectPrintState+0x124>)
 8001db8:	f7fe fc3e 	bl	8000638 <__aeabi_dmul>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7fe fee8 	bl	8000b98 <__aeabi_d2iz>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4912      	ldr	r1, [pc, #72]	@ (8001e18 <FilterEffectPrintState+0x128>)
 8001dce:	480b      	ldr	r0, [pc, #44]	@ (8001dfc <FilterEffectPrintState+0x10c>)
 8001dd0:	f007 f978 	bl	80090c4 <siprintf>
	lcd_gotoxy(lcdPtr, 12, 3);
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <FilterEffectPrintState+0x110>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	210c      	movs	r1, #12
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f899 	bl	8001f14 <lcd_gotoxy>
	lcd_puts(lcdPtr, strBuff);
 8001de2:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <FilterEffectPrintState+0x110>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4905      	ldr	r1, [pc, #20]	@ (8001dfc <FilterEffectPrintState+0x10c>)
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 f90c 	bl	8002006 <lcd_puts>

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000024 	.word	0x20000024
 8001df8:	0800c4bc 	.word	0x0800c4bc
 8001dfc:	20000038 	.word	0x20000038
 8001e00:	2003ac1c 	.word	0x2003ac1c
 8001e04:	0800c4c4 	.word	0x0800c4c4
 8001e08:	0800c4cc 	.word	0x0800c4cc
 8001e0c:	0800c4d0 	.word	0x0800c4d0
 8001e10:	0800c4d4 	.word	0x0800c4d4
 8001e14:	40590000 	.word	0x40590000
 8001e18:	0800c4d8 	.word	0x0800c4d8

08001e1c <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f023 030f 	bic.w	r3, r3, #15
 8001e2e:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	f043 030c 	orr.w	r3, r3, #12
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8001e4a:	7bbb      	ldrb	r3, [r7, #14]
 8001e4c:	f043 030c 	orr.w	r3, r3, #12
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8001e54:	7bbb      	ldrb	r3, [r7, #14]
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	791b      	ldrb	r3, [r3, #4]
 8001e66:	4619      	mov	r1, r3
 8001e68:	f107 0208 	add.w	r2, r7, #8
 8001e6c:	2364      	movs	r3, #100	@ 0x64
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2304      	movs	r3, #4
 8001e72:	f002 fed1 	bl	8004c18 <HAL_I2C_Master_Transmit>
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af02      	add	r7, sp, #8
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	f023 030f 	bic.w	r3, r3, #15
 8001e90:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	f043 030d 	orr.w	r3, r3, #13
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	f043 0309 	orr.w	r3, r3, #9
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8001eac:	7bbb      	ldrb	r3, [r7, #14]
 8001eae:	f043 030d 	orr.w	r3, r3, #13
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8001eb6:	7bbb      	ldrb	r3, [r7, #14]
 8001eb8:	f043 0309 	orr.w	r3, r3, #9
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	791b      	ldrb	r3, [r3, #4]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f107 0208 	add.w	r2, r7, #8
 8001ece:	2364      	movs	r3, #100	@ 0x64
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	f002 fea0 	bl	8004c18 <HAL_I2C_Master_Transmit>
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8001ee8:	2180      	movs	r1, #128	@ 0x80
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ff96 	bl	8001e1c <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e006      	b.n	8001f04 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8001ef6:	2120      	movs	r1, #32
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ffc0 	bl	8001e7e <lcd_send_data>
    for (int i = 0; i < 80; i++)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3301      	adds	r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b4f      	cmp	r3, #79	@ 0x4f
 8001f08:	ddf5      	ble.n	8001ef6 <lcd_clear+0x16>
    }
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d824      	bhi.n	8001f70 <lcd_gotoxy+0x5c>
 8001f26:	a201      	add	r2, pc, #4	@ (adr r2, 8001f2c <lcd_gotoxy+0x18>)
 8001f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2c:	08001f3d 	.word	0x08001f3d
 8001f30:	08001f47 	.word	0x08001f47
 8001f34:	08001f51 	.word	0x08001f51
 8001f38:	08001f5b 	.word	0x08001f5b
    {
        case 0: address = 0x80 + col; break;  // First row
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	3b80      	subs	r3, #128	@ 0x80
 8001f42:	75fb      	strb	r3, [r7, #23]
 8001f44:	e00e      	b.n	8001f64 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3b40      	subs	r3, #64	@ 0x40
 8001f4c:	75fb      	strb	r3, [r7, #23]
 8001f4e:	e009      	b.n	8001f64 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3b6c      	subs	r3, #108	@ 0x6c
 8001f56:	75fb      	strb	r3, [r7, #23]
 8001f58:	e004      	b.n	8001f64 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3b2c      	subs	r3, #44	@ 0x2c
 8001f60:	75fb      	strb	r3, [r7, #23]
 8001f62:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	4619      	mov	r1, r3
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f7ff ff57 	bl	8001e1c <lcd_send_cmd>
 8001f6e:	e000      	b.n	8001f72 <lcd_gotoxy+0x5e>
        default: return;  // Ignore invalid row numbers
 8001f70:	bf00      	nop
}
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8001f80:	2032      	movs	r0, #50	@ 0x32
 8001f82:	f001 f9a7 	bl	80032d4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001f86:	2130      	movs	r1, #48	@ 0x30
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff47 	bl	8001e1c <lcd_send_cmd>
    HAL_Delay(5);
 8001f8e:	2005      	movs	r0, #5
 8001f90:	f001 f9a0 	bl	80032d4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001f94:	2130      	movs	r1, #48	@ 0x30
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff40 	bl	8001e1c <lcd_send_cmd>
    HAL_Delay(1);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f001 f999 	bl	80032d4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8001fa2:	2130      	movs	r1, #48	@ 0x30
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff39 	bl	8001e1c <lcd_send_cmd>
    HAL_Delay(10);
 8001faa:	200a      	movs	r0, #10
 8001fac:	f001 f992 	bl	80032d4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff32 	bl	8001e1c <lcd_send_cmd>
    HAL_Delay(10);
 8001fb8:	200a      	movs	r0, #10
 8001fba:	f001 f98b 	bl	80032d4 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 8001fbe:	2128      	movs	r1, #40	@ 0x28
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff2b 	bl	8001e1c <lcd_send_cmd>
    HAL_Delay(1);
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f001 f984 	bl	80032d4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 8001fcc:	2108      	movs	r1, #8
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ff24 	bl	8001e1c <lcd_send_cmd>
    HAL_Delay(1);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f001 f97d 	bl	80032d4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8001fda:	2101      	movs	r1, #1
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff1d 	bl	8001e1c <lcd_send_cmd>
    HAL_Delay(2);
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	f001 f976 	bl	80032d4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8001fe8:	2106      	movs	r1, #6
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ff16 	bl	8001e1c <lcd_send_cmd>
    HAL_Delay(1);
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f001 f96f 	bl	80032d4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8001ff6:	210c      	movs	r1, #12
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff0f 	bl	8001e1c <lcd_send_cmd>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8002010:	e007      	b.n	8002022 <lcd_puts+0x1c>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	603a      	str	r2, [r7, #0]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	4619      	mov	r1, r3
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff2e 	bl	8001e7e <lcd_send_data>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f3      	bne.n	8002012 <lcd_puts+0xc>
}
 800202a:	bf00      	nop
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0


  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002038:	f000 fd32 	bl	8002aa0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800203c:	f001 f8e4 	bl	8003208 <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(txBuf, 0, sizeof(txBuf));
 8002040:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002044:	2100      	movs	r1, #0
 8002046:	4842      	ldr	r0, [pc, #264]	@ (8002150 <main+0x11c>)
 8002048:	f007 f8a1 	bl	800918e <memset>
  memset(rxBuf, 0, sizeof(rxBuf));
 800204c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002050:	2100      	movs	r1, #0
 8002052:	4840      	ldr	r0, [pc, #256]	@ (8002154 <main+0x120>)
 8002054:	f007 f89b 	bl	800918e <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002058:	f000 f896 	bl	8002188 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800205c:	f000 f900 	bl	8002260 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002060:	f000 fa8e 	bl	8002580 <MX_GPIO_Init>
  MX_DMA_Init();
 8002064:	f000 fa66 	bl	8002534 <MX_DMA_Init>
  MX_I2S2_Init();
 8002068:	f000 f960 	bl	800232c <MX_I2S2_Init>
  MX_I2S3_Init();
 800206c:	f000 f98a 	bl	8002384 <MX_I2S3_Init>
  MX_TIM1_Init();
 8002070:	f000 f9b2 	bl	80023d8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8002074:	f000 f918 	bl	80022a8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002078:	f000 fa08 	bl	800248c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd.hi2c = &hi2c1;
 800207c:	4b36      	ldr	r3, [pc, #216]	@ (8002158 <main+0x124>)
 800207e:	4a37      	ldr	r2, [pc, #220]	@ (800215c <main+0x128>)
 8002080:	601a      	str	r2, [r3, #0]
  lcd.address = (0x27 << 1); // Magic bit shifting beucse an arbitrary address wasnt bad enough
 8002082:	4b35      	ldr	r3, [pc, #212]	@ (8002158 <main+0x124>)
 8002084:	224e      	movs	r2, #78	@ 0x4e
 8002086:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd);
 8002088:	4833      	ldr	r0, [pc, #204]	@ (8002158 <main+0x124>)
 800208a:	f7ff ff75 	bl	8001f78 <lcd_init>
  lcd_puts(&lcd, "No Effect");
 800208e:	4934      	ldr	r1, [pc, #208]	@ (8002160 <main+0x12c>)
 8002090:	4831      	ldr	r0, [pc, #196]	@ (8002158 <main+0x124>)
 8002092:	f7ff ffb8 	bl	8002006 <lcd_puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //DelayInit(&lcd);
  EchoInit(&lcd, hi2s2.Init.AudioFreq);
 8002096:	4b33      	ldr	r3, [pc, #204]	@ (8002164 <main+0x130>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	4619      	mov	r1, r3
 800209c:	482e      	ldr	r0, [pc, #184]	@ (8002158 <main+0x124>)
 800209e:	f7fe ff89 	bl	8000fb4 <EchoInit>
  FilterEffectInit(&lcd, hi2s2.Init.AudioFreq);
 80020a2:	4b30      	ldr	r3, [pc, #192]	@ (8002164 <main+0x130>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	4619      	mov	r1, r3
 80020a8:	482b      	ldr	r0, [pc, #172]	@ (8002158 <main+0x124>)
 80020aa:	f7ff fba9 	bl	8001800 <FilterEffectInit>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80020ae:	213c      	movs	r1, #60	@ 0x3c
 80020b0:	482d      	ldr	r0, [pc, #180]	@ (8002168 <main+0x134>)
 80020b2:	f005 fddf 	bl	8007c74 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80020b6:	213c      	movs	r1, #60	@ 0x3c
 80020b8:	482c      	ldr	r0, [pc, #176]	@ (800216c <main+0x138>)
 80020ba:	f005 fddb 	bl	8007c74 <HAL_TIM_Encoder_Start>
  if(HAL_I2S_Transmit_DMA(&hi2s3, txBuf, SAMPLES*2 ) != HAL_OK ||
 80020be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020c2:	4923      	ldr	r1, [pc, #140]	@ (8002150 <main+0x11c>)
 80020c4:	482a      	ldr	r0, [pc, #168]	@ (8002170 <main+0x13c>)
 80020c6:	f003 fbe1 	bl	800588c <HAL_I2S_Transmit_DMA>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <main+0xae>
  HAL_I2S_Receive_DMA(&hi2s2, rxBuf, SAMPLES*2 ) != HAL_OK){
 80020d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020d4:	491f      	ldr	r1, [pc, #124]	@ (8002154 <main+0x120>)
 80020d6:	4823      	ldr	r0, [pc, #140]	@ (8002164 <main+0x130>)
 80020d8:	f003 fc7c 	bl	80059d4 <HAL_I2S_Receive_DMA>
 80020dc:	4603      	mov	r3, r0
  if(HAL_I2S_Transmit_DMA(&hi2s3, txBuf, SAMPLES*2 ) != HAL_OK ||
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <main+0xb2>
	  Error_Handler();
 80020e2:	f000 fd09 	bl	8002af8 <Error_Handler>


  while (1)
  {

	  if ( rxHalfComplete && txHalfComplete )
 80020e6:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <main+0x140>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00d      	beq.n	800210a <main+0xd6>
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <main+0x144>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <main+0xd6>
	  	  {
		      doEffect(0);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f000 fbcc 	bl	8002894 <doEffect>

	  		  rxHalfComplete = 0;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <main+0x140>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
	  		  txHalfComplete = 0;
 8002102:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <main+0x144>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e020      	b.n	800214c <main+0x118>
	  	  }

	  else if ( rxFullComplete && txFullComplete )
 800210a:	4b1c      	ldr	r3, [pc, #112]	@ (800217c <main+0x148>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00d      	beq.n	800212e <main+0xfa>
 8002112:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <main+0x14c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <main+0xfa>
	  	  {
		  	  doEffect(1);
 800211a:	2001      	movs	r0, #1
 800211c:	f000 fbba 	bl	8002894 <doEffect>

	  		  rxFullComplete = 0;
 8002120:	4b16      	ldr	r3, [pc, #88]	@ (800217c <main+0x148>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
	  		  txFullComplete = 0;
 8002126:	4b16      	ldr	r3, [pc, #88]	@ (8002180 <main+0x14c>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e00e      	b.n	800214c <main+0x118>
	  	  }
	  else{
		  stateUpdateCounter++;
 800212e:	4b15      	ldr	r3, [pc, #84]	@ (8002184 <main+0x150>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3301      	adds	r3, #1
 8002134:	4a13      	ldr	r2, [pc, #76]	@ (8002184 <main+0x150>)
 8002136:	6013      	str	r3, [r2, #0]
		  if(stateUpdateCounter > STATE_UPDATE_DIV)
 8002138:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <main+0x150>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002140:	ddd1      	ble.n	80020e6 <main+0xb2>
		  {
			  updateState();
 8002142:	f000 fa9f 	bl	8002684 <updateState>
			  stateUpdateCounter = 0;
 8002146:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <main+0x150>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
	  if ( rxHalfComplete && txHalfComplete )
 800214c:	e7cb      	b.n	80020e6 <main+0xb2>
 800214e:	bf00      	nop
 8002150:	2003bea0 	.word	0x2003bea0
 8002154:	2003aea0 	.word	0x2003aea0
 8002158:	2003dea4 	.word	0x2003dea4
 800215c:	2003ac60 	.word	0x2003ac60
 8002160:	0800c4e0 	.word	0x0800c4e0
 8002164:	2003acb4 	.word	0x2003acb4
 8002168:	2003adf4 	.word	0x2003adf4
 800216c:	2003ae40 	.word	0x2003ae40
 8002170:	2003acf4 	.word	0x2003acf4
 8002174:	2003ae8c 	.word	0x2003ae8c
 8002178:	2003ae90 	.word	0x2003ae90
 800217c:	2003ae94 	.word	0x2003ae94
 8002180:	2003ae98 	.word	0x2003ae98
 8002184:	2003ae9c 	.word	0x2003ae9c

08002188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b094      	sub	sp, #80	@ 0x50
 800218c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218e:	f107 0320 	add.w	r3, r7, #32
 8002192:	2230      	movs	r2, #48	@ 0x30
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f006 fff9 	bl	800918e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002258 <SystemClock_Config+0xd0>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	4a29      	ldr	r2, [pc, #164]	@ (8002258 <SystemClock_Config+0xd0>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b8:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <SystemClock_Config+0xd0>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c4:	4b25      	ldr	r3, [pc, #148]	@ (800225c <SystemClock_Config+0xd4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a24      	ldr	r2, [pc, #144]	@ (800225c <SystemClock_Config+0xd4>)
 80021ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b22      	ldr	r3, [pc, #136]	@ (800225c <SystemClock_Config+0xd4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021dc:	2302      	movs	r3, #2
 80021de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021e0:	2301      	movs	r3, #1
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021e4:	2310      	movs	r3, #16
 80021e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e8:	2302      	movs	r3, #2
 80021ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021f0:	2308      	movs	r3, #8
 80021f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80021f4:	23d8      	movs	r3, #216	@ 0xd8
 80021f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021f8:	2302      	movs	r3, #2
 80021fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80021fc:	2302      	movs	r3, #2
 80021fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002200:	f107 0320 	add.w	r3, r7, #32
 8002204:	4618      	mov	r0, r3
 8002206:	f003 fdc7 	bl	8005d98 <HAL_RCC_OscConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002210:	f000 fc72 	bl	8002af8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002214:	f003 fd70 	bl	8005cf8 <HAL_PWREx_EnableOverDrive>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800221e:	f000 fc6b 	bl	8002af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002222:	230f      	movs	r3, #15
 8002224:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002226:	2302      	movs	r3, #2
 8002228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800222e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002232:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002238:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	2107      	movs	r1, #7
 8002240:	4618      	mov	r0, r3
 8002242:	f004 f903 	bl	800644c <HAL_RCC_ClockConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800224c:	f000 fc54 	bl	8002af8 <Error_Handler>
  }
}
 8002250:	bf00      	nop
 8002252:	3750      	adds	r7, #80	@ 0x50
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	40007000 	.word	0x40007000

08002260 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b0a2      	sub	sp, #136	@ 0x88
 8002264:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2284      	movs	r2, #132	@ 0x84
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f006 ff8e 	bl	800918e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002272:	2301      	movs	r3, #1
 8002274:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 197;
 8002276:	23c5      	movs	r3, #197	@ 0xc5
 8002278:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800227a:	2302      	movs	r3, #2
 800227c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 800227e:	2304      	movs	r3, #4
 8002280:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002282:	2302      	movs	r3, #2
 8002284:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8002286:	2301      	movs	r3, #1
 8002288:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 800228a:	2300      	movs	r3, #0
 800228c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	4618      	mov	r0, r3
 8002292:	f004 fb49 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <PeriphCommonClock_Config+0x40>
  {
    Error_Handler();
 800229c:	f000 fc2c 	bl	8002af8 <Error_Handler>
  }
}
 80022a0:	bf00      	nop
 80022a2:	3788      	adds	r7, #136	@ 0x88
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <MX_I2C1_Init+0x78>)
 80022ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002324 <MX_I2C1_Init+0x7c>)
 80022b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00200922;
 80022b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <MX_I2C1_Init+0x78>)
 80022b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002328 <MX_I2C1_Init+0x80>)
 80022b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022b8:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <MX_I2C1_Init+0x78>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022be:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <MX_I2C1_Init+0x78>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c4:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <MX_I2C1_Init+0x78>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <MX_I2C1_Init+0x78>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022d0:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <MX_I2C1_Init+0x78>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d6:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <MX_I2C1_Init+0x78>)
 80022d8:	2200      	movs	r2, #0
 80022da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022dc:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <MX_I2C1_Init+0x78>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022e2:	480f      	ldr	r0, [pc, #60]	@ (8002320 <MX_I2C1_Init+0x78>)
 80022e4:	f002 fb6a 	bl	80049bc <HAL_I2C_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80022ee:	f000 fc03 	bl	8002af8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022f2:	2100      	movs	r1, #0
 80022f4:	480a      	ldr	r0, [pc, #40]	@ (8002320 <MX_I2C1_Init+0x78>)
 80022f6:	f003 f80b 	bl	8005310 <HAL_I2CEx_ConfigAnalogFilter>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002300:	f000 fbfa 	bl	8002af8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002304:	2100      	movs	r1, #0
 8002306:	4806      	ldr	r0, [pc, #24]	@ (8002320 <MX_I2C1_Init+0x78>)
 8002308:	f003 f878 	bl	80053fc <HAL_I2CEx_ConfigDigitalFilter>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002312:	f000 fbf1 	bl	8002af8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002316:	2001      	movs	r0, #1
 8002318:	f003 f8e4 	bl	80054e4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	2003ac60 	.word	0x2003ac60
 8002324:	40005400 	.word	0x40005400
 8002328:	00200922 	.word	0x00200922

0800232c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <MX_I2S2_Init+0x4c>)
 8002332:	4a12      	ldr	r2, [pc, #72]	@ (800237c <MX_I2S2_Init+0x50>)
 8002334:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8002336:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <MX_I2S2_Init+0x4c>)
 8002338:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800233c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800233e:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <MX_I2S2_Init+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <MX_I2S2_Init+0x4c>)
 8002346:	2203      	movs	r2, #3
 8002348:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <MX_I2S2_Init+0x4c>)
 800234c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002350:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <MX_I2S2_Init+0x4c>)
 8002354:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <MX_I2S2_Init+0x54>)
 8002356:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002358:	4b07      	ldr	r3, [pc, #28]	@ (8002378 <MX_I2S2_Init+0x4c>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <MX_I2S2_Init+0x4c>)
 8002360:	2202      	movs	r2, #2
 8002362:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002364:	4804      	ldr	r0, [pc, #16]	@ (8002378 <MX_I2S2_Init+0x4c>)
 8002366:	f003 f909 	bl	800557c <HAL_I2S_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_I2S2_Init+0x48>
  {
    Error_Handler();
 8002370:	f000 fbc2 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	2003acb4 	.word	0x2003acb4
 800237c:	40003800 	.word	0x40003800
 8002380:	00017700 	.word	0x00017700

08002384 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002388:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <MX_I2S3_Init+0x48>)
 800238a:	4a11      	ldr	r2, [pc, #68]	@ (80023d0 <MX_I2S3_Init+0x4c>)
 800238c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_TX;
 800238e:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <MX_I2S3_Init+0x48>)
 8002390:	2200      	movs	r2, #0
 8002392:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002394:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <MX_I2S3_Init+0x48>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 800239a:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <MX_I2S3_Init+0x48>)
 800239c:	2203      	movs	r2, #3
 800239e:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80023a0:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <MX_I2S3_Init+0x48>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80023a6:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <MX_I2S3_Init+0x48>)
 80023a8:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <MX_I2S3_Init+0x50>)
 80023aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80023ac:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <MX_I2S3_Init+0x48>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <MX_I2S3_Init+0x48>)
 80023b4:	2202      	movs	r2, #2
 80023b6:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80023b8:	4804      	ldr	r0, [pc, #16]	@ (80023cc <MX_I2S3_Init+0x48>)
 80023ba:	f003 f8df 	bl	800557c <HAL_I2S_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_I2S3_Init+0x44>
  {
    Error_Handler();
 80023c4:	f000 fb98 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	2003acf4 	.word	0x2003acf4
 80023d0:	40003c00 	.word	0x40003c00
 80023d4:	00017700 	.word	0x00017700

080023d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	@ 0x30
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	2224      	movs	r2, #36	@ 0x24
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f006 fed1 	bl	800918e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ec:	463b      	mov	r3, r7
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023f6:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <MX_TIM1_Init+0xac>)
 80023f8:	4a23      	ldr	r2, [pc, #140]	@ (8002488 <MX_TIM1_Init+0xb0>)
 80023fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023fc:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <MX_TIM1_Init+0xac>)
 80023fe:	2200      	movs	r2, #0
 8002400:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002402:	4b20      	ldr	r3, [pc, #128]	@ (8002484 <MX_TIM1_Init+0xac>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002408:	4b1e      	ldr	r3, [pc, #120]	@ (8002484 <MX_TIM1_Init+0xac>)
 800240a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800240e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002410:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <MX_TIM1_Init+0xac>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002416:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <MX_TIM1_Init+0xac>)
 8002418:	2200      	movs	r2, #0
 800241a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241c:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <MX_TIM1_Init+0xac>)
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002422:	2301      	movs	r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800242a:	2301      	movs	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800243a:	2301      	movs	r3, #1
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	4619      	mov	r1, r3
 800244c:	480d      	ldr	r0, [pc, #52]	@ (8002484 <MX_TIM1_Init+0xac>)
 800244e:	f005 fa4f 	bl	80078f0 <HAL_TIM_Encoder_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002458:	f000 fb4e 	bl	8002af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002468:	463b      	mov	r3, r7
 800246a:	4619      	mov	r1, r3
 800246c:	4805      	ldr	r0, [pc, #20]	@ (8002484 <MX_TIM1_Init+0xac>)
 800246e:	f005 fdef 	bl	8008050 <HAL_TIMEx_MasterConfigSynchronization>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002478:	f000 fb3e 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	3730      	adds	r7, #48	@ 0x30
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	2003adf4 	.word	0x2003adf4
 8002488:	40010000 	.word	0x40010000

0800248c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08c      	sub	sp, #48	@ 0x30
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	2224      	movs	r2, #36	@ 0x24
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f006 fe77 	bl	800918e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a0:	463b      	mov	r3, r7
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024aa:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80024be:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024c0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80024c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024cc:	4b18      	ldr	r3, [pc, #96]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024d2:	2301      	movs	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80024e2:	230a      	movs	r3, #10
 80024e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024ea:	2301      	movs	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80024f2:	230a      	movs	r3, #10
 80024f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4619      	mov	r1, r3
 80024fc:	480c      	ldr	r0, [pc, #48]	@ (8002530 <MX_TIM2_Init+0xa4>)
 80024fe:	f005 f9f7 	bl	80078f0 <HAL_TIM_Encoder_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002508:	f000 faf6 	bl	8002af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250c:	2300      	movs	r3, #0
 800250e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002514:	463b      	mov	r3, r7
 8002516:	4619      	mov	r1, r3
 8002518:	4805      	ldr	r0, [pc, #20]	@ (8002530 <MX_TIM2_Init+0xa4>)
 800251a:	f005 fd99 	bl	8008050 <HAL_TIMEx_MasterConfigSynchronization>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002524:	f000 fae8 	bl	8002af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	3730      	adds	r7, #48	@ 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	2003ae40 	.word	0x2003ae40

08002534 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800253a:	4b10      	ldr	r3, [pc, #64]	@ (800257c <MX_DMA_Init+0x48>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a0f      	ldr	r2, [pc, #60]	@ (800257c <MX_DMA_Init+0x48>)
 8002540:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <MX_DMA_Init+0x48>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	200e      	movs	r0, #14
 8002558:	f000 ffd0 	bl	80034fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800255c:	200e      	movs	r0, #14
 800255e:	f000 fff9 	bl	8003554 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002562:	2200      	movs	r2, #0
 8002564:	2100      	movs	r1, #0
 8002566:	2010      	movs	r0, #16
 8002568:	f000 ffc8 	bl	80034fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800256c:	2010      	movs	r0, #16
 800256e:	f000 fff1 	bl	8003554 <HAL_NVIC_EnableIRQ>

}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08c      	sub	sp, #48	@ 0x30
 8002584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002596:	4b38      	ldr	r3, [pc, #224]	@ (8002678 <MX_GPIO_Init+0xf8>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	4a37      	ldr	r2, [pc, #220]	@ (8002678 <MX_GPIO_Init+0xf8>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a2:	4b35      	ldr	r3, [pc, #212]	@ (8002678 <MX_GPIO_Init+0xf8>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ae:	4b32      	ldr	r3, [pc, #200]	@ (8002678 <MX_GPIO_Init+0xf8>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	4a31      	ldr	r2, [pc, #196]	@ (8002678 <MX_GPIO_Init+0xf8>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002678 <MX_GPIO_Init+0xf8>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002678 <MX_GPIO_Init+0xf8>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002678 <MX_GPIO_Init+0xf8>)
 80025cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4b29      	ldr	r3, [pc, #164]	@ (8002678 <MX_GPIO_Init+0xf8>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025de:	4b26      	ldr	r3, [pc, #152]	@ (8002678 <MX_GPIO_Init+0xf8>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	4a25      	ldr	r2, [pc, #148]	@ (8002678 <MX_GPIO_Init+0xf8>)
 80025e4:	f043 0310 	orr.w	r3, r3, #16
 80025e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ea:	4b23      	ldr	r3, [pc, #140]	@ (8002678 <MX_GPIO_Init+0xf8>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <MX_GPIO_Init+0xf8>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002678 <MX_GPIO_Init+0xf8>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	6313      	str	r3, [r2, #48]	@ 0x30
 8002602:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <MX_GPIO_Init+0xf8>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800260e:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <MX_GPIO_Init+0xf8>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	4a19      	ldr	r2, [pc, #100]	@ (8002678 <MX_GPIO_Init+0xf8>)
 8002614:	f043 0308 	orr.w	r3, r3, #8
 8002618:	6313      	str	r3, [r2, #48]	@ 0x30
 800261a:	4b17      	ldr	r3, [pc, #92]	@ (8002678 <MX_GPIO_Init+0xf8>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : EncoderSW_Pin */
  GPIO_InitStruct.Pin = EncoderSW_Pin;
 8002626:	2301      	movs	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EncoderSW_GPIO_Port, &GPIO_InitStruct);
 8002632:	f107 031c 	add.w	r3, r7, #28
 8002636:	4619      	mov	r1, r3
 8002638:	4810      	ldr	r0, [pc, #64]	@ (800267c <MX_GPIO_Init+0xfc>)
 800263a:	f001 fe2f 	bl	800429c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 800263e:	2302      	movs	r3, #2
 8002640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002646:	2301      	movs	r3, #1
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	480a      	ldr	r0, [pc, #40]	@ (800267c <MX_GPIO_Init+0xfc>)
 8002652:	f001 fe23 	bl	800429c <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderSW2_Pin */
  GPIO_InitStruct.Pin = EncoderSW2_Pin;
 8002656:	2302      	movs	r3, #2
 8002658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EncoderSW2_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	@ (8002680 <MX_GPIO_Init+0x100>)
 800266a:	f001 fe17 	bl	800429c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800266e:	bf00      	nop
 8002670:	3730      	adds	r7, #48	@ 0x30
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40021800 	.word	0x40021800
 8002680:	40020c00 	.word	0x40020c00

08002684 <updateState>:

/* USER CODE BEGIN 4 */
static void updateState(){
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
	int isModButtonDown = (HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET);
 800268a:	2102      	movs	r1, #2
 800268c:	4879      	ldr	r0, [pc, #484]	@ (8002874 <updateState+0x1f0>)
 800268e:	f002 f975 	bl	800497c <HAL_GPIO_ReadPin>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	607b      	str	r3, [r7, #4]
	mState.encoder1Delta = TIM1->CNT - mState.lastEncoderVal1;
 80026a0:	4b75      	ldr	r3, [pc, #468]	@ (8002878 <updateState+0x1f4>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	4a75      	ldr	r2, [pc, #468]	@ (800287c <updateState+0x1f8>)
 80026a6:	68d2      	ldr	r2, [r2, #12]
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b73      	ldr	r3, [pc, #460]	@ (800287c <updateState+0x1f8>)
 80026ae:	611a      	str	r2, [r3, #16]
	mState.encoder2Delta = TIM2->CNT - mState.lastEncoderVal2;
 80026b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	4a71      	ldr	r2, [pc, #452]	@ (800287c <updateState+0x1f8>)
 80026b8:	6952      	ldr	r2, [r2, #20]
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4b6f      	ldr	r3, [pc, #444]	@ (800287c <updateState+0x1f8>)
 80026c0:	619a      	str	r2, [r3, #24]
	if(abs(mState.encoder1Delta) > 20 || abs(mState.encoder2Delta) > 20) {
 80026c2:	4b6e      	ldr	r3, [pc, #440]	@ (800287c <updateState+0x1f8>)
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bfb8      	it	lt
 80026ca:	425b      	neglt	r3, r3
 80026cc:	2b14      	cmp	r3, #20
 80026ce:	dc06      	bgt.n	80026de <updateState+0x5a>
 80026d0:	4b6a      	ldr	r3, [pc, #424]	@ (800287c <updateState+0x1f8>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bfb8      	it	lt
 80026d8:	425b      	neglt	r3, r3
 80026da:	2b14      	cmp	r3, #20
 80026dc:	dd0e      	ble.n	80026fc <updateState+0x78>
		mState.lastEncoderVal1 += mState.encoder1Delta;
 80026de:	4b67      	ldr	r3, [pc, #412]	@ (800287c <updateState+0x1f8>)
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	4b66      	ldr	r3, [pc, #408]	@ (800287c <updateState+0x1f8>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	4a64      	ldr	r2, [pc, #400]	@ (800287c <updateState+0x1f8>)
 80026ea:	60d3      	str	r3, [r2, #12]
		mState.lastEncoderVal2 += mState.encoder2Delta;
 80026ec:	4b63      	ldr	r3, [pc, #396]	@ (800287c <updateState+0x1f8>)
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	4b62      	ldr	r3, [pc, #392]	@ (800287c <updateState+0x1f8>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a61      	ldr	r2, [pc, #388]	@ (800287c <updateState+0x1f8>)
 80026f8:	6153      	str	r3, [r2, #20]
		return;
 80026fa:	e0b7      	b.n	800286c <updateState+0x1e8>
	}
	if(isModButtonDown){
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 808d 	beq.w	800281e <updateState+0x19a>
		if(mState.encoder1Delta !=0){
 8002704:	4b5d      	ldr	r3, [pc, #372]	@ (800287c <updateState+0x1f8>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d057      	beq.n	80027bc <updateState+0x138>
			if(mState.effectTracker == 0) {
 800270c:	4b5b      	ldr	r3, [pc, #364]	@ (800287c <updateState+0x1f8>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <updateState+0x98>
				mState.effectTracker = 1;
 8002714:	4b59      	ldr	r3, [pc, #356]	@ (800287c <updateState+0x1f8>)
 8002716:	2201      	movs	r2, #1
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	e04f      	b.n	80027bc <updateState+0x138>
			} else {
				mState.effectTracker = 0;
 800271c:	4b57      	ldr	r3, [pc, #348]	@ (800287c <updateState+0x1f8>)
 800271e:	2200      	movs	r2, #0
 8002720:	605a      	str	r2, [r3, #4]

				if(mState.encoder1Delta > 0 && mState.currentEffect < NUM_EFFECTS - 1)
 8002722:	4b56      	ldr	r3, [pc, #344]	@ (800287c <updateState+0x1f8>)
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	dd0a      	ble.n	8002740 <updateState+0xbc>
 800272a:	4b54      	ldr	r3, [pc, #336]	@ (800287c <updateState+0x1f8>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d806      	bhi.n	8002740 <updateState+0xbc>
					mState.currentEffect = (mState.currentEffect + 1);
 8002732:	4b52      	ldr	r3, [pc, #328]	@ (800287c <updateState+0x1f8>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	3301      	adds	r3, #1
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b50      	ldr	r3, [pc, #320]	@ (800287c <updateState+0x1f8>)
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e00d      	b.n	800275c <updateState+0xd8>

				else if(mState.encoder1Delta < 0 && mState.currentEffect != 0)
 8002740:	4b4e      	ldr	r3, [pc, #312]	@ (800287c <updateState+0x1f8>)
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	da09      	bge.n	800275c <updateState+0xd8>
 8002748:	4b4c      	ldr	r3, [pc, #304]	@ (800287c <updateState+0x1f8>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <updateState+0xd8>
					mState.currentEffect = (mState.currentEffect - 1);
 8002750:	4b4a      	ldr	r3, [pc, #296]	@ (800287c <updateState+0x1f8>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	3b01      	subs	r3, #1
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b48      	ldr	r3, [pc, #288]	@ (800287c <updateState+0x1f8>)
 800275a:	701a      	strb	r2, [r3, #0]

				switch(mState.currentEffect){
 800275c:	4b47      	ldr	r3, [pc, #284]	@ (800287c <updateState+0x1f8>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d82b      	bhi.n	80027bc <updateState+0x138>
 8002764:	a201      	add	r2, pc, #4	@ (adr r2, 800276c <updateState+0xe8>)
 8002766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276a:	bf00      	nop
 800276c:	08002781 	.word	0x08002781
 8002770:	08002791 	.word	0x08002791
 8002774:	08002797 	.word	0x08002797
 8002778:	080027a7 	.word	0x080027a7
 800277c:	080027ad 	.word	0x080027ad
					case PASS:
						lcd_clear(&lcd);
 8002780:	483f      	ldr	r0, [pc, #252]	@ (8002880 <updateState+0x1fc>)
 8002782:	f7ff fbad 	bl	8001ee0 <lcd_clear>
						lcd_puts(&lcd, "No Effect");
 8002786:	493f      	ldr	r1, [pc, #252]	@ (8002884 <updateState+0x200>)
 8002788:	483d      	ldr	r0, [pc, #244]	@ (8002880 <updateState+0x1fc>)
 800278a:	f7ff fc3c 	bl	8002006 <lcd_puts>
						break;
 800278e:	e015      	b.n	80027bc <updateState+0x138>
					case ECHO:
						EchoPrintInit();
 8002790:	f7fe fe6e 	bl	8001470 <EchoPrintInit>
						break;
 8002794:	e012      	b.n	80027bc <updateState+0x138>
					case DELAY:
						lcd_clear(&lcd);
 8002796:	483a      	ldr	r0, [pc, #232]	@ (8002880 <updateState+0x1fc>)
 8002798:	f7ff fba2 	bl	8001ee0 <lcd_clear>
						lcd_puts(&lcd, "Delay");
 800279c:	493a      	ldr	r1, [pc, #232]	@ (8002888 <updateState+0x204>)
 800279e:	4838      	ldr	r0, [pc, #224]	@ (8002880 <updateState+0x1fc>)
 80027a0:	f7ff fc31 	bl	8002006 <lcd_puts>
						break;
 80027a4:	e00a      	b.n	80027bc <updateState+0x138>
					case FILTER:
						FilterEffectPrintInit();
 80027a6:	f7ff fa59 	bl	8001c5c <FilterEffectPrintInit>
						break;
 80027aa:	e007      	b.n	80027bc <updateState+0x138>
					case NUM_EFFECTS:
						lcd_clear(&lcd);
 80027ac:	4834      	ldr	r0, [pc, #208]	@ (8002880 <updateState+0x1fc>)
 80027ae:	f7ff fb97 	bl	8001ee0 <lcd_clear>
						lcd_puts(&lcd, "NUM_EFFECTS (error)");
 80027b2:	4936      	ldr	r1, [pc, #216]	@ (800288c <updateState+0x208>)
 80027b4:	4832      	ldr	r0, [pc, #200]	@ (8002880 <updateState+0x1fc>)
 80027b6:	f7ff fc26 	bl	8002006 <lcd_puts>
						break;
 80027ba:	bf00      	nop
				}
			}
		}
		if(mState.encoder2Delta != 0){
 80027bc:	4b2f      	ldr	r3, [pc, #188]	@ (800287c <updateState+0x1f8>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d045      	beq.n	8002850 <updateState+0x1cc>
			mState.volume += mState.encoder2Delta*0.01f;
 80027c4:	4b2d      	ldr	r3, [pc, #180]	@ (800287c <updateState+0x1f8>)
 80027c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80027ca:	4b2c      	ldr	r3, [pc, #176]	@ (800287c <updateState+0x1f8>)
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d6:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8002890 <updateState+0x20c>
 80027da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e2:	4b26      	ldr	r3, [pc, #152]	@ (800287c <updateState+0x1f8>)
 80027e4:	edc3 7a02 	vstr	s15, [r3, #8]
			if(mState.volume < 0.) mState.volume = 0.f;
 80027e8:	4b24      	ldr	r3, [pc, #144]	@ (800287c <updateState+0x1f8>)
 80027ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80027ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f6:	d503      	bpl.n	8002800 <updateState+0x17c>
 80027f8:	4b20      	ldr	r3, [pc, #128]	@ (800287c <updateState+0x1f8>)
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
			if(mState.volume > 1.) mState.volume = 1.f;
 8002800:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <updateState+0x1f8>)
 8002802:	edd3 7a02 	vldr	s15, [r3, #8]
 8002806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800280a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	dd1d      	ble.n	8002850 <updateState+0x1cc>
 8002814:	4b19      	ldr	r3, [pc, #100]	@ (800287c <updateState+0x1f8>)
 8002816:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	e018      	b.n	8002850 <updateState+0x1cc>
		}
	}
	else{
		switch(mState.currentEffect){
 800281e:	4b17      	ldr	r3, [pc, #92]	@ (800287c <updateState+0x1f8>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b04      	cmp	r3, #4
 8002824:	d814      	bhi.n	8002850 <updateState+0x1cc>
 8002826:	a201      	add	r2, pc, #4	@ (adr r2, 800282c <updateState+0x1a8>)
 8002828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282c:	08002851 	.word	0x08002851
 8002830:	08002841 	.word	0x08002841
 8002834:	08002851 	.word	0x08002851
 8002838:	08002849 	.word	0x08002849
 800283c:	08002851 	.word	0x08002851
			case PASS:
				break;
			case ECHO:
				EchoUpdateState(&mState);
 8002840:	480e      	ldr	r0, [pc, #56]	@ (800287c <updateState+0x1f8>)
 8002842:	f7fe fd11 	bl	8001268 <EchoUpdateState>
				break;
 8002846:	e003      	b.n	8002850 <updateState+0x1cc>
			case DELAY:
				break;
			case FILTER:
				FilterEffectUpdateState(&mState);
 8002848:	480c      	ldr	r0, [pc, #48]	@ (800287c <updateState+0x1f8>)
 800284a:	f7ff f8c1 	bl	80019d0 <FilterEffectUpdateState>
				break;
 800284e:	bf00      	nop
			case NUM_EFFECTS:
				break;
		}

	}
	mState.lastEncoderVal1 += mState.encoder1Delta;
 8002850:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <updateState+0x1f8>)
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	4b09      	ldr	r3, [pc, #36]	@ (800287c <updateState+0x1f8>)
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	4413      	add	r3, r2
 800285a:	4a08      	ldr	r2, [pc, #32]	@ (800287c <updateState+0x1f8>)
 800285c:	60d3      	str	r3, [r2, #12]
	mState.lastEncoderVal2 += mState.encoder2Delta;
 800285e:	4b07      	ldr	r3, [pc, #28]	@ (800287c <updateState+0x1f8>)
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <updateState+0x1f8>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	4413      	add	r3, r2
 8002868:	4a04      	ldr	r2, [pc, #16]	@ (800287c <updateState+0x1f8>)
 800286a:	6153      	str	r3, [r2, #20]
}
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40021800 	.word	0x40021800
 8002878:	40010000 	.word	0x40010000
 800287c:	2000004c 	.word	0x2000004c
 8002880:	2003dea4 	.word	0x2003dea4
 8002884:	0800c4e0 	.word	0x0800c4e0
 8002888:	0800c4ec 	.word	0x0800c4ec
 800288c:	0800c4f4 	.word	0x0800c4f4
 8002890:	3c23d70a 	.word	0x3c23d70a

08002894 <doEffect>:


static void doEffect(int b){
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	switch(mState.currentEffect){
 800289c:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <doEffect+0x5c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d821      	bhi.n	80028e8 <doEffect+0x54>
 80028a4:	a201      	add	r2, pc, #4	@ (adr r2, 80028ac <doEffect+0x18>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028c1 	.word	0x080028c1
 80028b0:	080028c9 	.word	0x080028c9
 80028b4:	080028d1 	.word	0x080028d1
 80028b8:	080028d9 	.word	0x080028d9
 80028bc:	080028e1 	.word	0x080028e1
	case PASS:
		doPassthru(b);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f817 	bl	80028f4 <doPassthru>
		break;
 80028c6:	e00f      	b.n	80028e8 <doEffect+0x54>
	case ECHO:
		doEcho(b);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7fe fb97 	bl	8000ffc <doEcho>
		break;
 80028ce:	e00b      	b.n	80028e8 <doEffect+0x54>
	case DELAY:
		doPassthru(b);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f80f 	bl	80028f4 <doPassthru>
		break;
 80028d6:	e007      	b.n	80028e8 <doEffect+0x54>
	case FILTER:
		doFilterEffect(b);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7fe ffa5 	bl	8001828 <doFilterEffect>
		break;
 80028de:	e003      	b.n	80028e8 <doEffect+0x54>
	case NUM_EFFECTS:
		doPassthru(b);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f807 	bl	80028f4 <doPassthru>
		break;
 80028e6:	bf00      	nop
	}
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2000004c 	.word	0x2000004c

080028f4 <doPassthru>:



void doPassthru( int b )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b08b      	sub	sp, #44	@ 0x2c
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_5, GPIO_PIN_SET );

	int startBuf = b * BUF_SAMPLES / 2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	029b      	lsls	r3, r3, #10
 8002900:	61bb      	str	r3, [r7, #24]
	int endBuf = startBuf + BUF_SAMPLES / 2;
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002908:	617b      	str	r3, [r7, #20]

	int i = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	e030      	b.n	8002976 <doPassthru+0x82>
	{
		  srcLeft[i] = ( (rxBuf[pos]<<16)|rxBuf[pos+1]);
 8002914:	4a3e      	ldr	r2, [pc, #248]	@ (8002a10 <doPassthru+0x11c>)
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	6a3a      	ldr	r2, [r7, #32]
 8002920:	3201      	adds	r2, #1
 8002922:	493b      	ldr	r1, [pc, #236]	@ (8002a10 <doPassthru+0x11c>)
 8002924:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002928:	4313      	orrs	r3, r2
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002932:	4a38      	ldr	r2, [pc, #224]	@ (8002a14 <doPassthru+0x120>)
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	edc3 7a00 	vstr	s15, [r3]
		  srcRight[i] = ( (rxBuf[pos+2]<<16)|rxBuf[pos+3] );
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	3302      	adds	r3, #2
 8002942:	4a33      	ldr	r2, [pc, #204]	@ (8002a10 <doPassthru+0x11c>)
 8002944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002948:	041b      	lsls	r3, r3, #16
 800294a:	6a3a      	ldr	r2, [r7, #32]
 800294c:	3203      	adds	r2, #3
 800294e:	4930      	ldr	r1, [pc, #192]	@ (8002a10 <doPassthru+0x11c>)
 8002950:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002954:	4313      	orrs	r3, r2
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a18 <doPassthru+0x124>)
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	edc3 7a00 	vstr	s15, [r3]
		  i++;
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	3301      	adds	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	3304      	adds	r3, #4
 8002974:	623b      	str	r3, [r7, #32]
 8002976:	6a3a      	ldr	r2, [r7, #32]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	429a      	cmp	r2, r3
 800297c:	dbca      	blt.n	8002914 <doPassthru+0x20>
	}

	i = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	e038      	b.n	80029fa <doPassthru+0x106>
	  {
			int lval = srcLeft[i] ;
 8002988:	4a22      	ldr	r2, [pc, #136]	@ (8002a14 <doPassthru+0x120>)
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002998:	ee17 3a90 	vmov	r3, s15
 800299c:	613b      	str	r3, [r7, #16]
			int rval = srcRight[i];
 800299e:	4a1e      	ldr	r2, [pc, #120]	@ (8002a18 <doPassthru+0x124>)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ae:	ee17 3a90 	vmov	r3, s15
 80029b2:	60fb      	str	r3, [r7, #12]

		  txBuf[pos] = (lval>>16)&0xFFFF;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	0c1b      	lsrs	r3, r3, #16
 80029b8:	b299      	uxth	r1, r3
 80029ba:	4a18      	ldr	r2, [pc, #96]	@ (8002a1c <doPassthru+0x128>)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[pos+1] = lval&0xFFFF;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3301      	adds	r3, #1
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	b291      	uxth	r1, r2
 80029ca:	4a14      	ldr	r2, [pc, #80]	@ (8002a1c <doPassthru+0x128>)
 80029cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[pos+2] = (rval>>16)&0xFFFF;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	0c1a      	lsrs	r2, r3, #16
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	3302      	adds	r3, #2
 80029d8:	b291      	uxth	r1, r2
 80029da:	4a10      	ldr	r2, [pc, #64]	@ (8002a1c <doPassthru+0x128>)
 80029dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  txBuf[pos+3] = rval&0xFFFF;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	3303      	adds	r3, #3
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	b291      	uxth	r1, r2
 80029e8:	4a0c      	ldr	r2, [pc, #48]	@ (8002a1c <doPassthru+0x128>)
 80029ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  i++;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	3301      	adds	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( int pos = startBuf ; pos < endBuf ; pos+=4 )
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	3304      	adds	r3, #4
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	dbc2      	blt.n	8002988 <doPassthru+0x94>
	  }

    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_5, GPIO_PIN_RESET );

}
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
 8002a06:	372c      	adds	r7, #44	@ 0x2c
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	2003aea0 	.word	0x2003aea0
 8002a14:	2003cea0 	.word	0x2003cea0
 8002a18:	2003d2a0 	.word	0x2003d2a0
 8002a1c:	2003bea0 	.word	0x2003bea0

08002a20 <HAL_I2S_TxCpltCallback>:


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);
	txFullComplete = 1;
 8002a28:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <HAL_I2S_TxCpltCallback+0x1c>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_3, GPIO_PIN_SET );
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_3, GPIO_PIN_RESET );
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	2003ae98 	.word	0x2003ae98

08002a40 <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
    UNUSED(hi2s);
	rxFullComplete = 1;
 8002a48:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <HAL_I2S_RxCpltCallback+0x1c>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_4, GPIO_PIN_SET );
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_4, GPIO_PIN_RESET );
  }
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	2003ae94 	.word	0x2003ae94

08002a60 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);
	txHalfComplete = 1;
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_3, GPIO_PIN_SET );
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_3, GPIO_PIN_RESET );
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	2003ae90 	.word	0x2003ae90

08002a80 <HAL_I2S_RxHalfCpltCallback>:


void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
    UNUSED(hi2s);
	rxHalfComplete = 1;
 8002a88:	4b04      	ldr	r3, [pc, #16]	@ (8002a9c <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_4, GPIO_PIN_SET );
    //HAL_GPIO_WritePin( GPIOE, GPIO_PIN_4, GPIO_PIN_RESET );
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2003ae8c 	.word	0x2003ae8c

08002aa0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002ab2:	f000 fd73 	bl	800359c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002ac2:	231f      	movs	r3, #31
 8002ac4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002ac6:	2387      	movs	r3, #135	@ 0x87
 8002ac8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002ae2:	463b      	mov	r3, r7
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fd91 	bl	800360c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002aea:	2004      	movs	r0, #4
 8002aec:	f000 fd6e 	bl	80035cc <HAL_MPU_Enable>

}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002afc:	b672      	cpsid	i
}
 8002afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b00:	bf00      	nop
 8002b02:	e7fd      	b.n	8002b00 <Error_Handler+0x8>

08002b04 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <HAL_MspInit+0x44>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	4a0e      	ldr	r2, [pc, #56]	@ (8002b60 <HAL_MspInit+0x44>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <HAL_MspInit+0x44>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <HAL_MspInit+0x44>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	4a08      	ldr	r2, [pc, #32]	@ (8002b60 <HAL_MspInit+0x44>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <HAL_MspInit+0x44>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40023800 	.word	0x40023800

08002b64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b0aa      	sub	sp, #168	@ 0xa8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	2284      	movs	r2, #132	@ 0x84
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f006 fb02 	bl	800918e <memset>
  if(hi2c->Instance==I2C1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a22      	ldr	r2, [pc, #136]	@ (8002c18 <HAL_I2C_MspInit+0xb4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d13c      	bne.n	8002c0e <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b9e:	f107 0310 	add.w	r3, r7, #16
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 fec0 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002bae:	f7ff ffa3 	bl	8002af8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <HAL_I2C_MspInit+0xb8>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	4a19      	ldr	r2, [pc, #100]	@ (8002c1c <HAL_I2C_MspInit+0xb8>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bbe:	4b17      	ldr	r3, [pc, #92]	@ (8002c1c <HAL_I2C_MspInit+0xb8>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bd2:	2312      	movs	r3, #18
 8002bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bde:	2303      	movs	r3, #3
 8002be0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002be4:	2304      	movs	r3, #4
 8002be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bea:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002bee:	4619      	mov	r1, r3
 8002bf0:	480b      	ldr	r0, [pc, #44]	@ (8002c20 <HAL_I2C_MspInit+0xbc>)
 8002bf2:	f001 fb53 	bl	800429c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bf6:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <HAL_I2C_MspInit+0xb8>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	4a08      	ldr	r2, [pc, #32]	@ (8002c1c <HAL_I2C_MspInit+0xb8>)
 8002bfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <HAL_I2C_MspInit+0xb8>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c0e:	bf00      	nop
 8002c10:	37a8      	adds	r7, #168	@ 0xa8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40005400 	.word	0x40005400
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020400 	.word	0x40020400

08002c24 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08e      	sub	sp, #56	@ 0x38
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a7b      	ldr	r2, [pc, #492]	@ (8002e30 <HAL_I2S_MspInit+0x20c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d175      	bne.n	8002d32 <HAL_I2S_MspInit+0x10e>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c46:	4b7b      	ldr	r3, [pc, #492]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	4a7a      	ldr	r2, [pc, #488]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c52:	4b78      	ldr	r3, [pc, #480]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c5a:	623b      	str	r3, [r7, #32]
 8002c5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c5e:	4b75      	ldr	r3, [pc, #468]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a74      	ldr	r2, [pc, #464]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b72      	ldr	r3, [pc, #456]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	4b6f      	ldr	r3, [pc, #444]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c82:	4b6c      	ldr	r3, [pc, #432]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
 8002c8c:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8002c8e:	2348      	movs	r3, #72	@ 0x48
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c9e:	2305      	movs	r3, #5
 8002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4863      	ldr	r0, [pc, #396]	@ (8002e38 <HAL_I2S_MspInit+0x214>)
 8002caa:	f001 faf7 	bl	800429c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002cae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cc0:	2305      	movs	r3, #5
 8002cc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cc8:	4619      	mov	r1, r3
 8002cca:	485c      	ldr	r0, [pc, #368]	@ (8002e3c <HAL_I2S_MspInit+0x218>)
 8002ccc:	f001 fae6 	bl	800429c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002cd2:	4a5c      	ldr	r2, [pc, #368]	@ (8002e44 <HAL_I2S_MspInit+0x220>)
 8002cd4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002cd6:	4b5a      	ldr	r3, [pc, #360]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cdc:	4b58      	ldr	r3, [pc, #352]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce2:	4b57      	ldr	r3, [pc, #348]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ce8:	4b55      	ldr	r3, [pc, #340]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002cea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cee:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cf0:	4b53      	ldr	r3, [pc, #332]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cf6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cf8:	4b51      	ldr	r3, [pc, #324]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002cfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cfe:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002d00:	4b4f      	ldr	r3, [pc, #316]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002d02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d06:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d08:	4b4d      	ldr	r3, [pc, #308]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002d14:	484a      	ldr	r0, [pc, #296]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002d16:	f000 fdcf 	bl	80038b8 <HAL_DMA_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2S_MspInit+0x100>
    {
      Error_Handler();
 8002d20:	f7ff feea 	bl	8002af8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a46      	ldr	r2, [pc, #280]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002d28:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d2a:	4a45      	ldr	r2, [pc, #276]	@ (8002e40 <HAL_I2S_MspInit+0x21c>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002d30:	e079      	b.n	8002e26 <HAL_I2S_MspInit+0x202>
  else if(hi2s->Instance==SPI3)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a44      	ldr	r2, [pc, #272]	@ (8002e48 <HAL_I2S_MspInit+0x224>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d174      	bne.n	8002e26 <HAL_I2S_MspInit+0x202>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	4a3c      	ldr	r2, [pc, #240]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d46:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d48:	4b3a      	ldr	r3, [pc, #232]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d54:	4b37      	ldr	r3, [pc, #220]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d58:	4a36      	ldr	r2, [pc, #216]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d60:	4b34      	ldr	r3, [pc, #208]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6c:	4b31      	ldr	r3, [pc, #196]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	4a30      	ldr	r2, [pc, #192]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d78:	4b2e      	ldr	r3, [pc, #184]	@ (8002e34 <HAL_I2S_MspInit+0x210>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d84:	2310      	movs	r3, #16
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	2300      	movs	r3, #0
 8002d92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d94:	2306      	movs	r3, #6
 8002d96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	482b      	ldr	r0, [pc, #172]	@ (8002e4c <HAL_I2S_MspInit+0x228>)
 8002da0:	f001 fa7c 	bl	800429c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002da4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002daa:	2302      	movs	r3, #2
 8002dac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	2300      	movs	r3, #0
 8002db4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002db6:	2306      	movs	r3, #6
 8002db8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	481d      	ldr	r0, [pc, #116]	@ (8002e38 <HAL_I2S_MspInit+0x214>)
 8002dc2:	f001 fa6b 	bl	800429c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002dc6:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002dc8:	4a22      	ldr	r2, [pc, #136]	@ (8002e54 <HAL_I2S_MspInit+0x230>)
 8002dca:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002dcc:	4b20      	ldr	r3, [pc, #128]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002dd4:	2240      	movs	r2, #64	@ 0x40
 8002dd6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dde:	4b1c      	ldr	r3, [pc, #112]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002de0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002de4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002de6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002de8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dec:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dee:	4b18      	ldr	r3, [pc, #96]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002df0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002df4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002df6:	4b16      	ldr	r3, [pc, #88]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002df8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dfc:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dfe:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e04:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002e0a:	4811      	ldr	r0, [pc, #68]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002e0c:	f000 fd54 	bl	80038b8 <HAL_DMA_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2S_MspInit+0x1f6>
      Error_Handler();
 8002e16:	f7ff fe6f 	bl	8002af8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e20:	4a0b      	ldr	r2, [pc, #44]	@ (8002e50 <HAL_I2S_MspInit+0x22c>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002e26:	bf00      	nop
 8002e28:	3738      	adds	r7, #56	@ 0x38
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40003800 	.word	0x40003800
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40020800 	.word	0x40020800
 8002e3c:	40020400 	.word	0x40020400
 8002e40:	2003ad34 	.word	0x2003ad34
 8002e44:	40026058 	.word	0x40026058
 8002e48:	40003c00 	.word	0x40003c00
 8002e4c:	40020000 	.word	0x40020000
 8002e50:	2003ad94 	.word	0x2003ad94
 8002e54:	40026088 	.word	0x40026088

08002e58 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	@ 0x30
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 031c 	add.w	r3, r7, #28
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a3c      	ldr	r2, [pc, #240]	@ (8002f68 <HAL_TIM_Encoder_MspInit+0x110>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d129      	bne.n	8002ece <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e7a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e86:	4b39      	ldr	r3, [pc, #228]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e92:	4b36      	ldr	r3, [pc, #216]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	4a35      	ldr	r2, [pc, #212]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002e98:	f043 0310 	orr.w	r3, r3, #16
 8002e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9e:	4b33      	ldr	r3, [pc, #204]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002eaa:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	482a      	ldr	r0, [pc, #168]	@ (8002f70 <HAL_TIM_Encoder_MspInit+0x118>)
 8002ec8:	f001 f9e8 	bl	800429c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ecc:	e048      	b.n	8002f60 <HAL_TIM_Encoder_MspInit+0x108>
  else if(htim_encoder->Instance==TIM2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed6:	d143      	bne.n	8002f60 <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ed8:	4b24      	ldr	r3, [pc, #144]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	4a23      	ldr	r2, [pc, #140]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ee4:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f08:	4b18      	ldr	r3, [pc, #96]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	4a17      	ldr	r2, [pc, #92]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002f0e:	f043 0302 	orr.w	r3, r3, #2
 8002f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f14:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_TIM_Encoder_MspInit+0x114>)
 8002f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f20:	2301      	movs	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f30:	2301      	movs	r3, #1
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	4619      	mov	r1, r3
 8002f3a:	480e      	ldr	r0, [pc, #56]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002f3c:	f001 f9ae 	bl	800429c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f40:	2308      	movs	r3, #8
 8002f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f50:	2301      	movs	r3, #1
 8002f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4807      	ldr	r0, [pc, #28]	@ (8002f78 <HAL_TIM_Encoder_MspInit+0x120>)
 8002f5c:	f001 f99e 	bl	800429c <HAL_GPIO_Init>
}
 8002f60:	bf00      	nop
 8002f62:	3730      	adds	r7, #48	@ 0x30
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40020000 	.word	0x40020000
 8002f78:	40020400 	.word	0x40020400

08002f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f80:	bf00      	nop
 8002f82:	e7fd      	b.n	8002f80 <NMI_Handler+0x4>

08002f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f88:	bf00      	nop
 8002f8a:	e7fd      	b.n	8002f88 <HardFault_Handler+0x4>

08002f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f90:	bf00      	nop
 8002f92:	e7fd      	b.n	8002f90 <MemManage_Handler+0x4>

08002f94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <BusFault_Handler+0x4>

08002f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <UsageFault_Handler+0x4>

08002fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fd2:	f000 f95f 	bl	8003294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002fe0:	4802      	ldr	r0, [pc, #8]	@ (8002fec <DMA1_Stream3_IRQHandler+0x10>)
 8002fe2:	f000 fef1 	bl	8003dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2003ad34 	.word	0x2003ad34

08002ff0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002ff4:	4802      	ldr	r0, [pc, #8]	@ (8003000 <DMA1_Stream5_IRQHandler+0x10>)
 8002ff6:	f000 fee7 	bl	8003dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	2003ad94 	.word	0x2003ad94

08003004 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return 1;
 8003008:	2301      	movs	r3, #1
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <_kill>:

int _kill(int pid, int sig)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800301e:	f006 f909 	bl	8009234 <__errno>
 8003022:	4603      	mov	r3, r0
 8003024:	2216      	movs	r2, #22
 8003026:	601a      	str	r2, [r3, #0]
  return -1;
 8003028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <_exit>:

void _exit (int status)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800303c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ffe7 	bl	8003014 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003046:	bf00      	nop
 8003048:	e7fd      	b.n	8003046 <_exit+0x12>

0800304a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e00a      	b.n	8003072 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800305c:	f3af 8000 	nop.w
 8003060:	4601      	mov	r1, r0
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	60ba      	str	r2, [r7, #8]
 8003068:	b2ca      	uxtb	r2, r1
 800306a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3301      	adds	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	429a      	cmp	r2, r3
 8003078:	dbf0      	blt.n	800305c <_read+0x12>
  }

  return len;
 800307a:	687b      	ldr	r3, [r7, #4]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	e009      	b.n	80030aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	60ba      	str	r2, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	3301      	adds	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	dbf1      	blt.n	8003096 <_write+0x12>
  }
  return len;
 80030b2:	687b      	ldr	r3, [r7, #4]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_close>:

int _close(int file)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030e4:	605a      	str	r2, [r3, #4]
  return 0;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <_isatty>:

int _isatty(int file)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030fc:	2301      	movs	r3, #1
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800312c:	4a14      	ldr	r2, [pc, #80]	@ (8003180 <_sbrk+0x5c>)
 800312e:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <_sbrk+0x60>)
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003138:	4b13      	ldr	r3, [pc, #76]	@ (8003188 <_sbrk+0x64>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003140:	4b11      	ldr	r3, [pc, #68]	@ (8003188 <_sbrk+0x64>)
 8003142:	4a12      	ldr	r2, [pc, #72]	@ (800318c <_sbrk+0x68>)
 8003144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003146:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <_sbrk+0x64>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	429a      	cmp	r2, r3
 8003152:	d207      	bcs.n	8003164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003154:	f006 f86e 	bl	8009234 <__errno>
 8003158:	4603      	mov	r3, r0
 800315a:	220c      	movs	r2, #12
 800315c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003162:	e009      	b.n	8003178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003164:	4b08      	ldr	r3, [pc, #32]	@ (8003188 <_sbrk+0x64>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800316a:	4b07      	ldr	r3, [pc, #28]	@ (8003188 <_sbrk+0x64>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	4a05      	ldr	r2, [pc, #20]	@ (8003188 <_sbrk+0x64>)
 8003174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003176:	68fb      	ldr	r3, [r7, #12]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20050000 	.word	0x20050000
 8003184:	00000400 	.word	0x00000400
 8003188:	2003deac 	.word	0x2003deac
 800318c:	2003e000 	.word	0x2003e000

08003190 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003194:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <SystemInit+0x20>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319a:	4a05      	ldr	r2, [pc, #20]	@ (80031b0 <SystemInit+0x20>)
 800319c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
  }
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 80031b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031b8:	f7ff ffea 	bl	8003190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031bc:	480c      	ldr	r0, [pc, #48]	@ (80031f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031be:	490d      	ldr	r1, [pc, #52]	@ (80031f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031c0:	4a0d      	ldr	r2, [pc, #52]	@ (80031f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c4:	e002      	b.n	80031cc <LoopCopyDataInit>

080031c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ca:	3304      	adds	r3, #4

080031cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d0:	d3f9      	bcc.n	80031c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d2:	4a0a      	ldr	r2, [pc, #40]	@ (80031fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003200 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d8:	e001      	b.n	80031de <LoopFillZerobss>

080031da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031dc:	3204      	adds	r2, #4

080031de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e0:	d3fb      	bcc.n	80031da <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80031e2:	f006 f82d 	bl	8009240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031e6:	f7fe ff25 	bl	8002034 <main>
  bx  lr    
 80031ea:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 80031ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80031f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f4:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 80031f8:	0800ccc8 	.word	0x0800ccc8
  ldr r2, =_sbss
 80031fc:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8003200:	2003e000 	.word	0x2003e000

08003204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003204:	e7fe      	b.n	8003204 <ADC_IRQHandler>
	...

08003208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800320c:	4b08      	ldr	r3, [pc, #32]	@ (8003230 <HAL_Init+0x28>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a07      	ldr	r2, [pc, #28]	@ (8003230 <HAL_Init+0x28>)
 8003212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003218:	2003      	movs	r0, #3
 800321a:	f000 f94f 	bl	80034bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800321e:	200f      	movs	r0, #15
 8003220:	f000 f808 	bl	8003234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003224:	f7ff fc7a 	bl	8002b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023c00 	.word	0x40023c00

08003234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800323c:	4b12      	ldr	r3, [pc, #72]	@ (8003288 <HAL_InitTick+0x54>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b12      	ldr	r3, [pc, #72]	@ (800328c <HAL_InitTick+0x58>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	4619      	mov	r1, r3
 8003246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800324a:	fbb3 f3f1 	udiv	r3, r3, r1
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f996 	bl	8003584 <HAL_SYSTICK_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e00e      	b.n	8003280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b0f      	cmp	r3, #15
 8003266:	d80a      	bhi.n	800327e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003268:	2200      	movs	r2, #0
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003270:	f000 f944 	bl	80034fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003274:	4a06      	ldr	r2, [pc, #24]	@ (8003290 <HAL_InitTick+0x5c>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000068 	.word	0x20000068
 800328c:	20000070 	.word	0x20000070
 8003290:	2000006c 	.word	0x2000006c

08003294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <HAL_IncTick+0x20>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HAL_IncTick+0x24>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4413      	add	r3, r2
 80032a4:	4a04      	ldr	r2, [pc, #16]	@ (80032b8 <HAL_IncTick+0x24>)
 80032a6:	6013      	str	r3, [r2, #0]
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000070 	.word	0x20000070
 80032b8:	2003deb0 	.word	0x2003deb0

080032bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return uwTick;
 80032c0:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <HAL_GetTick+0x14>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	2003deb0 	.word	0x2003deb0

080032d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032dc:	f7ff ffee 	bl	80032bc <HAL_GetTick>
 80032e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032ec:	d005      	beq.n	80032fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <HAL_Delay+0x44>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032fa:	bf00      	nop
 80032fc:	f7ff ffde 	bl	80032bc <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	429a      	cmp	r2, r3
 800330a:	d8f7      	bhi.n	80032fc <HAL_Delay+0x28>
  {
  }
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000070 	.word	0x20000070

0800331c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800332c:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <__NVIC_SetPriorityGrouping+0x40>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003338:	4013      	ands	r3, r2
 800333a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <__NVIC_SetPriorityGrouping+0x44>)
 8003346:	4313      	orrs	r3, r2
 8003348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334a:	4a04      	ldr	r2, [pc, #16]	@ (800335c <__NVIC_SetPriorityGrouping+0x40>)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	60d3      	str	r3, [r2, #12]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00
 8003360:	05fa0000 	.word	0x05fa0000

08003364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003368:	4b04      	ldr	r3, [pc, #16]	@ (800337c <__NVIC_GetPriorityGrouping+0x18>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	f003 0307 	and.w	r3, r3, #7
}
 8003372:	4618      	mov	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	2b00      	cmp	r3, #0
 8003390:	db0b      	blt.n	80033aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	f003 021f 	and.w	r2, r3, #31
 8003398:	4907      	ldr	r1, [pc, #28]	@ (80033b8 <__NVIC_EnableIRQ+0x38>)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2001      	movs	r0, #1
 80033a2:	fa00 f202 	lsl.w	r2, r0, r2
 80033a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	e000e100 	.word	0xe000e100

080033bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	6039      	str	r1, [r7, #0]
 80033c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	db0a      	blt.n	80033e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	490c      	ldr	r1, [pc, #48]	@ (8003408 <__NVIC_SetPriority+0x4c>)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	0112      	lsls	r2, r2, #4
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	440b      	add	r3, r1
 80033e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e4:	e00a      	b.n	80033fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4908      	ldr	r1, [pc, #32]	@ (800340c <__NVIC_SetPriority+0x50>)
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	3b04      	subs	r3, #4
 80033f4:	0112      	lsls	r2, r2, #4
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	440b      	add	r3, r1
 80033fa:	761a      	strb	r2, [r3, #24]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000e100 	.word	0xe000e100
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	@ 0x24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f1c3 0307 	rsb	r3, r3, #7
 800342a:	2b04      	cmp	r3, #4
 800342c:	bf28      	it	cs
 800342e:	2304      	movcs	r3, #4
 8003430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3304      	adds	r3, #4
 8003436:	2b06      	cmp	r3, #6
 8003438:	d902      	bls.n	8003440 <NVIC_EncodePriority+0x30>
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3b03      	subs	r3, #3
 800343e:	e000      	b.n	8003442 <NVIC_EncodePriority+0x32>
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003444:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43da      	mvns	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	401a      	ands	r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003458:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	43d9      	mvns	r1, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	4313      	orrs	r3, r2
         );
}
 800346a:	4618      	mov	r0, r3
 800346c:	3724      	adds	r7, #36	@ 0x24
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003488:	d301      	bcc.n	800348e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348a:	2301      	movs	r3, #1
 800348c:	e00f      	b.n	80034ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800348e:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <SysTick_Config+0x40>)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003496:	210f      	movs	r1, #15
 8003498:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800349c:	f7ff ff8e 	bl	80033bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a0:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <SysTick_Config+0x40>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034a6:	4b04      	ldr	r3, [pc, #16]	@ (80034b8 <SysTick_Config+0x40>)
 80034a8:	2207      	movs	r2, #7
 80034aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	e000e010 	.word	0xe000e010

080034bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b07      	cmp	r3, #7
 80034c8:	d00f      	beq.n	80034ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	d00c      	beq.n	80034ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d009      	beq.n	80034ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d006      	beq.n	80034ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d003      	beq.n	80034ea <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034e2:	2191      	movs	r1, #145	@ 0x91
 80034e4:	4804      	ldr	r0, [pc, #16]	@ (80034f8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80034e6:	f7ff fb0d 	bl	8002b04 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ff16 	bl	800331c <__NVIC_SetPriorityGrouping>
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	0800c508 	.word	0x0800c508

080034fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b0f      	cmp	r3, #15
 8003512:	d903      	bls.n	800351c <HAL_NVIC_SetPriority+0x20>
 8003514:	21a9      	movs	r1, #169	@ 0xa9
 8003516:	480e      	ldr	r0, [pc, #56]	@ (8003550 <HAL_NVIC_SetPriority+0x54>)
 8003518:	f7ff faf4 	bl	8002b04 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b0f      	cmp	r3, #15
 8003520:	d903      	bls.n	800352a <HAL_NVIC_SetPriority+0x2e>
 8003522:	21aa      	movs	r1, #170	@ 0xaa
 8003524:	480a      	ldr	r0, [pc, #40]	@ (8003550 <HAL_NVIC_SetPriority+0x54>)
 8003526:	f7ff faed 	bl	8002b04 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800352a:	f7ff ff1b 	bl	8003364 <__NVIC_GetPriorityGrouping>
 800352e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	6978      	ldr	r0, [r7, #20]
 8003536:	f7ff ff6b 	bl	8003410 <NVIC_EncodePriority>
 800353a:	4602      	mov	r2, r0
 800353c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff ff3a 	bl	80033bc <__NVIC_SetPriority>
}
 8003548:	bf00      	nop
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	0800c508 	.word	0x0800c508

08003554 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	2b00      	cmp	r3, #0
 8003564:	da03      	bge.n	800356e <HAL_NVIC_EnableIRQ+0x1a>
 8003566:	21bd      	movs	r1, #189	@ 0xbd
 8003568:	4805      	ldr	r0, [pc, #20]	@ (8003580 <HAL_NVIC_EnableIRQ+0x2c>)
 800356a:	f7ff facb 	bl	8002b04 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ff04 	bl	8003380 <__NVIC_EnableIRQ>
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	0800c508 	.word	0x0800c508

08003584 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ff73 	bl	8003478 <SysTick_Config>
 8003592:	4603      	mov	r3, r0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80035a0:	f3bf 8f5f 	dmb	sy
}
 80035a4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80035a6:	4b07      	ldr	r3, [pc, #28]	@ (80035c4 <HAL_MPU_Disable+0x28>)
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	4a06      	ldr	r2, [pc, #24]	@ (80035c4 <HAL_MPU_Disable+0x28>)
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80035b2:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <HAL_MPU_Disable+0x2c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	605a      	str	r2, [r3, #4]
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000ed00 	.word	0xe000ed00
 80035c8:	e000ed90 	.word	0xe000ed90

080035cc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80035d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003604 <HAL_MPU_Enable+0x38>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80035de:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <HAL_MPU_Enable+0x3c>)
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	4a09      	ldr	r2, [pc, #36]	@ (8003608 <HAL_MPU_Enable+0x3c>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80035ea:	f3bf 8f4f 	dsb	sy
}
 80035ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035f0:	f3bf 8f6f 	isb	sy
}
 80035f4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000ed90 	.word	0xe000ed90
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	785b      	ldrb	r3, [r3, #1]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d020      	beq.n	800365e <HAL_MPU_ConfigRegion+0x52>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	785b      	ldrb	r3, [r3, #1]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d01c      	beq.n	800365e <HAL_MPU_ConfigRegion+0x52>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	785b      	ldrb	r3, [r3, #1]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d018      	beq.n	800365e <HAL_MPU_ConfigRegion+0x52>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	785b      	ldrb	r3, [r3, #1]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d014      	beq.n	800365e <HAL_MPU_ConfigRegion+0x52>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d010      	beq.n	800365e <HAL_MPU_ConfigRegion+0x52>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	785b      	ldrb	r3, [r3, #1]
 8003640:	2b05      	cmp	r3, #5
 8003642:	d00c      	beq.n	800365e <HAL_MPU_ConfigRegion+0x52>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	785b      	ldrb	r3, [r3, #1]
 8003648:	2b06      	cmp	r3, #6
 800364a:	d008      	beq.n	800365e <HAL_MPU_ConfigRegion+0x52>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	785b      	ldrb	r3, [r3, #1]
 8003650:	2b07      	cmp	r3, #7
 8003652:	d004      	beq.n	800365e <HAL_MPU_ConfigRegion+0x52>
 8003654:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8003658:	488c      	ldr	r0, [pc, #560]	@ (800388c <HAL_MPU_ConfigRegion+0x280>)
 800365a:	f7ff fa53 	bl	8002b04 <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d008      	beq.n	8003678 <HAL_MPU_ConfigRegion+0x6c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d004      	beq.n	8003678 <HAL_MPU_ConfigRegion+0x6c>
 800366e:	f240 114f 	movw	r1, #335	@ 0x14f
 8003672:	4886      	ldr	r0, [pc, #536]	@ (800388c <HAL_MPU_ConfigRegion+0x280>)
 8003674:	f7ff fa46 	bl	8002b04 <assert_failed>
  assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7b1b      	ldrb	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_MPU_ConfigRegion+0x86>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7b1b      	ldrb	r3, [r3, #12]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d004      	beq.n	8003692 <HAL_MPU_ConfigRegion+0x86>
 8003688:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 800368c:	487f      	ldr	r0, [pc, #508]	@ (800388c <HAL_MPU_ConfigRegion+0x280>)
 800368e:	f7ff fa39 	bl	8002b04 <assert_failed>
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	7adb      	ldrb	r3, [r3, #11]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d018      	beq.n	80036cc <HAL_MPU_ConfigRegion+0xc0>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	7adb      	ldrb	r3, [r3, #11]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d014      	beq.n	80036cc <HAL_MPU_ConfigRegion+0xc0>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7adb      	ldrb	r3, [r3, #11]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d010      	beq.n	80036cc <HAL_MPU_ConfigRegion+0xc0>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7adb      	ldrb	r3, [r3, #11]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d00c      	beq.n	80036cc <HAL_MPU_ConfigRegion+0xc0>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	7adb      	ldrb	r3, [r3, #11]
 80036b6:	2b05      	cmp	r3, #5
 80036b8:	d008      	beq.n	80036cc <HAL_MPU_ConfigRegion+0xc0>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	7adb      	ldrb	r3, [r3, #11]
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d004      	beq.n	80036cc <HAL_MPU_ConfigRegion+0xc0>
 80036c2:	f240 1151 	movw	r1, #337	@ 0x151
 80036c6:	4871      	ldr	r0, [pc, #452]	@ (800388c <HAL_MPU_ConfigRegion+0x280>)
 80036c8:	f7ff fa1c 	bl	8002b04 <assert_failed>
  assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7a9b      	ldrb	r3, [r3, #10]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_MPU_ConfigRegion+0xe2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7a9b      	ldrb	r3, [r3, #10]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d008      	beq.n	80036ee <HAL_MPU_ConfigRegion+0xe2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7a9b      	ldrb	r3, [r3, #10]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d004      	beq.n	80036ee <HAL_MPU_ConfigRegion+0xe2>
 80036e4:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80036e8:	4868      	ldr	r0, [pc, #416]	@ (800388c <HAL_MPU_ConfigRegion+0x280>)
 80036ea:	f7ff fa0b 	bl	8002b04 <assert_failed>
  assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	7b5b      	ldrb	r3, [r3, #13]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d008      	beq.n	8003708 <HAL_MPU_ConfigRegion+0xfc>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	7b5b      	ldrb	r3, [r3, #13]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <HAL_MPU_ConfigRegion+0xfc>
 80036fe:	f240 1153 	movw	r1, #339	@ 0x153
 8003702:	4862      	ldr	r0, [pc, #392]	@ (800388c <HAL_MPU_ConfigRegion+0x280>)
 8003704:	f7ff f9fe 	bl	8002b04 <assert_failed>
  assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	7b9b      	ldrb	r3, [r3, #14]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d008      	beq.n	8003722 <HAL_MPU_ConfigRegion+0x116>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7b9b      	ldrb	r3, [r3, #14]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <HAL_MPU_ConfigRegion+0x116>
 8003718:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 800371c:	485b      	ldr	r0, [pc, #364]	@ (800388c <HAL_MPU_ConfigRegion+0x280>)
 800371e:	f7ff f9f1 	bl	8002b04 <assert_failed>
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7bdb      	ldrb	r3, [r3, #15]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d008      	beq.n	800373c <HAL_MPU_ConfigRegion+0x130>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7bdb      	ldrb	r3, [r3, #15]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d004      	beq.n	800373c <HAL_MPU_ConfigRegion+0x130>
 8003732:	f240 1155 	movw	r1, #341	@ 0x155
 8003736:	4855      	ldr	r0, [pc, #340]	@ (800388c <HAL_MPU_ConfigRegion+0x280>)
 8003738:	f7ff f9e4 	bl	8002b04 <assert_failed>
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	7a5b      	ldrb	r3, [r3, #9]
 8003740:	2bff      	cmp	r3, #255	@ 0xff
 8003742:	d104      	bne.n	800374e <HAL_MPU_ConfigRegion+0x142>
 8003744:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8003748:	4850      	ldr	r0, [pc, #320]	@ (800388c <HAL_MPU_ConfigRegion+0x280>)
 800374a:	f7ff f9db 	bl	8002b04 <assert_failed>
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	7a1b      	ldrb	r3, [r3, #8]
 8003752:	2b04      	cmp	r3, #4
 8003754:	d070      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7a1b      	ldrb	r3, [r3, #8]
 800375a:	2b05      	cmp	r3, #5
 800375c:	d06c      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7a1b      	ldrb	r3, [r3, #8]
 8003762:	2b06      	cmp	r3, #6
 8003764:	d068      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7a1b      	ldrb	r3, [r3, #8]
 800376a:	2b07      	cmp	r3, #7
 800376c:	d064      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7a1b      	ldrb	r3, [r3, #8]
 8003772:	2b08      	cmp	r3, #8
 8003774:	d060      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7a1b      	ldrb	r3, [r3, #8]
 800377a:	2b09      	cmp	r3, #9
 800377c:	d05c      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7a1b      	ldrb	r3, [r3, #8]
 8003782:	2b0a      	cmp	r3, #10
 8003784:	d058      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7a1b      	ldrb	r3, [r3, #8]
 800378a:	2b0b      	cmp	r3, #11
 800378c:	d054      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	7a1b      	ldrb	r3, [r3, #8]
 8003792:	2b0c      	cmp	r3, #12
 8003794:	d050      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7a1b      	ldrb	r3, [r3, #8]
 800379a:	2b0d      	cmp	r3, #13
 800379c:	d04c      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	7a1b      	ldrb	r3, [r3, #8]
 80037a2:	2b0e      	cmp	r3, #14
 80037a4:	d048      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7a1b      	ldrb	r3, [r3, #8]
 80037aa:	2b0f      	cmp	r3, #15
 80037ac:	d044      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	7a1b      	ldrb	r3, [r3, #8]
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d040      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	7a1b      	ldrb	r3, [r3, #8]
 80037ba:	2b11      	cmp	r3, #17
 80037bc:	d03c      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7a1b      	ldrb	r3, [r3, #8]
 80037c2:	2b12      	cmp	r3, #18
 80037c4:	d038      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	7a1b      	ldrb	r3, [r3, #8]
 80037ca:	2b13      	cmp	r3, #19
 80037cc:	d034      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	7a1b      	ldrb	r3, [r3, #8]
 80037d2:	2b14      	cmp	r3, #20
 80037d4:	d030      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7a1b      	ldrb	r3, [r3, #8]
 80037da:	2b15      	cmp	r3, #21
 80037dc:	d02c      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7a1b      	ldrb	r3, [r3, #8]
 80037e2:	2b16      	cmp	r3, #22
 80037e4:	d028      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7a1b      	ldrb	r3, [r3, #8]
 80037ea:	2b17      	cmp	r3, #23
 80037ec:	d024      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7a1b      	ldrb	r3, [r3, #8]
 80037f2:	2b18      	cmp	r3, #24
 80037f4:	d020      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7a1b      	ldrb	r3, [r3, #8]
 80037fa:	2b19      	cmp	r3, #25
 80037fc:	d01c      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7a1b      	ldrb	r3, [r3, #8]
 8003802:	2b1a      	cmp	r3, #26
 8003804:	d018      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7a1b      	ldrb	r3, [r3, #8]
 800380a:	2b1b      	cmp	r3, #27
 800380c:	d014      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7a1b      	ldrb	r3, [r3, #8]
 8003812:	2b1c      	cmp	r3, #28
 8003814:	d010      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7a1b      	ldrb	r3, [r3, #8]
 800381a:	2b1d      	cmp	r3, #29
 800381c:	d00c      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7a1b      	ldrb	r3, [r3, #8]
 8003822:	2b1e      	cmp	r3, #30
 8003824:	d008      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	7a1b      	ldrb	r3, [r3, #8]
 800382a:	2b1f      	cmp	r3, #31
 800382c:	d004      	beq.n	8003838 <HAL_MPU_ConfigRegion+0x22c>
 800382e:	f240 1157 	movw	r1, #343	@ 0x157
 8003832:	4816      	ldr	r0, [pc, #88]	@ (800388c <HAL_MPU_ConfigRegion+0x280>)
 8003834:	f7ff f966 	bl	8002b04 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	785a      	ldrb	r2, [r3, #1]
 800383c:	4b14      	ldr	r3, [pc, #80]	@ (8003890 <HAL_MPU_ConfigRegion+0x284>)
 800383e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003840:	4b13      	ldr	r3, [pc, #76]	@ (8003890 <HAL_MPU_ConfigRegion+0x284>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4a12      	ldr	r2, [pc, #72]	@ (8003890 <HAL_MPU_ConfigRegion+0x284>)
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800384c:	4a10      	ldr	r2, [pc, #64]	@ (8003890 <HAL_MPU_ConfigRegion+0x284>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	7b1b      	ldrb	r3, [r3, #12]
 8003858:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	7adb      	ldrb	r3, [r3, #11]
 800385e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003860:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	7a9b      	ldrb	r3, [r3, #10]
 8003866:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003868:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7b5b      	ldrb	r3, [r3, #13]
 800386e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003870:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7b9b      	ldrb	r3, [r3, #14]
 8003876:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003878:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	7bdb      	ldrb	r3, [r3, #15]
 800387e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003880:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	7a5b      	ldrb	r3, [r3, #9]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	e004      	b.n	8003894 <HAL_MPU_ConfigRegion+0x288>
 800388a:	bf00      	nop
 800388c:	0800c508 	.word	0x0800c508
 8003890:	e000ed90 	.word	0xe000ed90
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003894:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	7a1b      	ldrb	r3, [r3, #8]
 800389a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800389c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	7812      	ldrb	r2, [r2, #0]
 80038a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038a4:	4a03      	ldr	r2, [pc, #12]	@ (80038b4 <HAL_MPU_ConfigRegion+0x2a8>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80038a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038a8:	6113      	str	r3, [r2, #16]
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	e000ed90 	.word	0xe000ed90

080038b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038c4:	f7ff fcfa 	bl	80032bc <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e203      	b.n	8003cdc <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a8b      	ldr	r2, [pc, #556]	@ (8003b08 <HAL_DMA_Init+0x250>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d04e      	beq.n	800397c <HAL_DMA_Init+0xc4>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a8a      	ldr	r2, [pc, #552]	@ (8003b0c <HAL_DMA_Init+0x254>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d049      	beq.n	800397c <HAL_DMA_Init+0xc4>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a88      	ldr	r2, [pc, #544]	@ (8003b10 <HAL_DMA_Init+0x258>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d044      	beq.n	800397c <HAL_DMA_Init+0xc4>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a87      	ldr	r2, [pc, #540]	@ (8003b14 <HAL_DMA_Init+0x25c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d03f      	beq.n	800397c <HAL_DMA_Init+0xc4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a85      	ldr	r2, [pc, #532]	@ (8003b18 <HAL_DMA_Init+0x260>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d03a      	beq.n	800397c <HAL_DMA_Init+0xc4>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a84      	ldr	r2, [pc, #528]	@ (8003b1c <HAL_DMA_Init+0x264>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d035      	beq.n	800397c <HAL_DMA_Init+0xc4>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a82      	ldr	r2, [pc, #520]	@ (8003b20 <HAL_DMA_Init+0x268>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d030      	beq.n	800397c <HAL_DMA_Init+0xc4>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a81      	ldr	r2, [pc, #516]	@ (8003b24 <HAL_DMA_Init+0x26c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d02b      	beq.n	800397c <HAL_DMA_Init+0xc4>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a7f      	ldr	r2, [pc, #508]	@ (8003b28 <HAL_DMA_Init+0x270>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d026      	beq.n	800397c <HAL_DMA_Init+0xc4>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7e      	ldr	r2, [pc, #504]	@ (8003b2c <HAL_DMA_Init+0x274>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d021      	beq.n	800397c <HAL_DMA_Init+0xc4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a7c      	ldr	r2, [pc, #496]	@ (8003b30 <HAL_DMA_Init+0x278>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d01c      	beq.n	800397c <HAL_DMA_Init+0xc4>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a7b      	ldr	r2, [pc, #492]	@ (8003b34 <HAL_DMA_Init+0x27c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d017      	beq.n	800397c <HAL_DMA_Init+0xc4>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a79      	ldr	r2, [pc, #484]	@ (8003b38 <HAL_DMA_Init+0x280>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d012      	beq.n	800397c <HAL_DMA_Init+0xc4>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a78      	ldr	r2, [pc, #480]	@ (8003b3c <HAL_DMA_Init+0x284>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00d      	beq.n	800397c <HAL_DMA_Init+0xc4>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a76      	ldr	r2, [pc, #472]	@ (8003b40 <HAL_DMA_Init+0x288>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d008      	beq.n	800397c <HAL_DMA_Init+0xc4>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a75      	ldr	r2, [pc, #468]	@ (8003b44 <HAL_DMA_Init+0x28c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <HAL_DMA_Init+0xc4>
 8003974:	21b8      	movs	r1, #184	@ 0xb8
 8003976:	4874      	ldr	r0, [pc, #464]	@ (8003b48 <HAL_DMA_Init+0x290>)
 8003978:	f7ff f8c4 	bl	8002b04 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d026      	beq.n	80039d2 <HAL_DMA_Init+0x11a>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800398c:	d021      	beq.n	80039d2 <HAL_DMA_Init+0x11a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003996:	d01c      	beq.n	80039d2 <HAL_DMA_Init+0x11a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80039a0:	d017      	beq.n	80039d2 <HAL_DMA_Init+0x11a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039aa:	d012      	beq.n	80039d2 <HAL_DMA_Init+0x11a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 80039b4:	d00d      	beq.n	80039d2 <HAL_DMA_Init+0x11a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80039be:	d008      	beq.n	80039d2 <HAL_DMA_Init+0x11a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 80039c8:	d003      	beq.n	80039d2 <HAL_DMA_Init+0x11a>
 80039ca:	21b9      	movs	r1, #185	@ 0xb9
 80039cc:	485e      	ldr	r0, [pc, #376]	@ (8003b48 <HAL_DMA_Init+0x290>)
 80039ce:	f7ff f899 	bl	8002b04 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_DMA_Init+0x13a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b40      	cmp	r3, #64	@ 0x40
 80039e0:	d007      	beq.n	80039f2 <HAL_DMA_Init+0x13a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b80      	cmp	r3, #128	@ 0x80
 80039e8:	d003      	beq.n	80039f2 <HAL_DMA_Init+0x13a>
 80039ea:	21ba      	movs	r1, #186	@ 0xba
 80039ec:	4856      	ldr	r0, [pc, #344]	@ (8003b48 <HAL_DMA_Init+0x290>)
 80039ee:	f7ff f889 	bl	8002b04 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039fa:	d007      	beq.n	8003a0c <HAL_DMA_Init+0x154>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_DMA_Init+0x154>
 8003a04:	21bb      	movs	r1, #187	@ 0xbb
 8003a06:	4850      	ldr	r0, [pc, #320]	@ (8003b48 <HAL_DMA_Init+0x290>)
 8003a08:	f7ff f87c 	bl	8002b04 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a14:	d007      	beq.n	8003a26 <HAL_DMA_Init+0x16e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_DMA_Init+0x16e>
 8003a1e:	21bc      	movs	r1, #188	@ 0xbc
 8003a20:	4849      	ldr	r0, [pc, #292]	@ (8003b48 <HAL_DMA_Init+0x290>)
 8003a22:	f7ff f86f 	bl	8002b04 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <HAL_DMA_Init+0x192>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a36:	d008      	beq.n	8003a4a <HAL_DMA_Init+0x192>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a40:	d003      	beq.n	8003a4a <HAL_DMA_Init+0x192>
 8003a42:	21bd      	movs	r1, #189	@ 0xbd
 8003a44:	4840      	ldr	r0, [pc, #256]	@ (8003b48 <HAL_DMA_Init+0x290>)
 8003a46:	f7ff f85d 	bl	8002b04 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <HAL_DMA_Init+0x1b6>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a5a:	d008      	beq.n	8003a6e <HAL_DMA_Init+0x1b6>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a64:	d003      	beq.n	8003a6e <HAL_DMA_Init+0x1b6>
 8003a66:	21be      	movs	r1, #190	@ 0xbe
 8003a68:	4837      	ldr	r0, [pc, #220]	@ (8003b48 <HAL_DMA_Init+0x290>)
 8003a6a:	f7ff f84b 	bl	8002b04 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00c      	beq.n	8003a90 <HAL_DMA_Init+0x1d8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7e:	d007      	beq.n	8003a90 <HAL_DMA_Init+0x1d8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d003      	beq.n	8003a90 <HAL_DMA_Init+0x1d8>
 8003a88:	21bf      	movs	r1, #191	@ 0xbf
 8003a8a:	482f      	ldr	r0, [pc, #188]	@ (8003b48 <HAL_DMA_Init+0x290>)
 8003a8c:	f7ff f83a 	bl	8002b04 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d012      	beq.n	8003abe <HAL_DMA_Init+0x206>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa0:	d00d      	beq.n	8003abe <HAL_DMA_Init+0x206>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aaa:	d008      	beq.n	8003abe <HAL_DMA_Init+0x206>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ab4:	d003      	beq.n	8003abe <HAL_DMA_Init+0x206>
 8003ab6:	21c0      	movs	r1, #192	@ 0xc0
 8003ab8:	4823      	ldr	r0, [pc, #140]	@ (8003b48 <HAL_DMA_Init+0x290>)
 8003aba:	f7ff f823 	bl	8002b04 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HAL_DMA_Init+0x21e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d003      	beq.n	8003ad6 <HAL_DMA_Init+0x21e>
 8003ace:	21c1      	movs	r1, #193	@ 0xc1
 8003ad0:	481d      	ldr	r0, [pc, #116]	@ (8003b48 <HAL_DMA_Init+0x290>)
 8003ad2:	f7ff f817 	bl	8002b04 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d064      	beq.n	8003ba8 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d032      	beq.n	8003b4c <HAL_DMA_Init+0x294>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d02e      	beq.n	8003b4c <HAL_DMA_Init+0x294>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d02a      	beq.n	8003b4c <HAL_DMA_Init+0x294>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d026      	beq.n	8003b4c <HAL_DMA_Init+0x294>
 8003afe:	21c6      	movs	r1, #198	@ 0xc6
 8003b00:	4811      	ldr	r0, [pc, #68]	@ (8003b48 <HAL_DMA_Init+0x290>)
 8003b02:	f7fe ffff 	bl	8002b04 <assert_failed>
 8003b06:	e021      	b.n	8003b4c <HAL_DMA_Init+0x294>
 8003b08:	40026010 	.word	0x40026010
 8003b0c:	40026028 	.word	0x40026028
 8003b10:	40026040 	.word	0x40026040
 8003b14:	40026058 	.word	0x40026058
 8003b18:	40026070 	.word	0x40026070
 8003b1c:	40026088 	.word	0x40026088
 8003b20:	400260a0 	.word	0x400260a0
 8003b24:	400260b8 	.word	0x400260b8
 8003b28:	40026410 	.word	0x40026410
 8003b2c:	40026428 	.word	0x40026428
 8003b30:	40026440 	.word	0x40026440
 8003b34:	40026458 	.word	0x40026458
 8003b38:	40026470 	.word	0x40026470
 8003b3c:	40026488 	.word	0x40026488
 8003b40:	400264a0 	.word	0x400264a0
 8003b44:	400264b8 	.word	0x400264b8
 8003b48:	0800c544 	.word	0x0800c544
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d012      	beq.n	8003b7a <HAL_DMA_Init+0x2c2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b5c:	d00d      	beq.n	8003b7a <HAL_DMA_Init+0x2c2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b66:	d008      	beq.n	8003b7a <HAL_DMA_Init+0x2c2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b70:	d003      	beq.n	8003b7a <HAL_DMA_Init+0x2c2>
 8003b72:	21c7      	movs	r1, #199	@ 0xc7
 8003b74:	485b      	ldr	r0, [pc, #364]	@ (8003ce4 <HAL_DMA_Init+0x42c>)
 8003b76:	f7fe ffc5 	bl	8002b04 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d012      	beq.n	8003ba8 <HAL_DMA_Init+0x2f0>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_DMA_Init+0x2f0>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b94:	d008      	beq.n	8003ba8 <HAL_DMA_Init+0x2f0>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b9e:	d003      	beq.n	8003ba8 <HAL_DMA_Init+0x2f0>
 8003ba0:	21c8      	movs	r1, #200	@ 0xc8
 8003ba2:	4850      	ldr	r0, [pc, #320]	@ (8003ce4 <HAL_DMA_Init+0x42c>)
 8003ba4:	f7fe ffae 	bl	8002b04 <assert_failed>
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0201 	bic.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc8:	e00f      	b.n	8003bea <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bca:	f7ff fb77 	bl	80032bc <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b05      	cmp	r3, #5
 8003bd6:	d908      	bls.n	8003bea <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2203      	movs	r2, #3
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e078      	b.n	8003cdc <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e8      	bne.n	8003bca <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4b39      	ldr	r3, [pc, #228]	@ (8003ce8 <HAL_DMA_Init+0x430>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d107      	bne.n	8003c54 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f023 0307 	bic.w	r3, r3, #7
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d117      	bne.n	8003cae <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00e      	beq.n	8003cae <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fa87 	bl	80041a4 <DMA_CheckFifoParam>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2240      	movs	r2, #64	@ 0x40
 8003ca0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003caa:	2301      	movs	r3, #1
 8003cac:	e016      	b.n	8003cdc <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fa3e 	bl	8004138 <DMA_CalcBaseAndBitshift>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc4:	223f      	movs	r2, #63	@ 0x3f
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	0800c544 	.word	0x0800c544
 8003ce8:	f010803f 	.word	0xf010803f

08003cec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_DMA_Start_IT+0x26>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d10:	d304      	bcc.n	8003d1c <HAL_DMA_Start_IT+0x30>
 8003d12:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8003d16:	482b      	ldr	r0, [pc, #172]	@ (8003dc4 <HAL_DMA_Start_IT+0xd8>)
 8003d18:	f7fe fef4 	bl	8002b04 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_DMA_Start_IT+0x3e>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e048      	b.n	8003dbc <HAL_DMA_Start_IT+0xd0>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d137      	bne.n	8003dae <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2202      	movs	r2, #2
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f9c2 	bl	80040dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5c:	223f      	movs	r2, #63	@ 0x3f
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0216 	orr.w	r2, r2, #22
 8003d72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d82:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d007      	beq.n	8003d9c <HAL_DMA_Start_IT+0xb0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0208 	orr.w	r2, r2, #8
 8003d9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e005      	b.n	8003dba <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
 8003db8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	0800c544 	.word	0x0800c544

08003dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003dd4:	4b8e      	ldr	r3, [pc, #568]	@ (8004010 <HAL_DMA_IRQHandler+0x248>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a8e      	ldr	r2, [pc, #568]	@ (8004014 <HAL_DMA_IRQHandler+0x24c>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	0a9b      	lsrs	r3, r3, #10
 8003de0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df2:	2208      	movs	r2, #8
 8003df4:	409a      	lsls	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01a      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d013      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0204 	bic.w	r2, r2, #4
 8003e1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e20:	2208      	movs	r2, #8
 8003e22:	409a      	lsls	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2c:	f043 0201 	orr.w	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e38:	2201      	movs	r2, #1
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d012      	beq.n	8003e6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e56:	2201      	movs	r2, #1
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e62:	f043 0202 	orr.w	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6e:	2204      	movs	r2, #4
 8003e70:	409a      	lsls	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d012      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00b      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e98:	f043 0204 	orr.w	r2, r3, #4
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d043      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d03c      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d018      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d108      	bne.n	8003ef8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d024      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	4798      	blx	r3
 8003ef6:	e01f      	b.n	8003f38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01b      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	4798      	blx	r3
 8003f08:	e016      	b.n	8003f38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d107      	bne.n	8003f28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0208 	bic.w	r2, r2, #8
 8003f26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 808f 	beq.w	8004068 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8087 	beq.w	8004068 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5e:	2220      	movs	r2, #32
 8003f60:	409a      	lsls	r2, r3
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d136      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0216 	bic.w	r2, r2, #22
 8003f80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d103      	bne.n	8003fa2 <HAL_DMA_IRQHandler+0x1da>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0208 	bic.w	r2, r2, #8
 8003fb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb6:	223f      	movs	r2, #63	@ 0x3f
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d07e      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
        }
        return;
 8003fde:	e079      	b.n	80040d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01d      	beq.n	800402a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10d      	bne.n	8004018 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004000:	2b00      	cmp	r3, #0
 8004002:	d031      	beq.n	8004068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	4798      	blx	r3
 800400c:	e02c      	b.n	8004068 <HAL_DMA_IRQHandler+0x2a0>
 800400e:	bf00      	nop
 8004010:	20000068 	.word	0x20000068
 8004014:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d023      	beq.n	8004068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
 8004028:	e01e      	b.n	8004068 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10f      	bne.n	8004058 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0210 	bic.w	r2, r2, #16
 8004046:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406c:	2b00      	cmp	r3, #0
 800406e:	d032      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d022      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2205      	movs	r2, #5
 8004080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	3301      	adds	r3, #1
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	d307      	bcc.n	80040b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f2      	bne.n	8004094 <HAL_DMA_IRQHandler+0x2cc>
 80040ae:	e000      	b.n	80040b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
 80040d2:	e000      	b.n	80040d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80040d4:	bf00      	nop
    }
  }
}
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b40      	cmp	r3, #64	@ 0x40
 8004108:	d108      	bne.n	800411c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800411a:	e007      	b.n	800412c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	60da      	str	r2, [r3, #12]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	3b10      	subs	r3, #16
 8004148:	4a13      	ldr	r2, [pc, #76]	@ (8004198 <DMA_CalcBaseAndBitshift+0x60>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004152:	4a12      	ldr	r2, [pc, #72]	@ (800419c <DMA_CalcBaseAndBitshift+0x64>)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d908      	bls.n	8004178 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <DMA_CalcBaseAndBitshift+0x68>)
 800416e:	4013      	ands	r3, r2
 8004170:	1d1a      	adds	r2, r3, #4
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	659a      	str	r2, [r3, #88]	@ 0x58
 8004176:	e006      	b.n	8004186 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	4b08      	ldr	r3, [pc, #32]	@ (80041a0 <DMA_CalcBaseAndBitshift+0x68>)
 8004180:	4013      	ands	r3, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	aaaaaaab 	.word	0xaaaaaaab
 800419c:	0800c75c 	.word	0x0800c75c
 80041a0:	fffffc00 	.word	0xfffffc00

080041a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d11f      	bne.n	80041fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d856      	bhi.n	8004272 <DMA_CheckFifoParam+0xce>
 80041c4:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <DMA_CheckFifoParam+0x28>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041dd 	.word	0x080041dd
 80041d0:	080041ef 	.word	0x080041ef
 80041d4:	080041dd 	.word	0x080041dd
 80041d8:	08004273 	.word	0x08004273
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d046      	beq.n	8004276 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ec:	e043      	b.n	8004276 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041f6:	d140      	bne.n	800427a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fc:	e03d      	b.n	800427a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004206:	d121      	bne.n	800424c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d837      	bhi.n	800427e <DMA_CheckFifoParam+0xda>
 800420e:	a201      	add	r2, pc, #4	@ (adr r2, 8004214 <DMA_CheckFifoParam+0x70>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004225 	.word	0x08004225
 8004218:	0800422b 	.word	0x0800422b
 800421c:	08004225 	.word	0x08004225
 8004220:	0800423d 	.word	0x0800423d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      break;
 8004228:	e030      	b.n	800428c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d025      	beq.n	8004282 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423a:	e022      	b.n	8004282 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004244:	d11f      	bne.n	8004286 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800424a:	e01c      	b.n	8004286 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d903      	bls.n	800425a <DMA_CheckFifoParam+0xb6>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d003      	beq.n	8004260 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004258:	e018      	b.n	800428c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
      break;
 800425e:	e015      	b.n	800428c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004264:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00e      	beq.n	800428a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
      break;
 8004270:	e00b      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;
 8004272:	bf00      	nop
 8004274:	e00a      	b.n	800428c <DMA_CheckFifoParam+0xe8>
      break;
 8004276:	bf00      	nop
 8004278:	e008      	b.n	800428c <DMA_CheckFifoParam+0xe8>
      break;
 800427a:	bf00      	nop
 800427c:	e006      	b.n	800428c <DMA_CheckFifoParam+0xe8>
      break;
 800427e:	bf00      	nop
 8004280:	e004      	b.n	800428c <DMA_CheckFifoParam+0xe8>
      break;
 8004282:	bf00      	nop
 8004284:	e002      	b.n	800428c <DMA_CheckFifoParam+0xe8>
      break;   
 8004286:	bf00      	nop
 8004288:	e000      	b.n	800428c <DMA_CheckFifoParam+0xe8>
      break;
 800428a:	bf00      	nop
    }
  } 
  
  return status; 
 800428c:	7bfb      	ldrb	r3, [r7, #15]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop

0800429c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a3a      	ldr	r2, [pc, #232]	@ (80043a4 <HAL_GPIO_Init+0x108>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d02b      	beq.n	8004316 <HAL_GPIO_Init+0x7a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a39      	ldr	r2, [pc, #228]	@ (80043a8 <HAL_GPIO_Init+0x10c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d027      	beq.n	8004316 <HAL_GPIO_Init+0x7a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a38      	ldr	r2, [pc, #224]	@ (80043ac <HAL_GPIO_Init+0x110>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d023      	beq.n	8004316 <HAL_GPIO_Init+0x7a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a37      	ldr	r2, [pc, #220]	@ (80043b0 <HAL_GPIO_Init+0x114>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01f      	beq.n	8004316 <HAL_GPIO_Init+0x7a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a36      	ldr	r2, [pc, #216]	@ (80043b4 <HAL_GPIO_Init+0x118>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01b      	beq.n	8004316 <HAL_GPIO_Init+0x7a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a35      	ldr	r2, [pc, #212]	@ (80043b8 <HAL_GPIO_Init+0x11c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d017      	beq.n	8004316 <HAL_GPIO_Init+0x7a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a34      	ldr	r2, [pc, #208]	@ (80043bc <HAL_GPIO_Init+0x120>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <HAL_GPIO_Init+0x7a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a33      	ldr	r2, [pc, #204]	@ (80043c0 <HAL_GPIO_Init+0x124>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00f      	beq.n	8004316 <HAL_GPIO_Init+0x7a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a32      	ldr	r2, [pc, #200]	@ (80043c4 <HAL_GPIO_Init+0x128>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00b      	beq.n	8004316 <HAL_GPIO_Init+0x7a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a31      	ldr	r2, [pc, #196]	@ (80043c8 <HAL_GPIO_Init+0x12c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <HAL_GPIO_Init+0x7a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a30      	ldr	r2, [pc, #192]	@ (80043cc <HAL_GPIO_Init+0x130>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x7a>
 800430e:	21aa      	movs	r1, #170	@ 0xaa
 8004310:	482f      	ldr	r0, [pc, #188]	@ (80043d0 <HAL_GPIO_Init+0x134>)
 8004312:	f7fe fbf7 	bl	8002b04 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <HAL_GPIO_Init+0x8c>
 8004320:	21ab      	movs	r1, #171	@ 0xab
 8004322:	482b      	ldr	r0, [pc, #172]	@ (80043d0 <HAL_GPIO_Init+0x134>)
 8004324:	f7fe fbee 	bl	8002b04 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d035      	beq.n	800439c <HAL_GPIO_Init+0x100>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d031      	beq.n	800439c <HAL_GPIO_Init+0x100>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b11      	cmp	r3, #17
 800433e:	d02d      	beq.n	800439c <HAL_GPIO_Init+0x100>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d029      	beq.n	800439c <HAL_GPIO_Init+0x100>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b12      	cmp	r3, #18
 800434e:	d025      	beq.n	800439c <HAL_GPIO_Init+0x100>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8004358:	d020      	beq.n	800439c <HAL_GPIO_Init+0x100>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004362:	d01b      	beq.n	800439c <HAL_GPIO_Init+0x100>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 800436c:	d016      	beq.n	800439c <HAL_GPIO_Init+0x100>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8004376:	d011      	beq.n	800439c <HAL_GPIO_Init+0x100>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8004380:	d00c      	beq.n	800439c <HAL_GPIO_Init+0x100>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 800438a:	d007      	beq.n	800439c <HAL_GPIO_Init+0x100>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b03      	cmp	r3, #3
 8004392:	d003      	beq.n	800439c <HAL_GPIO_Init+0x100>
 8004394:	21ac      	movs	r1, #172	@ 0xac
 8004396:	480e      	ldr	r0, [pc, #56]	@ (80043d0 <HAL_GPIO_Init+0x134>)
 8004398:	f7fe fbb4 	bl	8002b04 <assert_failed>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	e2c7      	b.n	8004932 <HAL_GPIO_Init+0x696>
 80043a2:	bf00      	nop
 80043a4:	40020000 	.word	0x40020000
 80043a8:	40020400 	.word	0x40020400
 80043ac:	40020800 	.word	0x40020800
 80043b0:	40020c00 	.word	0x40020c00
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40021400 	.word	0x40021400
 80043bc:	40021800 	.word	0x40021800
 80043c0:	40021c00 	.word	0x40021c00
 80043c4:	40022000 	.word	0x40022000
 80043c8:	40022400 	.word	0x40022400
 80043cc:	40022800 	.word	0x40022800
 80043d0:	0800c57c 	.word	0x0800c57c
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80043d4:	2201      	movs	r2, #1
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4013      	ands	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	f040 829d 	bne.w	800492c <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d005      	beq.n	800440a <HAL_GPIO_Init+0x16e>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d144      	bne.n	8004494 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00f      	beq.n	8004432 <HAL_GPIO_Init+0x196>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d00b      	beq.n	8004432 <HAL_GPIO_Init+0x196>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d007      	beq.n	8004432 <HAL_GPIO_Init+0x196>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2b03      	cmp	r3, #3
 8004428:	d003      	beq.n	8004432 <HAL_GPIO_Init+0x196>
 800442a:	21bd      	movs	r1, #189	@ 0xbd
 800442c:	4831      	ldr	r0, [pc, #196]	@ (80044f4 <HAL_GPIO_Init+0x258>)
 800442e:	f7fe fb69 	bl	8002b04 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	2203      	movs	r2, #3
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004468:	2201      	movs	r2, #1
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 0201 	and.w	r2, r3, #1
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	2b03      	cmp	r3, #3
 800449e:	d02b      	beq.n	80044f8 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00b      	beq.n	80044c0 <HAL_GPIO_Init+0x224>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d007      	beq.n	80044c0 <HAL_GPIO_Init+0x224>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d003      	beq.n	80044c0 <HAL_GPIO_Init+0x224>
 80044b8:	21ce      	movs	r1, #206	@ 0xce
 80044ba:	480e      	ldr	r0, [pc, #56]	@ (80044f4 <HAL_GPIO_Init+0x258>)
 80044bc:	f7fe fb22 	bl	8002b04 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	2203      	movs	r2, #3
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	60da      	str	r2, [r3, #12]
 80044f0:	e002      	b.n	80044f8 <HAL_GPIO_Init+0x25c>
 80044f2:	bf00      	nop
 80044f4:	0800c57c 	.word	0x0800c57c
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b02      	cmp	r3, #2
 8004502:	f040 8134 	bne.w	800476e <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 810b 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b01      	cmp	r3, #1
 8004516:	f000 8106 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 8101 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80fc 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80f7 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b01      	cmp	r3, #1
 800453e:	f000 80f2 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b02      	cmp	r3, #2
 8004548:	f000 80ed 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b02      	cmp	r3, #2
 8004552:	f000 80e8 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b02      	cmp	r3, #2
 800455c:	f000 80e3 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b03      	cmp	r3, #3
 8004566:	f000 80de 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b03      	cmp	r3, #3
 8004570:	f000 80d9 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b03      	cmp	r3, #3
 800457a:	f000 80d4 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b03      	cmp	r3, #3
 8004584:	f000 80cf 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b03      	cmp	r3, #3
 800458e:	f000 80ca 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b03      	cmp	r3, #3
 8004598:	f000 80c5 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	f000 80c0 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	f000 80bb 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	f000 80b6 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b04      	cmp	r3, #4
 80045c0:	f000 80b1 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	f000 80ac 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b05      	cmp	r3, #5
 80045d4:	f000 80a7 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b05      	cmp	r3, #5
 80045de:	f000 80a2 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	f000 809d 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	2b05      	cmp	r3, #5
 80045f2:	f000 8098 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	f000 8093 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b05      	cmp	r3, #5
 8004606:	f000 808e 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b06      	cmp	r3, #6
 8004610:	f000 8089 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b06      	cmp	r3, #6
 800461a:	f000 8084 	beq.w	8004726 <HAL_GPIO_Init+0x48a>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b07      	cmp	r3, #7
 8004624:	d07f      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b07      	cmp	r3, #7
 800462c:	d07b      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b07      	cmp	r3, #7
 8004634:	d077      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b07      	cmp	r3, #7
 800463c:	d073      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b07      	cmp	r3, #7
 8004644:	d06f      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b07      	cmp	r3, #7
 800464c:	d06b      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b07      	cmp	r3, #7
 8004654:	d067      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b08      	cmp	r3, #8
 800465c:	d063      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b08      	cmp	r3, #8
 8004664:	d05f      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b08      	cmp	r3, #8
 800466c:	d05b      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b08      	cmp	r3, #8
 8004674:	d057      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b08      	cmp	r3, #8
 800467c:	d053      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b08      	cmp	r3, #8
 8004684:	d04f      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b08      	cmp	r3, #8
 800468c:	d04b      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b09      	cmp	r3, #9
 8004694:	d047      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b09      	cmp	r3, #9
 800469c:	d043      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b09      	cmp	r3, #9
 80046a4:	d03f      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b09      	cmp	r3, #9
 80046ac:	d03b      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b09      	cmp	r3, #9
 80046b4:	d037      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b09      	cmp	r3, #9
 80046bc:	d033      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b09      	cmp	r3, #9
 80046c4:	d02f      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b0a      	cmp	r3, #10
 80046cc:	d02b      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b0a      	cmp	r3, #10
 80046d4:	d027      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b0a      	cmp	r3, #10
 80046dc:	d023      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b0a      	cmp	r3, #10
 80046e4:	d01f      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b0b      	cmp	r3, #11
 80046ec:	d01b      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b0c      	cmp	r3, #12
 80046f4:	d017      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	d013      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b0c      	cmp	r3, #12
 8004704:	d00f      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b0f      	cmp	r3, #15
 800470c:	d00b      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b0d      	cmp	r3, #13
 8004714:	d007      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b0e      	cmp	r3, #14
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_Init+0x48a>
 800471e:	21db      	movs	r1, #219	@ 0xdb
 8004720:	4888      	ldr	r0, [pc, #544]	@ (8004944 <HAL_GPIO_Init+0x6a8>)
 8004722:	f7fe f9ef 	bl	8002b04 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	08da      	lsrs	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3208      	adds	r2, #8
 800472e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	220f      	movs	r2, #15
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	08da      	lsrs	r2, r3, #3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3208      	adds	r2, #8
 8004768:	69b9      	ldr	r1, [r7, #24]
 800476a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	2203      	movs	r2, #3
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 0203 	and.w	r2, r3, #3
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4313      	orrs	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80be 	beq.w	800492c <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b0:	4b65      	ldr	r3, [pc, #404]	@ (8004948 <HAL_GPIO_Init+0x6ac>)
 80047b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b4:	4a64      	ldr	r2, [pc, #400]	@ (8004948 <HAL_GPIO_Init+0x6ac>)
 80047b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80047bc:	4b62      	ldr	r3, [pc, #392]	@ (8004948 <HAL_GPIO_Init+0x6ac>)
 80047be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047c8:	4a60      	ldr	r2, [pc, #384]	@ (800494c <HAL_GPIO_Init+0x6b0>)
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	089b      	lsrs	r3, r3, #2
 80047ce:	3302      	adds	r3, #2
 80047d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	220f      	movs	r2, #15
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4013      	ands	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a58      	ldr	r2, [pc, #352]	@ (8004950 <HAL_GPIO_Init+0x6b4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d037      	beq.n	8004864 <HAL_GPIO_Init+0x5c8>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a57      	ldr	r2, [pc, #348]	@ (8004954 <HAL_GPIO_Init+0x6b8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d031      	beq.n	8004860 <HAL_GPIO_Init+0x5c4>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a56      	ldr	r2, [pc, #344]	@ (8004958 <HAL_GPIO_Init+0x6bc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d02b      	beq.n	800485c <HAL_GPIO_Init+0x5c0>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a55      	ldr	r2, [pc, #340]	@ (800495c <HAL_GPIO_Init+0x6c0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d025      	beq.n	8004858 <HAL_GPIO_Init+0x5bc>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a54      	ldr	r2, [pc, #336]	@ (8004960 <HAL_GPIO_Init+0x6c4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d01f      	beq.n	8004854 <HAL_GPIO_Init+0x5b8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a53      	ldr	r2, [pc, #332]	@ (8004964 <HAL_GPIO_Init+0x6c8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d019      	beq.n	8004850 <HAL_GPIO_Init+0x5b4>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a52      	ldr	r2, [pc, #328]	@ (8004968 <HAL_GPIO_Init+0x6cc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d013      	beq.n	800484c <HAL_GPIO_Init+0x5b0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a51      	ldr	r2, [pc, #324]	@ (800496c <HAL_GPIO_Init+0x6d0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00d      	beq.n	8004848 <HAL_GPIO_Init+0x5ac>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a50      	ldr	r2, [pc, #320]	@ (8004970 <HAL_GPIO_Init+0x6d4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d007      	beq.n	8004844 <HAL_GPIO_Init+0x5a8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a4f      	ldr	r2, [pc, #316]	@ (8004974 <HAL_GPIO_Init+0x6d8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <HAL_GPIO_Init+0x5a4>
 800483c:	2309      	movs	r3, #9
 800483e:	e012      	b.n	8004866 <HAL_GPIO_Init+0x5ca>
 8004840:	230a      	movs	r3, #10
 8004842:	e010      	b.n	8004866 <HAL_GPIO_Init+0x5ca>
 8004844:	2308      	movs	r3, #8
 8004846:	e00e      	b.n	8004866 <HAL_GPIO_Init+0x5ca>
 8004848:	2307      	movs	r3, #7
 800484a:	e00c      	b.n	8004866 <HAL_GPIO_Init+0x5ca>
 800484c:	2306      	movs	r3, #6
 800484e:	e00a      	b.n	8004866 <HAL_GPIO_Init+0x5ca>
 8004850:	2305      	movs	r3, #5
 8004852:	e008      	b.n	8004866 <HAL_GPIO_Init+0x5ca>
 8004854:	2304      	movs	r3, #4
 8004856:	e006      	b.n	8004866 <HAL_GPIO_Init+0x5ca>
 8004858:	2303      	movs	r3, #3
 800485a:	e004      	b.n	8004866 <HAL_GPIO_Init+0x5ca>
 800485c:	2302      	movs	r3, #2
 800485e:	e002      	b.n	8004866 <HAL_GPIO_Init+0x5ca>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <HAL_GPIO_Init+0x5ca>
 8004864:	2300      	movs	r3, #0
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	f002 0203 	and.w	r2, r2, #3
 800486c:	0092      	lsls	r2, r2, #2
 800486e:	4093      	lsls	r3, r2
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004876:	4935      	ldr	r1, [pc, #212]	@ (800494c <HAL_GPIO_Init+0x6b0>)
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	089b      	lsrs	r3, r3, #2
 800487c:	3302      	adds	r3, #2
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004884:	4b3c      	ldr	r3, [pc, #240]	@ (8004978 <HAL_GPIO_Init+0x6dc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048a8:	4a33      	ldr	r2, [pc, #204]	@ (8004978 <HAL_GPIO_Init+0x6dc>)
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048ae:	4b32      	ldr	r3, [pc, #200]	@ (8004978 <HAL_GPIO_Init+0x6dc>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048d2:	4a29      	ldr	r2, [pc, #164]	@ (8004978 <HAL_GPIO_Init+0x6dc>)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048d8:	4b27      	ldr	r3, [pc, #156]	@ (8004978 <HAL_GPIO_Init+0x6dc>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004978 <HAL_GPIO_Init+0x6dc>)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004902:	4b1d      	ldr	r3, [pc, #116]	@ (8004978 <HAL_GPIO_Init+0x6dc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	43db      	mvns	r3, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004926:	4a14      	ldr	r2, [pc, #80]	@ (8004978 <HAL_GPIO_Init+0x6dc>)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	3301      	adds	r3, #1
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	2b0f      	cmp	r3, #15
 8004936:	f67f ad4d 	bls.w	80043d4 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	3720      	adds	r7, #32
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	0800c57c 	.word	0x0800c57c
 8004948:	40023800 	.word	0x40023800
 800494c:	40013800 	.word	0x40013800
 8004950:	40020000 	.word	0x40020000
 8004954:	40020400 	.word	0x40020400
 8004958:	40020800 	.word	0x40020800
 800495c:	40020c00 	.word	0x40020c00
 8004960:	40021000 	.word	0x40021000
 8004964:	40021400 	.word	0x40021400
 8004968:	40021800 	.word	0x40021800
 800496c:	40021c00 	.word	0x40021c00
 8004970:	40022000 	.word	0x40022000
 8004974:	40022400 	.word	0x40022400
 8004978:	40013c00 	.word	0x40013c00

0800497c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004988:	887b      	ldrh	r3, [r7, #2]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d104      	bne.n	8004998 <HAL_GPIO_ReadPin+0x1c>
 800498e:	f240 1177 	movw	r1, #375	@ 0x177
 8004992:	4809      	ldr	r0, [pc, #36]	@ (80049b8 <HAL_GPIO_ReadPin+0x3c>)
 8004994:	f7fe f8b6 	bl	8002b04 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
 80049a8:	e001      	b.n	80049ae <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049aa:	2300      	movs	r3, #0
 80049ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	0800c57c 	.word	0x0800c57c

080049bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e113      	b.n	8004bf6 <HAL_I2C_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a8b      	ldr	r2, [pc, #556]	@ (8004c00 <HAL_I2C_Init+0x244>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d013      	beq.n	8004a00 <HAL_I2C_Init+0x44>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a89      	ldr	r2, [pc, #548]	@ (8004c04 <HAL_I2C_Init+0x248>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00e      	beq.n	8004a00 <HAL_I2C_Init+0x44>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a88      	ldr	r2, [pc, #544]	@ (8004c08 <HAL_I2C_Init+0x24c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d009      	beq.n	8004a00 <HAL_I2C_Init+0x44>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a86      	ldr	r2, [pc, #536]	@ (8004c0c <HAL_I2C_Init+0x250>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_I2C_Init+0x44>
 80049f6:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80049fa:	4885      	ldr	r0, [pc, #532]	@ (8004c10 <HAL_I2C_Init+0x254>)
 80049fc:	f7fe f882 	bl	8002b04 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a08:	d304      	bcc.n	8004a14 <HAL_I2C_Init+0x58>
 8004a0a:	f240 2121 	movw	r1, #545	@ 0x221
 8004a0e:	4880      	ldr	r0, [pc, #512]	@ (8004c10 <HAL_I2C_Init+0x254>)
 8004a10:	f7fe f878 	bl	8002b04 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d008      	beq.n	8004a2e <HAL_I2C_Init+0x72>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d004      	beq.n	8004a2e <HAL_I2C_Init+0x72>
 8004a24:	f240 2122 	movw	r1, #546	@ 0x222
 8004a28:	4879      	ldr	r0, [pc, #484]	@ (8004c10 <HAL_I2C_Init+0x254>)
 8004a2a:	f7fe f86b 	bl	8002b04 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <HAL_I2C_Init+0x8e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a3e:	d004      	beq.n	8004a4a <HAL_I2C_Init+0x8e>
 8004a40:	f240 2123 	movw	r1, #547	@ 0x223
 8004a44:	4872      	ldr	r0, [pc, #456]	@ (8004c10 <HAL_I2C_Init+0x254>)
 8004a46:	f7fe f85d 	bl	8002b04 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2bff      	cmp	r3, #255	@ 0xff
 8004a50:	d904      	bls.n	8004a5c <HAL_I2C_Init+0xa0>
 8004a52:	f44f 7109 	mov.w	r1, #548	@ 0x224
 8004a56:	486e      	ldr	r0, [pc, #440]	@ (8004c10 <HAL_I2C_Init+0x254>)
 8004a58:	f7fe f854 	bl	8002b04 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d020      	beq.n	8004aa6 <HAL_I2C_Init+0xea>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d01c      	beq.n	8004aa6 <HAL_I2C_Init+0xea>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d018      	beq.n	8004aa6 <HAL_I2C_Init+0xea>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d014      	beq.n	8004aa6 <HAL_I2C_Init+0xea>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d010      	beq.n	8004aa6 <HAL_I2C_Init+0xea>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	2b05      	cmp	r3, #5
 8004a8a:	d00c      	beq.n	8004aa6 <HAL_I2C_Init+0xea>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	2b06      	cmp	r3, #6
 8004a92:	d008      	beq.n	8004aa6 <HAL_I2C_Init+0xea>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2b07      	cmp	r3, #7
 8004a9a:	d004      	beq.n	8004aa6 <HAL_I2C_Init+0xea>
 8004a9c:	f240 2125 	movw	r1, #549	@ 0x225
 8004aa0:	485b      	ldr	r0, [pc, #364]	@ (8004c10 <HAL_I2C_Init+0x254>)
 8004aa2:	f7fe f82f 	bl	8002b04 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_I2C_Init+0x106>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ab6:	d004      	beq.n	8004ac2 <HAL_I2C_Init+0x106>
 8004ab8:	f240 2126 	movw	r1, #550	@ 0x226
 8004abc:	4854      	ldr	r0, [pc, #336]	@ (8004c10 <HAL_I2C_Init+0x254>)
 8004abe:	f7fe f821 	bl	8002b04 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_I2C_Init+0x122>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ad2:	d004      	beq.n	8004ade <HAL_I2C_Init+0x122>
 8004ad4:	f240 2127 	movw	r1, #551	@ 0x227
 8004ad8:	484d      	ldr	r0, [pc, #308]	@ (8004c10 <HAL_I2C_Init+0x254>)
 8004ada:	f7fe f813 	bl	8002b04 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fe f836 	bl	8002b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2224      	movs	r2, #36	@ 0x24
 8004afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0201 	bic.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d107      	bne.n	8004b46 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	e006      	b.n	8004b54 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d108      	bne.n	8004b6e <HAL_I2C_Init+0x1b2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b6a:	605a      	str	r2, [r3, #4]
 8004b6c:	e007      	b.n	8004b7e <HAL_I2C_Init+0x1c2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b22      	ldr	r3, [pc, #136]	@ (8004c14 <HAL_I2C_Init+0x258>)
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69d9      	ldr	r1, [r3, #28]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40005400 	.word	0x40005400
 8004c04:	40005800 	.word	0x40005800
 8004c08:	40005c00 	.word	0x40005c00
 8004c0c:	40006000 	.word	0x40006000
 8004c10:	0800c5b8 	.word	0x0800c5b8
 8004c14:	02008000 	.word	0x02008000

08004c18 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	461a      	mov	r2, r3
 8004c24:	460b      	mov	r3, r1
 8004c26:	817b      	strh	r3, [r7, #10]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	f040 80fd 	bne.w	8004e34 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_I2C_Master_Transmit+0x30>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e0f6      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x21e>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c50:	f7fe fb34 	bl	80032bc <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	2319      	movs	r3, #25
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f914 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0e1      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2221      	movs	r2, #33	@ 0x21
 8004c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2210      	movs	r2, #16
 8004c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	893a      	ldrh	r2, [r7, #8]
 8004c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2bff      	cmp	r3, #255	@ 0xff
 8004ca2:	d906      	bls.n	8004cb2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	22ff      	movs	r2, #255	@ 0xff
 8004ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004caa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	e007      	b.n	8004cc2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004cbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cc0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d024      	beq.n	8004d14 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	781a      	ldrb	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	3301      	adds	r3, #1
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	8979      	ldrh	r1, [r7, #10]
 8004d06:	4b4e      	ldr	r3, [pc, #312]	@ (8004e40 <HAL_I2C_Master_Transmit+0x228>)
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 fa83 	bl	8005218 <I2C_TransferConfig>
 8004d12:	e066      	b.n	8004de2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	8979      	ldrh	r1, [r7, #10]
 8004d1c:	4b48      	ldr	r3, [pc, #288]	@ (8004e40 <HAL_I2C_Master_Transmit+0x228>)
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fa78 	bl	8005218 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d28:	e05b      	b.n	8004de2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	6a39      	ldr	r1, [r7, #32]
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f907 	bl	8004f42 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07b      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	781a      	ldrb	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d034      	beq.n	8004de2 <HAL_I2C_Master_Transmit+0x1ca>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d130      	bne.n	8004de2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	2200      	movs	r2, #0
 8004d88:	2180      	movs	r1, #128	@ 0x80
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f880 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e04d      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2bff      	cmp	r3, #255	@ 0xff
 8004da2:	d90e      	bls.n	8004dc2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	22ff      	movs	r2, #255	@ 0xff
 8004da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	8979      	ldrh	r1, [r7, #10]
 8004db2:	2300      	movs	r3, #0
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 fa2c 	bl	8005218 <I2C_TransferConfig>
 8004dc0:	e00f      	b.n	8004de2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	8979      	ldrh	r1, [r7, #10]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 fa1b 	bl	8005218 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d19e      	bne.n	8004d2a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	6a39      	ldr	r1, [r7, #32]
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f8ed 	bl	8004fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e01a      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2220      	movs	r2, #32
 8004e06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6859      	ldr	r1, [r3, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4b0c      	ldr	r3, [pc, #48]	@ (8004e44 <HAL_I2C_Master_Transmit+0x22c>)
 8004e14:	400b      	ands	r3, r1
 8004e16:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	80002000 	.word	0x80002000
 8004e44:	fe00e800 	.word	0xfe00e800

08004e48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d103      	bne.n	8004e66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2200      	movs	r2, #0
 8004e64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d007      	beq.n	8004e84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	619a      	str	r2, [r3, #24]
  }
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ea0:	e03b      	b.n	8004f1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f8d6 	bl	8005058 <I2C_IsErrorOccurred>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e041      	b.n	8004f3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ebc:	d02d      	beq.n	8004f1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ebe:	f7fe f9fd 	bl	80032bc <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d302      	bcc.n	8004ed4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d122      	bne.n	8004f1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4013      	ands	r3, r2
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2301      	moveq	r3, #1
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d113      	bne.n	8004f1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef6:	f043 0220 	orr.w	r2, r3, #32
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e00f      	b.n	8004f3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699a      	ldr	r2, [r3, #24]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4013      	ands	r3, r2
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	bf0c      	ite	eq
 8004f2a:	2301      	moveq	r3, #1
 8004f2c:	2300      	movne	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	461a      	mov	r2, r3
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d0b4      	beq.n	8004ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f4e:	e033      	b.n	8004fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f87f 	bl	8005058 <I2C_IsErrorOccurred>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e031      	b.n	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f6a:	d025      	beq.n	8004fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6c:	f7fe f9a6 	bl	80032bc <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d302      	bcc.n	8004f82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d11a      	bne.n	8004fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d013      	beq.n	8004fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f94:	f043 0220 	orr.w	r2, r3, #32
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e007      	b.n	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d1c4      	bne.n	8004f50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fdc:	e02f      	b.n	800503e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f838 	bl	8005058 <I2C_IsErrorOccurred>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e02d      	b.n	800504e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff2:	f7fe f963 	bl	80032bc <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d302      	bcc.n	8005008 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d11a      	bne.n	800503e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b20      	cmp	r3, #32
 8005014:	d013      	beq.n	800503e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501a:	f043 0220 	orr.w	r2, r3, #32
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e007      	b.n	800504e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b20      	cmp	r3, #32
 800504a:	d1c8      	bne.n	8004fde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	@ 0x28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d068      	beq.n	8005156 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2210      	movs	r2, #16
 800508a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800508c:	e049      	b.n	8005122 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005094:	d045      	beq.n	8005122 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005096:	f7fe f911 	bl	80032bc <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d302      	bcc.n	80050ac <I2C_IsErrorOccurred+0x54>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d13a      	bne.n	8005122 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ce:	d121      	bne.n	8005114 <I2C_IsErrorOccurred+0xbc>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050d6:	d01d      	beq.n	8005114 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80050d8:	7cfb      	ldrb	r3, [r7, #19]
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d01a      	beq.n	8005114 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80050ee:	f7fe f8e5 	bl	80032bc <HAL_GetTick>
 80050f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050f4:	e00e      	b.n	8005114 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80050f6:	f7fe f8e1 	bl	80032bc <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b19      	cmp	r3, #25
 8005102:	d907      	bls.n	8005114 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	f043 0320 	orr.w	r3, r3, #32
 800510a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005112:	e006      	b.n	8005122 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b20      	cmp	r3, #32
 8005120:	d1e9      	bne.n	80050f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f003 0320 	and.w	r3, r3, #32
 800512c:	2b20      	cmp	r3, #32
 800512e:	d003      	beq.n	8005138 <I2C_IsErrorOccurred+0xe0>
 8005130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0aa      	beq.n	800508e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800513c:	2b00      	cmp	r3, #0
 800513e:	d103      	bne.n	8005148 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2220      	movs	r2, #32
 8005146:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	f043 0304 	orr.w	r3, r3, #4
 800514e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00b      	beq.n	8005180 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005178:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	f043 0308 	orr.w	r3, r3, #8
 8005190:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800519a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	f043 0302 	orr.w	r3, r3, #2
 80051b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80051c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01c      	beq.n	8005206 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f7ff fe3b 	bl	8004e48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6859      	ldr	r1, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <I2C_IsErrorOccurred+0x1bc>)
 80051de:	400b      	ands	r3, r1
 80051e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	431a      	orrs	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005206:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800520a:	4618      	mov	r0, r3
 800520c:	3728      	adds	r7, #40	@ 0x28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	fe00e800 	.word	0xfe00e800

08005218 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	817b      	strh	r3, [r7, #10]
 8005226:	4613      	mov	r3, r2
 8005228:	727b      	strb	r3, [r7, #9]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a2f      	ldr	r2, [pc, #188]	@ (80052ec <I2C_TransferConfig+0xd4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d013      	beq.n	800525c <I2C_TransferConfig+0x44>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a2d      	ldr	r2, [pc, #180]	@ (80052f0 <I2C_TransferConfig+0xd8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00e      	beq.n	800525c <I2C_TransferConfig+0x44>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2c      	ldr	r2, [pc, #176]	@ (80052f4 <I2C_TransferConfig+0xdc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d009      	beq.n	800525c <I2C_TransferConfig+0x44>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2a      	ldr	r2, [pc, #168]	@ (80052f8 <I2C_TransferConfig+0xe0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <I2C_TransferConfig+0x44>
 8005252:	f641 41dd 	movw	r1, #7389	@ 0x1cdd
 8005256:	4829      	ldr	r0, [pc, #164]	@ (80052fc <I2C_TransferConfig+0xe4>)
 8005258:	f7fd fc54 	bl	8002b04 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005262:	d00b      	beq.n	800527c <I2C_TransferConfig+0x64>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800526a:	d007      	beq.n	800527c <I2C_TransferConfig+0x64>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <I2C_TransferConfig+0x64>
 8005272:	f641 41de 	movw	r1, #7390	@ 0x1cde
 8005276:	4821      	ldr	r0, [pc, #132]	@ (80052fc <I2C_TransferConfig+0xe4>)
 8005278:	f7fd fc44 	bl	8002b04 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	4a20      	ldr	r2, [pc, #128]	@ (8005300 <I2C_TransferConfig+0xe8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00f      	beq.n	80052a4 <I2C_TransferConfig+0x8c>
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	4a1f      	ldr	r2, [pc, #124]	@ (8005304 <I2C_TransferConfig+0xec>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00b      	beq.n	80052a4 <I2C_TransferConfig+0x8c>
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	4a1e      	ldr	r2, [pc, #120]	@ (8005308 <I2C_TransferConfig+0xf0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <I2C_TransferConfig+0x8c>
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d004      	beq.n	80052a4 <I2C_TransferConfig+0x8c>
 800529a:	f641 41df 	movw	r1, #7391	@ 0x1cdf
 800529e:	4817      	ldr	r0, [pc, #92]	@ (80052fc <I2C_TransferConfig+0xe4>)
 80052a0:	f7fd fc30 	bl	8002b04 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052a4:	897b      	ldrh	r3, [r7, #10]
 80052a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052aa:	7a7b      	ldrb	r3, [r7, #9]
 80052ac:	041b      	lsls	r3, r3, #16
 80052ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052b2:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052c0:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	0d5b      	lsrs	r3, r3, #21
 80052cc:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80052d0:	4b0e      	ldr	r3, [pc, #56]	@ (800530c <I2C_TransferConfig+0xf4>)
 80052d2:	430b      	orrs	r3, r1
 80052d4:	43db      	mvns	r3, r3
 80052d6:	ea02 0103 	and.w	r1, r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052e4:	bf00      	nop
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40005400 	.word	0x40005400
 80052f0:	40005800 	.word	0x40005800
 80052f4:	40005c00 	.word	0x40005c00
 80052f8:	40006000 	.word	0x40006000
 80052fc:	0800c5b8 	.word	0x0800c5b8
 8005300:	80004000 	.word	0x80004000
 8005304:	80002400 	.word	0x80002400
 8005308:	80002000 	.word	0x80002000
 800530c:	03ff63ff 	.word	0x03ff63ff

08005310 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a32      	ldr	r2, [pc, #200]	@ (80053e8 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d012      	beq.n	800534a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a30      	ldr	r2, [pc, #192]	@ (80053ec <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00d      	beq.n	800534a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a2f      	ldr	r2, [pc, #188]	@ (80053f0 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d008      	beq.n	800534a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a2d      	ldr	r2, [pc, #180]	@ (80053f4 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d003      	beq.n	800534a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8005342:	215e      	movs	r1, #94	@ 0x5e
 8005344:	482c      	ldr	r0, [pc, #176]	@ (80053f8 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8005346:	f7fd fbdd 	bl	8002b04 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005356:	d003      	beq.n	8005360 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8005358:	215f      	movs	r1, #95	@ 0x5f
 800535a:	4827      	ldr	r0, [pc, #156]	@ (80053f8 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800535c:	f7fd fbd2 	bl	8002b04 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b20      	cmp	r3, #32
 800536a:	d138      	bne.n	80053de <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8005376:	2302      	movs	r3, #2
 8005378:	e032      	b.n	80053e0 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2224      	movs	r2, #36	@ 0x24
 8005386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0201 	bic.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6819      	ldr	r1, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	e000      	b.n	80053e0 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80053de:	2302      	movs	r3, #2
  }
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40005400 	.word	0x40005400
 80053ec:	40005800 	.word	0x40005800
 80053f0:	40005c00 	.word	0x40005c00
 80053f4:	40006000 	.word	0x40006000
 80053f8:	0800c5f0 	.word	0x0800c5f0

080053fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a31      	ldr	r2, [pc, #196]	@ (80054d0 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d012      	beq.n	8005436 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a2f      	ldr	r2, [pc, #188]	@ (80054d4 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00d      	beq.n	8005436 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a2e      	ldr	r2, [pc, #184]	@ (80054d8 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d008      	beq.n	8005436 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a2c      	ldr	r2, [pc, #176]	@ (80054dc <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800542e:	218c      	movs	r1, #140	@ 0x8c
 8005430:	482b      	ldr	r0, [pc, #172]	@ (80054e0 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005432:	f7fd fb67 	bl	8002b04 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b0f      	cmp	r3, #15
 800543a:	d903      	bls.n	8005444 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 800543c:	218d      	movs	r1, #141	@ 0x8d
 800543e:	4828      	ldr	r0, [pc, #160]	@ (80054e0 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8005440:	f7fd fb60 	bl	8002b04 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b20      	cmp	r3, #32
 800544e:	d139      	bne.n	80054c4 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 800545a:	2302      	movs	r3, #2
 800545c:	e033      	b.n	80054c6 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2224      	movs	r2, #36	@ 0x24
 800546a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0201 	bic.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800548c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e000      	b.n	80054c6 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 80054c4:	2302      	movs	r3, #2
  }
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40005400 	.word	0x40005400
 80054d4:	40005800 	.word	0x40005800
 80054d8:	40005c00 	.word	0x40005c00
 80054dc:	40006000 	.word	0x40006000
 80054e0:	0800c5f0 	.word	0x0800c5f0

080054e4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d126      	bne.n	8005544 <HAL_I2CEx_EnableFastModePlus+0x60>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d121      	bne.n	8005544 <HAL_I2CEx_EnableFastModePlus+0x60>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d11c      	bne.n	8005544 <HAL_I2CEx_EnableFastModePlus+0x60>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005510:	2b00      	cmp	r3, #0
 8005512:	d117      	bne.n	8005544 <HAL_I2CEx_EnableFastModePlus+0x60>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d112      	bne.n	8005544 <HAL_I2CEx_EnableFastModePlus+0x60>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10d      	bne.n	8005544 <HAL_I2CEx_EnableFastModePlus+0x60>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d108      	bne.n	8005544 <HAL_I2CEx_EnableFastModePlus+0x60>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d103      	bne.n	8005544 <HAL_I2CEx_EnableFastModePlus+0x60>
 800553c:	21da      	movs	r1, #218	@ 0xda
 800553e:	480c      	ldr	r0, [pc, #48]	@ (8005570 <HAL_I2CEx_EnableFastModePlus+0x8c>)
 8005540:	f7fd fae0 	bl	8002b04 <assert_failed>

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005544:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <HAL_I2CEx_EnableFastModePlus+0x90>)
 8005546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005548:	4a0a      	ldr	r2, [pc, #40]	@ (8005574 <HAL_I2CEx_EnableFastModePlus+0x90>)
 800554a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800554e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005550:	4b08      	ldr	r3, [pc, #32]	@ (8005574 <HAL_I2CEx_EnableFastModePlus+0x90>)
 8005552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800555c:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <HAL_I2CEx_EnableFastModePlus+0x94>)
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	4905      	ldr	r1, [pc, #20]	@ (8005578 <HAL_I2CEx_EnableFastModePlus+0x94>)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4313      	orrs	r3, r2
 8005566:	604b      	str	r3, [r1, #4]
}
 8005568:	bf00      	nop
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	0800c5f0 	.word	0x0800c5f0
 8005574:	40023800 	.word	0x40023800
 8005578:	40013800 	.word	0x40013800

0800557c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e178      	b.n	8005880 <HAL_I2S_Init+0x304>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a97      	ldr	r2, [pc, #604]	@ (80057f0 <HAL_I2S_Init+0x274>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00e      	beq.n	80055b6 <HAL_I2S_Init+0x3a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a95      	ldr	r2, [pc, #596]	@ (80057f4 <HAL_I2S_Init+0x278>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d009      	beq.n	80055b6 <HAL_I2S_Init+0x3a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a94      	ldr	r2, [pc, #592]	@ (80057f8 <HAL_I2S_Init+0x27c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d004      	beq.n	80055b6 <HAL_I2S_Init+0x3a>
 80055ac:	f240 1115 	movw	r1, #277	@ 0x115
 80055b0:	4892      	ldr	r0, [pc, #584]	@ (80057fc <HAL_I2S_Init+0x280>)
 80055b2:	f7fd faa7 	bl	8002b04 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d013      	beq.n	80055e6 <HAL_I2S_Init+0x6a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c6:	d00e      	beq.n	80055e6 <HAL_I2S_Init+0x6a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055d0:	d009      	beq.n	80055e6 <HAL_I2S_Init+0x6a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055da:	d004      	beq.n	80055e6 <HAL_I2S_Init+0x6a>
 80055dc:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80055e0:	4886      	ldr	r0, [pc, #536]	@ (80057fc <HAL_I2S_Init+0x280>)
 80055e2:	f7fd fa8f 	bl	8002b04 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d014      	beq.n	8005618 <HAL_I2S_Init+0x9c>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d010      	beq.n	8005618 <HAL_I2S_Init+0x9c>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d00c      	beq.n	8005618 <HAL_I2S_Init+0x9c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b30      	cmp	r3, #48	@ 0x30
 8005604:	d008      	beq.n	8005618 <HAL_I2S_Init+0x9c>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2bb0      	cmp	r3, #176	@ 0xb0
 800560c:	d004      	beq.n	8005618 <HAL_I2S_Init+0x9c>
 800560e:	f240 1117 	movw	r1, #279	@ 0x117
 8005612:	487a      	ldr	r0, [pc, #488]	@ (80057fc <HAL_I2S_Init+0x280>)
 8005614:	f7fd fa76 	bl	8002b04 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d010      	beq.n	8005642 <HAL_I2S_Init+0xc6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d00c      	beq.n	8005642 <HAL_I2S_Init+0xc6>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	2b03      	cmp	r3, #3
 800562e:	d008      	beq.n	8005642 <HAL_I2S_Init+0xc6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	2b05      	cmp	r3, #5
 8005636:	d004      	beq.n	8005642 <HAL_I2S_Init+0xc6>
 8005638:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800563c:	486f      	ldr	r0, [pc, #444]	@ (80057fc <HAL_I2S_Init+0x280>)
 800563e:	f7fd fa61 	bl	8002b04 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800564a:	d008      	beq.n	800565e <HAL_I2S_Init+0xe2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <HAL_I2S_Init+0xe2>
 8005654:	f240 1119 	movw	r1, #281	@ 0x119
 8005658:	4868      	ldr	r0, [pc, #416]	@ (80057fc <HAL_I2S_Init+0x280>)
 800565a:	f7fd fa53 	bl	8002b04 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8005666:	d304      	bcc.n	8005672 <HAL_I2S_Init+0xf6>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	4a64      	ldr	r2, [pc, #400]	@ (8005800 <HAL_I2S_Init+0x284>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d908      	bls.n	8005684 <HAL_I2S_Init+0x108>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d004      	beq.n	8005684 <HAL_I2S_Init+0x108>
 800567a:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800567e:	485f      	ldr	r0, [pc, #380]	@ (80057fc <HAL_I2S_Init+0x280>)
 8005680:	f7fd fa40 	bl	8002b04 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_I2S_Init+0x122>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	2b08      	cmp	r3, #8
 8005692:	d004      	beq.n	800569e <HAL_I2S_Init+0x122>
 8005694:	f240 111b 	movw	r1, #283	@ 0x11b
 8005698:	4858      	ldr	r0, [pc, #352]	@ (80057fc <HAL_I2S_Init+0x280>)
 800569a:	f7fd fa33 	bl	8002b04 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d008      	beq.n	80056b8 <HAL_I2S_Init+0x13c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d004      	beq.n	80056b8 <HAL_I2S_Init+0x13c>
 80056ae:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 80056b2:	4852      	ldr	r0, [pc, #328]	@ (80057fc <HAL_I2S_Init+0x280>)
 80056b4:	f7fd fa26 	bl	8002b04 <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d106      	bne.n	80056d2 <HAL_I2S_Init+0x156>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7fd faa9 	bl	8002c24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69d9      	ldr	r1, [r3, #28]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4b47      	ldr	r3, [pc, #284]	@ (8005804 <HAL_I2S_Init+0x288>)
 80056e6:	400b      	ands	r3, r1
 80056e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2202      	movs	r2, #2
 80056f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d067      	beq.n	80057ca <HAL_I2S_Init+0x24e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d102      	bne.n	8005708 <HAL_I2S_Init+0x18c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005702:	2310      	movs	r3, #16
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	e001      	b.n	800570c <HAL_I2S_Init+0x190>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005708:	2320      	movs	r3, #32
 800570a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b20      	cmp	r3, #32
 8005712:	d802      	bhi.n	800571a <HAL_I2S_Init+0x19e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d102      	bne.n	8005728 <HAL_I2S_Init+0x1ac>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8005722:	4b39      	ldr	r3, [pc, #228]	@ (8005808 <HAL_I2S_Init+0x28c>)
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	e003      	b.n	8005730 <HAL_I2S_Init+0x1b4>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fa15 	bl	8005b58 <I2S_GetClockFreq>
 800572e:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005738:	d125      	bne.n	8005786 <HAL_I2S_Init+0x20a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d010      	beq.n	8005764 <HAL_I2S_Init+0x1e8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	fbb2 f2f3 	udiv	r2, r2, r3
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	461a      	mov	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	fbb2 f3f3 	udiv	r3, r2, r3
 800575e:	3305      	adds	r3, #5
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	e01f      	b.n	80057a4 <HAL_I2S_Init+0x228>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	fbb2 f2f3 	udiv	r2, r2, r3
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	461a      	mov	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005780:	3305      	adds	r3, #5
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	e00e      	b.n	80057a4 <HAL_I2S_Init+0x228>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	fbb2 f2f3 	udiv	r2, r2, r3
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	461a      	mov	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	3305      	adds	r3, #5
 80057a2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4a19      	ldr	r2, [pc, #100]	@ (800580c <HAL_I2S_Init+0x290>)
 80057a8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ac:	08db      	lsrs	r3, r3, #3
 80057ae:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	e003      	b.n	80057d2 <HAL_I2S_Init+0x256>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80057ca:	2302      	movs	r3, #2
 80057cc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d902      	bls.n	80057de <HAL_I2S_Init+0x262>
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	2bff      	cmp	r3, #255	@ 0xff
 80057dc:	d918      	bls.n	8005810 <HAL_I2S_Init+0x294>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e2:	f043 0210 	orr.w	r2, r3, #16
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e048      	b.n	8005880 <HAL_I2S_Init+0x304>
 80057ee:	bf00      	nop
 80057f0:	40013000 	.word	0x40013000
 80057f4:	40003800 	.word	0x40003800
 80057f8:	40003c00 	.word	0x40003c00
 80057fc:	0800c62c 	.word	0x0800c62c
 8005800:	0002ee00 	.word	0x0002ee00
 8005804:	fffff040 	.word	0xfffff040
 8005808:	00bb8000 	.word	0x00bb8000
 800580c:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	ea42 0103 	orr.w	r1, r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	430a      	orrs	r2, r1
 8005822:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69da      	ldr	r2, [r3, #28]
 800582a:	4b17      	ldr	r3, [pc, #92]	@ (8005888 <HAL_I2S_Init+0x30c>)
 800582c:	4013      	ands	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6851      	ldr	r1, [r2, #4]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6892      	ldr	r2, [r2, #8]
 8005836:	4311      	orrs	r1, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	68d2      	ldr	r2, [r2, #12]
 800583c:	4311      	orrs	r1, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6992      	ldr	r2, [r2, #24]
 8005842:	430a      	orrs	r2, r1
 8005844:	431a      	orrs	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800584e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b30      	cmp	r3, #48	@ 0x30
 8005856:	d003      	beq.n	8005860 <HAL_I2S_Init+0x2e4>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2bb0      	cmp	r3, #176	@ 0xb0
 800585e:	d107      	bne.n	8005870 <HAL_I2S_Init+0x2f4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69da      	ldr	r2, [r3, #28]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800586e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	fffff040 	.word	0xfffff040

0800588c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	4613      	mov	r3, r2
 8005898:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_I2S_Transmit_DMA+0x1a>
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e08a      	b.n	80059c0 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d001      	beq.n	80058ba <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80058b6:	2302      	movs	r3, #2
 80058b8:	e082      	b.n	80059c0 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_I2S_Transmit_DMA+0x3e>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e07a      	b.n	80059c0 <HAL_I2S_Transmit_DMA+0x134>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2203      	movs	r2, #3
 80058d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->pTxBuffPtr = pData;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d002      	beq.n	80058fe <HAL_I2S_Transmit_DMA+0x72>
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2b05      	cmp	r3, #5
 80058fc:	d10a      	bne.n	8005914 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	849a      	strh	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount = (Size << 1U);
 8005908:	88fb      	ldrh	r3, [r7, #6]
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	84da      	strh	r2, [r3, #38]	@ 0x26
 8005912:	e005      	b.n	8005920 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	849a      	strh	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount = Size;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	88fa      	ldrh	r2, [r7, #6]
 800591e:	84da      	strh	r2, [r3, #38]	@ 0x26
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005924:	4a28      	ldr	r2, [pc, #160]	@ (80059c8 <HAL_I2S_Transmit_DMA+0x13c>)
 8005926:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592c:	4a27      	ldr	r2, [pc, #156]	@ (80059cc <HAL_I2S_Transmit_DMA+0x140>)
 800592e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005934:	4a26      	ldr	r2, [pc, #152]	@ (80059d0 <HAL_I2S_Transmit_DMA+0x144>)
 8005936:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
                                 (uint32_t)hi2s->pTxBuffPtr,
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1b      	ldr	r3, [r3, #32]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005940:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005948:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800594e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005950:	f7fe f9cc 	bl	8003cec <HAL_DMA_Start_IT>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00f      	beq.n	800597a <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595e:	f043 0208 	orr.w	r2, r3, #8
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	63da      	str	r2, [r3, #60]	@ 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    __HAL_UNLOCK(hi2s);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e022      	b.n	80059c0 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d107      	bne.n	80059a0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0202 	orr.w	r2, r2, #2
 800599e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d107      	bne.n	80059be <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059bc:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	08005c33 	.word	0x08005c33
 80059cc:	08005bf1 	.word	0x08005bf1
 80059d0:	08005cad 	.word	0x08005cad

080059d4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_I2S_Receive_DMA+0x1a>
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e09d      	b.n	8005b2e <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d001      	beq.n	8005a02 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 80059fe:	2302      	movs	r3, #2
 8005a00:	e095      	b.n	8005b2e <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_I2S_Receive_DMA+0x3e>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e08d      	b.n	8005b2e <HAL_I2S_Receive_DMA+0x15a>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2204      	movs	r2, #4
 8005a1e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->pRxBuffPtr = pData;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	629a      	str	r2, [r3, #40]	@ 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d002      	beq.n	8005a46 <HAL_I2S_Receive_DMA+0x72>
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b05      	cmp	r3, #5
 8005a44:	d10a      	bne.n	8005a5c <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8005a5a:	e005      	b.n	8005a68 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	88fa      	ldrh	r2, [r7, #6]
 8005a60:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = Size;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	88fa      	ldrh	r2, [r7, #6]
 8005a66:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6c:	4a32      	ldr	r2, [pc, #200]	@ (8005b38 <HAL_I2S_Receive_DMA+0x164>)
 8005a6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a74:	4a31      	ldr	r2, [pc, #196]	@ (8005b3c <HAL_I2S_Receive_DMA+0x168>)
 8005a76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7c:	4a30      	ldr	r2, [pc, #192]	@ (8005b40 <HAL_I2S_Receive_DMA+0x16c>)
 8005a7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a8e:	d10a      	bne.n	8005aa6 <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a90:	2300      	movs	r3, #0
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab6:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005abc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005abe:	f7fe f915 	bl	8003cec <HAL_DMA_Start_IT>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00f      	beq.n	8005ae8 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005acc:	f043 0208 	orr.w	r2, r3, #8
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    __HAL_UNLOCK(hi2s);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e022      	b.n	8005b2e <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0201 	orr.w	r2, r2, #1
 8005b0c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d107      	bne.n	8005b2c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69da      	ldr	r2, [r3, #28]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b2a:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	08005c91 	.word	0x08005c91
 8005b3c:	08005c4f 	.word	0x08005c4f
 8005b40:	08005cad 	.word	0x08005cad

08005b44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d02d      	beq.n	8005bc4 <I2S_GetClockFreq+0x6c>
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d12e      	bne.n	8005bca <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005be0 <I2S_GetClockFreq+0x88>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d108      	bne.n	8005b8a <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b78:	4b19      	ldr	r3, [pc, #100]	@ (8005be0 <I2S_GetClockFreq+0x88>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b80:	4a18      	ldr	r2, [pc, #96]	@ (8005be4 <I2S_GetClockFreq+0x8c>)
 8005b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	e007      	b.n	8005b9a <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005b8a:	4b15      	ldr	r3, [pc, #84]	@ (8005be0 <I2S_GetClockFreq+0x88>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b92:	4a15      	ldr	r2, [pc, #84]	@ (8005be8 <I2S_GetClockFreq+0x90>)
 8005b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b98:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8005b9a:	4b11      	ldr	r3, [pc, #68]	@ (8005be0 <I2S_GetClockFreq+0x88>)
 8005b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ba0:	0f1b      	lsrs	r3, r3, #28
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8005be0 <I2S_GetClockFreq+0x88>)
 8005baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bae:	099b      	lsrs	r3, r3, #6
 8005bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	fb03 f202 	mul.w	r2, r3, r2
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc0:	613b      	str	r3, [r7, #16]

      break;
 8005bc2:	e005      	b.n	8005bd0 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8005bc4:	4b09      	ldr	r3, [pc, #36]	@ (8005bec <I2S_GetClockFreq+0x94>)
 8005bc6:	613b      	str	r3, [r7, #16]
      break;
 8005bc8:	e002      	b.n	8005bd0 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
      break;
 8005bce:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8005bd0:	693b      	ldr	r3, [r7, #16]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40023800 	.word	0x40023800
 8005be4:	00f42400 	.word	0x00f42400
 8005be8:	017d7840 	.word	0x017d7840
 8005bec:	00bb8000 	.word	0x00bb8000

08005bf0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10e      	bne.n	8005c24 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0202 	bic.w	r2, r2, #2
 8005c14:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    hi2s->State = HAL_I2S_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7fc fefb 	bl	8002a20 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7fc ff0d 	bl	8002a60 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10e      	bne.n	8005c82 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0201 	bic.w	r2, r2, #1
 8005c72:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	85da      	strh	r2, [r3, #46]	@ 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7fc fedc 	bl	8002a40 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7fc feee 	bl	8002a80 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005ca4:	bf00      	nop
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0203 	bic.w	r2, r2, #3
 8005cc8:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	84da      	strh	r2, [r3, #38]	@ 0x26
  hi2s->RxXferCount = 0U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce2:	f043 0208 	orr.w	r2, r3, #8
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f7ff ff2a 	bl	8005b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d02:	4b23      	ldr	r3, [pc, #140]	@ (8005d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	4a22      	ldr	r2, [pc, #136]	@ (8005d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d0e:	4b20      	ldr	r3, [pc, #128]	@ (8005d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8005d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d26:	f7fd fac9 	bl	80032bc <HAL_GetTick>
 8005d2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d2c:	e009      	b.n	8005d42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d2e:	f7fd fac5 	bl	80032bc <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d3c:	d901      	bls.n	8005d42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e022      	b.n	8005d88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d42:	4b14      	ldr	r3, [pc, #80]	@ (8005d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d4e:	d1ee      	bne.n	8005d2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d50:	4b10      	ldr	r3, [pc, #64]	@ (8005d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a0f      	ldr	r2, [pc, #60]	@ (8005d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d5c:	f7fd faae 	bl	80032bc <HAL_GetTick>
 8005d60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d62:	e009      	b.n	8005d78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d64:	f7fd faaa 	bl	80032bc <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d72:	d901      	bls.n	8005d78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e007      	b.n	8005d88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d78:	4b06      	ldr	r3, [pc, #24]	@ (8005d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d84:	d1ee      	bne.n	8005d64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	40007000 	.word	0x40007000

08005d98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005da0:	2300      	movs	r3, #0
 8005da2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e345      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b0f      	cmp	r3, #15
 8005db4:	d904      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x28>
 8005db6:	f240 1163 	movw	r1, #355	@ 0x163
 8005dba:	4892      	ldr	r0, [pc, #584]	@ (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005dbc:	f7fc fea2 	bl	8002b04 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 809a 	beq.w	8005f02 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00e      	beq.n	8005df4 <HAL_RCC_OscConfig+0x5c>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dde:	d009      	beq.n	8005df4 <HAL_RCC_OscConfig+0x5c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005de8:	d004      	beq.n	8005df4 <HAL_RCC_OscConfig+0x5c>
 8005dea:	f240 1169 	movw	r1, #361	@ 0x169
 8005dee:	4885      	ldr	r0, [pc, #532]	@ (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005df0:	f7fc fe88 	bl	8002b04 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005df4:	4b84      	ldr	r3, [pc, #528]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 030c 	and.w	r3, r3, #12
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d00c      	beq.n	8005e1a <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e00:	4b81      	ldr	r3, [pc, #516]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 030c 	and.w	r3, r3, #12
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d112      	bne.n	8005e32 <HAL_RCC_OscConfig+0x9a>
 8005e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e18:	d10b      	bne.n	8005e32 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e1a:	4b7b      	ldr	r3, [pc, #492]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d06c      	beq.n	8005f00 <HAL_RCC_OscConfig+0x168>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d168      	bne.n	8005f00 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e303      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e3a:	d106      	bne.n	8005e4a <HAL_RCC_OscConfig+0xb2>
 8005e3c:	4b72      	ldr	r3, [pc, #456]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a71      	ldr	r2, [pc, #452]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	e02e      	b.n	8005ea8 <HAL_RCC_OscConfig+0x110>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10c      	bne.n	8005e6c <HAL_RCC_OscConfig+0xd4>
 8005e52:	4b6d      	ldr	r3, [pc, #436]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a6c      	ldr	r2, [pc, #432]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a69      	ldr	r2, [pc, #420]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	e01d      	b.n	8005ea8 <HAL_RCC_OscConfig+0x110>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e74:	d10c      	bne.n	8005e90 <HAL_RCC_OscConfig+0xf8>
 8005e76:	4b64      	ldr	r3, [pc, #400]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a63      	ldr	r2, [pc, #396]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	4b61      	ldr	r3, [pc, #388]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a60      	ldr	r2, [pc, #384]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	e00b      	b.n	8005ea8 <HAL_RCC_OscConfig+0x110>
 8005e90:	4b5d      	ldr	r3, [pc, #372]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a5c      	ldr	r2, [pc, #368]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	4b5a      	ldr	r3, [pc, #360]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a59      	ldr	r2, [pc, #356]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005ea2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d013      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb0:	f7fd fa04 	bl	80032bc <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eb8:	f7fd fa00 	bl	80032bc <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b64      	cmp	r3, #100	@ 0x64
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e2b7      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eca:	4b4f      	ldr	r3, [pc, #316]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0f0      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x120>
 8005ed6:	e014      	b.n	8005f02 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fd f9f0 	bl	80032bc <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee0:	f7fd f9ec 	bl	80032bc <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b64      	cmp	r3, #100	@ 0x64
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e2a3      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ef2:	4b45      	ldr	r3, [pc, #276]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x148>
 8005efe:	e000      	b.n	8005f02 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 8084 	beq.w	8006018 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d008      	beq.n	8005f2a <HAL_RCC_OscConfig+0x192>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d004      	beq.n	8005f2a <HAL_RCC_OscConfig+0x192>
 8005f20:	f240 119b 	movw	r1, #411	@ 0x19b
 8005f24:	4837      	ldr	r0, [pc, #220]	@ (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005f26:	f7fc fded 	bl	8002b04 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b1f      	cmp	r3, #31
 8005f30:	d904      	bls.n	8005f3c <HAL_RCC_OscConfig+0x1a4>
 8005f32:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8005f36:	4833      	ldr	r0, [pc, #204]	@ (8006004 <HAL_RCC_OscConfig+0x26c>)
 8005f38:	f7fc fde4 	bl	8002b04 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f3c:	4b32      	ldr	r3, [pc, #200]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 030c 	and.w	r3, r3, #12
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f48:	4b2f      	ldr	r3, [pc, #188]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 030c 	and.w	r3, r3, #12
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d11c      	bne.n	8005f8e <HAL_RCC_OscConfig+0x1f6>
 8005f54:	4b2c      	ldr	r3, [pc, #176]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d116      	bne.n	8005f8e <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f60:	4b29      	ldr	r3, [pc, #164]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_RCC_OscConfig+0x1e0>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d001      	beq.n	8005f78 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e260      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f78:	4b23      	ldr	r3, [pc, #140]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	4920      	ldr	r1, [pc, #128]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f8c:	e044      	b.n	8006018 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d023      	beq.n	8005fde <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f96:	4b1c      	ldr	r3, [pc, #112]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa2:	f7fd f98b 	bl	80032bc <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005faa:	f7fd f987 	bl	80032bc <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e23e      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fbc:	4b12      	ldr	r3, [pc, #72]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0f0      	beq.n	8005faa <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	490c      	ldr	r1, [pc, #48]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	600b      	str	r3, [r1, #0]
 8005fdc:	e01c      	b.n	8006018 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fde:	4b0a      	ldr	r3, [pc, #40]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a09      	ldr	r2, [pc, #36]	@ (8006008 <HAL_RCC_OscConfig+0x270>)
 8005fe4:	f023 0301 	bic.w	r3, r3, #1
 8005fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fea:	f7fd f967 	bl	80032bc <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ff0:	e00c      	b.n	800600c <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ff2:	f7fd f963 	bl	80032bc <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d905      	bls.n	800600c <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e21a      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
 8006004:	0800c664 	.word	0x0800c664
 8006008:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800600c:	4b7e      	ldr	r3, [pc, #504]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1ec      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d043      	beq.n	80060ac <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d008      	beq.n	800603e <HAL_RCC_OscConfig+0x2a6>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d004      	beq.n	800603e <HAL_RCC_OscConfig+0x2a6>
 8006034:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8006038:	4874      	ldr	r0, [pc, #464]	@ (800620c <HAL_RCC_OscConfig+0x474>)
 800603a:	f7fc fd63 	bl	8002b04 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d019      	beq.n	800607a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006046:	4b70      	ldr	r3, [pc, #448]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 8006048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800604a:	4a6f      	ldr	r2, [pc, #444]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006052:	f7fd f933 	bl	80032bc <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800605a:	f7fd f92f 	bl	80032bc <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e1e6      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800606c:	4b66      	ldr	r3, [pc, #408]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 800606e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0f0      	beq.n	800605a <HAL_RCC_OscConfig+0x2c2>
 8006078:	e018      	b.n	80060ac <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800607a:	4b63      	ldr	r3, [pc, #396]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 800607c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800607e:	4a62      	ldr	r2, [pc, #392]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006086:	f7fd f919 	bl	80032bc <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800608e:	f7fd f915 	bl	80032bc <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e1cc      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a0:	4b59      	ldr	r3, [pc, #356]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 80060a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f0      	bne.n	800608e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80bc 	beq.w	8006232 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00c      	beq.n	80060dc <HAL_RCC_OscConfig+0x344>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d008      	beq.n	80060dc <HAL_RCC_OscConfig+0x344>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b05      	cmp	r3, #5
 80060d0:	d004      	beq.n	80060dc <HAL_RCC_OscConfig+0x344>
 80060d2:	f240 2106 	movw	r1, #518	@ 0x206
 80060d6:	484d      	ldr	r0, [pc, #308]	@ (800620c <HAL_RCC_OscConfig+0x474>)
 80060d8:	f7fc fd14 	bl	8002b04 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060dc:	4b4a      	ldr	r3, [pc, #296]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 80060de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10d      	bne.n	8006104 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80060e8:	4b47      	ldr	r3, [pc, #284]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 80060ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ec:	4a46      	ldr	r2, [pc, #280]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 80060ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80060f4:	4b44      	ldr	r3, [pc, #272]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 80060f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006100:	2301      	movs	r3, #1
 8006102:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006104:	4b42      	ldr	r3, [pc, #264]	@ (8006210 <HAL_RCC_OscConfig+0x478>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	d118      	bne.n	8006142 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006110:	4b3f      	ldr	r3, [pc, #252]	@ (8006210 <HAL_RCC_OscConfig+0x478>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a3e      	ldr	r2, [pc, #248]	@ (8006210 <HAL_RCC_OscConfig+0x478>)
 8006116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800611a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800611c:	f7fd f8ce 	bl	80032bc <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006124:	f7fd f8ca 	bl	80032bc <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b64      	cmp	r3, #100	@ 0x64
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e181      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006136:	4b36      	ldr	r3, [pc, #216]	@ (8006210 <HAL_RCC_OscConfig+0x478>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0f0      	beq.n	8006124 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d106      	bne.n	8006158 <HAL_RCC_OscConfig+0x3c0>
 800614a:	4b2f      	ldr	r3, [pc, #188]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 800614c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614e:	4a2e      	ldr	r2, [pc, #184]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 8006150:	f043 0301 	orr.w	r3, r3, #1
 8006154:	6713      	str	r3, [r2, #112]	@ 0x70
 8006156:	e02d      	b.n	80061b4 <HAL_RCC_OscConfig+0x41c>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10c      	bne.n	800617a <HAL_RCC_OscConfig+0x3e2>
 8006160:	4b29      	ldr	r3, [pc, #164]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 8006162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006164:	4a28      	ldr	r2, [pc, #160]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 8006166:	f023 0301 	bic.w	r3, r3, #1
 800616a:	6713      	str	r3, [r2, #112]	@ 0x70
 800616c:	4b26      	ldr	r3, [pc, #152]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 800616e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006170:	4a25      	ldr	r2, [pc, #148]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 8006172:	f023 0304 	bic.w	r3, r3, #4
 8006176:	6713      	str	r3, [r2, #112]	@ 0x70
 8006178:	e01c      	b.n	80061b4 <HAL_RCC_OscConfig+0x41c>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b05      	cmp	r3, #5
 8006180:	d10c      	bne.n	800619c <HAL_RCC_OscConfig+0x404>
 8006182:	4b21      	ldr	r3, [pc, #132]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006186:	4a20      	ldr	r2, [pc, #128]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 8006188:	f043 0304 	orr.w	r3, r3, #4
 800618c:	6713      	str	r3, [r2, #112]	@ 0x70
 800618e:	4b1e      	ldr	r3, [pc, #120]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 8006190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006192:	4a1d      	ldr	r2, [pc, #116]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 8006194:	f043 0301 	orr.w	r3, r3, #1
 8006198:	6713      	str	r3, [r2, #112]	@ 0x70
 800619a:	e00b      	b.n	80061b4 <HAL_RCC_OscConfig+0x41c>
 800619c:	4b1a      	ldr	r3, [pc, #104]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 800619e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a0:	4a19      	ldr	r2, [pc, #100]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80061a8:	4b17      	ldr	r3, [pc, #92]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 80061aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ac:	4a16      	ldr	r2, [pc, #88]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 80061ae:	f023 0304 	bic.w	r3, r3, #4
 80061b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d015      	beq.n	80061e8 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061bc:	f7fd f87e 	bl	80032bc <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c2:	e00a      	b.n	80061da <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c4:	f7fd f87a 	bl	80032bc <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e12f      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061da:	4b0b      	ldr	r3, [pc, #44]	@ (8006208 <HAL_RCC_OscConfig+0x470>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0ee      	beq.n	80061c4 <HAL_RCC_OscConfig+0x42c>
 80061e6:	e01b      	b.n	8006220 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e8:	f7fd f868 	bl	80032bc <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ee:	e011      	b.n	8006214 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f0:	f7fd f864 	bl	80032bc <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061fe:	4293      	cmp	r3, r2
 8006200:	d908      	bls.n	8006214 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e119      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
 8006206:	bf00      	nop
 8006208:	40023800 	.word	0x40023800
 800620c:	0800c664 	.word	0x0800c664
 8006210:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006214:	4b8b      	ldr	r3, [pc, #556]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 8006216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e7      	bne.n	80061f0 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d105      	bne.n	8006232 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006226:	4b87      	ldr	r3, [pc, #540]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622a:	4a86      	ldr	r2, [pc, #536]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 800622c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006230:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00c      	beq.n	8006254 <HAL_RCC_OscConfig+0x4bc>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d008      	beq.n	8006254 <HAL_RCC_OscConfig+0x4bc>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d004      	beq.n	8006254 <HAL_RCC_OscConfig+0x4bc>
 800624a:	f240 214a 	movw	r1, #586	@ 0x24a
 800624e:	487e      	ldr	r0, [pc, #504]	@ (8006448 <HAL_RCC_OscConfig+0x6b0>)
 8006250:	f7fc fc58 	bl	8002b04 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80ed 	beq.w	8006438 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800625e:	4b79      	ldr	r3, [pc, #484]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 030c 	and.w	r3, r3, #12
 8006266:	2b08      	cmp	r3, #8
 8006268:	f000 80b4 	beq.w	80063d4 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	2b02      	cmp	r3, #2
 8006272:	f040 8095 	bne.w	80063a0 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d009      	beq.n	8006292 <HAL_RCC_OscConfig+0x4fa>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006286:	d004      	beq.n	8006292 <HAL_RCC_OscConfig+0x4fa>
 8006288:	f240 2153 	movw	r1, #595	@ 0x253
 800628c:	486e      	ldr	r0, [pc, #440]	@ (8006448 <HAL_RCC_OscConfig+0x6b0>)
 800628e:	f7fc fc39 	bl	8002b04 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d903      	bls.n	80062a2 <HAL_RCC_OscConfig+0x50a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	2b3f      	cmp	r3, #63	@ 0x3f
 80062a0:	d904      	bls.n	80062ac <HAL_RCC_OscConfig+0x514>
 80062a2:	f44f 7115 	mov.w	r1, #596	@ 0x254
 80062a6:	4868      	ldr	r0, [pc, #416]	@ (8006448 <HAL_RCC_OscConfig+0x6b0>)
 80062a8:	f7fc fc2c 	bl	8002b04 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b0:	2b31      	cmp	r3, #49	@ 0x31
 80062b2:	d904      	bls.n	80062be <HAL_RCC_OscConfig+0x526>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b8:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 80062bc:	d904      	bls.n	80062c8 <HAL_RCC_OscConfig+0x530>
 80062be:	f240 2155 	movw	r1, #597	@ 0x255
 80062c2:	4861      	ldr	r0, [pc, #388]	@ (8006448 <HAL_RCC_OscConfig+0x6b0>)
 80062c4:	f7fc fc1e 	bl	8002b04 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d010      	beq.n	80062f2 <HAL_RCC_OscConfig+0x55a>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d00c      	beq.n	80062f2 <HAL_RCC_OscConfig+0x55a>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	2b06      	cmp	r3, #6
 80062de:	d008      	beq.n	80062f2 <HAL_RCC_OscConfig+0x55a>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d004      	beq.n	80062f2 <HAL_RCC_OscConfig+0x55a>
 80062e8:	f240 2156 	movw	r1, #598	@ 0x256
 80062ec:	4856      	ldr	r0, [pc, #344]	@ (8006448 <HAL_RCC_OscConfig+0x6b0>)
 80062ee:	f7fc fc09 	bl	8002b04 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d903      	bls.n	8006302 <HAL_RCC_OscConfig+0x56a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fe:	2b0f      	cmp	r3, #15
 8006300:	d904      	bls.n	800630c <HAL_RCC_OscConfig+0x574>
 8006302:	f240 2157 	movw	r1, #599	@ 0x257
 8006306:	4850      	ldr	r0, [pc, #320]	@ (8006448 <HAL_RCC_OscConfig+0x6b0>)
 8006308:	f7fc fbfc 	bl	8002b04 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800630c:	4b4d      	ldr	r3, [pc, #308]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a4c      	ldr	r2, [pc, #304]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 8006312:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006318:	f7fc ffd0 	bl	80032bc <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006320:	f7fc ffcc 	bl	80032bc <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e083      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006332:	4b44      	ldr	r3, [pc, #272]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69da      	ldr	r2, [r3, #28]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634c:	019b      	lsls	r3, r3, #6
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	3b01      	subs	r3, #1
 8006358:	041b      	lsls	r3, r3, #16
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006360:	061b      	lsls	r3, r3, #24
 8006362:	4313      	orrs	r3, r2
 8006364:	4a37      	ldr	r2, [pc, #220]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 8006366:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800636a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800636c:	4b35      	ldr	r3, [pc, #212]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a34      	ldr	r2, [pc, #208]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 8006372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fc ffa0 	bl	80032bc <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006380:	f7fc ff9c 	bl	80032bc <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e053      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006392:	4b2c      	ldr	r3, [pc, #176]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f0      	beq.n	8006380 <HAL_RCC_OscConfig+0x5e8>
 800639e:	e04b      	b.n	8006438 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a0:	4b28      	ldr	r3, [pc, #160]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a27      	ldr	r2, [pc, #156]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 80063a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7fc ff86 	bl	80032bc <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063b4:	f7fc ff82 	bl	80032bc <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e039      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x61c>
 80063d2:	e031      	b.n	8006438 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80063d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006444 <HAL_RCC_OscConfig+0x6ac>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d028      	beq.n	8006434 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d121      	bne.n	8006434 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d11a      	bne.n	8006434 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006404:	4013      	ands	r3, r2
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800640a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800640c:	4293      	cmp	r3, r2
 800640e:	d111      	bne.n	8006434 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641a:	085b      	lsrs	r3, r3, #1
 800641c:	3b01      	subs	r3, #1
 800641e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006420:	429a      	cmp	r2, r3
 8006422:	d107      	bne.n	8006434 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006430:	429a      	cmp	r2, r3
 8006432:	d001      	beq.n	8006438 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e000      	b.n	800643a <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40023800 	.word	0x40023800
 8006448:	0800c664 	.word	0x0800c664

0800644c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e18c      	b.n	800677e <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_RCC_ClockConfig+0x28>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b0f      	cmp	r3, #15
 8006472:	d904      	bls.n	800647e <HAL_RCC_ClockConfig+0x32>
 8006474:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8006478:	4887      	ldr	r0, [pc, #540]	@ (8006698 <HAL_RCC_ClockConfig+0x24c>)
 800647a:	f7fc fb43 	bl	8002b04 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d031      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d02e      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b02      	cmp	r3, #2
 800648e:	d02b      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b03      	cmp	r3, #3
 8006494:	d028      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b04      	cmp	r3, #4
 800649a:	d025      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b05      	cmp	r3, #5
 80064a0:	d022      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b06      	cmp	r3, #6
 80064a6:	d01f      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b07      	cmp	r3, #7
 80064ac:	d01c      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d019      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b09      	cmp	r3, #9
 80064b8:	d016      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b0a      	cmp	r3, #10
 80064be:	d013      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b0b      	cmp	r3, #11
 80064c4:	d010      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b0c      	cmp	r3, #12
 80064ca:	d00d      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b0d      	cmp	r3, #13
 80064d0:	d00a      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b0e      	cmp	r3, #14
 80064d6:	d007      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b0f      	cmp	r3, #15
 80064dc:	d004      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x9c>
 80064de:	f240 21de 	movw	r1, #734	@ 0x2de
 80064e2:	486d      	ldr	r0, [pc, #436]	@ (8006698 <HAL_RCC_ClockConfig+0x24c>)
 80064e4:	f7fc fb0e 	bl	8002b04 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064e8:	4b6c      	ldr	r3, [pc, #432]	@ (800669c <HAL_RCC_ClockConfig+0x250>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d910      	bls.n	8006518 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064f6:	4b69      	ldr	r3, [pc, #420]	@ (800669c <HAL_RCC_ClockConfig+0x250>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f023 020f 	bic.w	r2, r3, #15
 80064fe:	4967      	ldr	r1, [pc, #412]	@ (800669c <HAL_RCC_ClockConfig+0x250>)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	4313      	orrs	r3, r2
 8006504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006506:	4b65      	ldr	r3, [pc, #404]	@ (800669c <HAL_RCC_ClockConfig+0x250>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	429a      	cmp	r2, r3
 8006512:	d001      	beq.n	8006518 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e132      	b.n	800677e <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d049      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006530:	4b5b      	ldr	r3, [pc, #364]	@ (80066a0 <HAL_RCC_ClockConfig+0x254>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	4a5a      	ldr	r2, [pc, #360]	@ (80066a0 <HAL_RCC_ClockConfig+0x254>)
 8006536:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800653a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006548:	4b55      	ldr	r3, [pc, #340]	@ (80066a0 <HAL_RCC_ClockConfig+0x254>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	4a54      	ldr	r2, [pc, #336]	@ (80066a0 <HAL_RCC_ClockConfig+0x254>)
 800654e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006552:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d024      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x15a>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	2b80      	cmp	r3, #128	@ 0x80
 8006562:	d020      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x15a>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	2b90      	cmp	r3, #144	@ 0x90
 800656a:	d01c      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x15a>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	2ba0      	cmp	r3, #160	@ 0xa0
 8006572:	d018      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x15a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	2bb0      	cmp	r3, #176	@ 0xb0
 800657a:	d014      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x15a>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	2bc0      	cmp	r3, #192	@ 0xc0
 8006582:	d010      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x15a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2bd0      	cmp	r3, #208	@ 0xd0
 800658a:	d00c      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x15a>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2be0      	cmp	r3, #224	@ 0xe0
 8006592:	d008      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x15a>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	2bf0      	cmp	r3, #240	@ 0xf0
 800659a:	d004      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x15a>
 800659c:	f240 3102 	movw	r1, #770	@ 0x302
 80065a0:	483d      	ldr	r0, [pc, #244]	@ (8006698 <HAL_RCC_ClockConfig+0x24c>)
 80065a2:	f7fc faaf 	bl	8002b04 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a6:	4b3e      	ldr	r3, [pc, #248]	@ (80066a0 <HAL_RCC_ClockConfig+0x254>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	493b      	ldr	r1, [pc, #236]	@ (80066a0 <HAL_RCC_ClockConfig+0x254>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d051      	beq.n	8006668 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00c      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x19a>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d008      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x19a>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d004      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x19a>
 80065dc:	f240 3109 	movw	r1, #777	@ 0x309
 80065e0:	482d      	ldr	r0, [pc, #180]	@ (8006698 <HAL_RCC_ClockConfig+0x24c>)
 80065e2:	f7fc fa8f 	bl	8002b04 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d107      	bne.n	80065fe <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ee:	4b2c      	ldr	r3, [pc, #176]	@ (80066a0 <HAL_RCC_ClockConfig+0x254>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d115      	bne.n	8006626 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e0bf      	b.n	800677e <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d107      	bne.n	8006616 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006606:	4b26      	ldr	r3, [pc, #152]	@ (80066a0 <HAL_RCC_ClockConfig+0x254>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d109      	bne.n	8006626 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e0b3      	b.n	800677e <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006616:	4b22      	ldr	r3, [pc, #136]	@ (80066a0 <HAL_RCC_ClockConfig+0x254>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e0ab      	b.n	800677e <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006626:	4b1e      	ldr	r3, [pc, #120]	@ (80066a0 <HAL_RCC_ClockConfig+0x254>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f023 0203 	bic.w	r2, r3, #3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	491b      	ldr	r1, [pc, #108]	@ (80066a0 <HAL_RCC_ClockConfig+0x254>)
 8006634:	4313      	orrs	r3, r2
 8006636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006638:	f7fc fe40 	bl	80032bc <HAL_GetTick>
 800663c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663e:	e00a      	b.n	8006656 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006640:	f7fc fe3c 	bl	80032bc <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800664e:	4293      	cmp	r3, r2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e093      	b.n	800677e <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006656:	4b12      	ldr	r3, [pc, #72]	@ (80066a0 <HAL_RCC_ClockConfig+0x254>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f003 020c 	and.w	r2, r3, #12
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	429a      	cmp	r2, r3
 8006666:	d1eb      	bne.n	8006640 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006668:	4b0c      	ldr	r3, [pc, #48]	@ (800669c <HAL_RCC_ClockConfig+0x250>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d216      	bcs.n	80066a4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006676:	4b09      	ldr	r3, [pc, #36]	@ (800669c <HAL_RCC_ClockConfig+0x250>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f023 020f 	bic.w	r2, r3, #15
 800667e:	4907      	ldr	r1, [pc, #28]	@ (800669c <HAL_RCC_ClockConfig+0x250>)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	4313      	orrs	r3, r2
 8006684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006686:	4b05      	ldr	r3, [pc, #20]	@ (800669c <HAL_RCC_ClockConfig+0x250>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d007      	beq.n	80066a4 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e072      	b.n	800677e <HAL_RCC_ClockConfig+0x332>
 8006698:	0800c664 	.word	0x0800c664
 800669c:	40023c00 	.word	0x40023c00
 80066a0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d025      	beq.n	80066fc <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d018      	beq.n	80066ea <HAL_RCC_ClockConfig+0x29e>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c0:	d013      	beq.n	80066ea <HAL_RCC_ClockConfig+0x29e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066ca:	d00e      	beq.n	80066ea <HAL_RCC_ClockConfig+0x29e>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80066d4:	d009      	beq.n	80066ea <HAL_RCC_ClockConfig+0x29e>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80066de:	d004      	beq.n	80066ea <HAL_RCC_ClockConfig+0x29e>
 80066e0:	f240 3146 	movw	r1, #838	@ 0x346
 80066e4:	4828      	ldr	r0, [pc, #160]	@ (8006788 <HAL_RCC_ClockConfig+0x33c>)
 80066e6:	f7fc fa0d 	bl	8002b04 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066ea:	4b28      	ldr	r3, [pc, #160]	@ (800678c <HAL_RCC_ClockConfig+0x340>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	4925      	ldr	r1, [pc, #148]	@ (800678c <HAL_RCC_ClockConfig+0x340>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b00      	cmp	r3, #0
 8006706:	d026      	beq.n	8006756 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d018      	beq.n	8006742 <HAL_RCC_ClockConfig+0x2f6>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006718:	d013      	beq.n	8006742 <HAL_RCC_ClockConfig+0x2f6>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006722:	d00e      	beq.n	8006742 <HAL_RCC_ClockConfig+0x2f6>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800672c:	d009      	beq.n	8006742 <HAL_RCC_ClockConfig+0x2f6>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8006736:	d004      	beq.n	8006742 <HAL_RCC_ClockConfig+0x2f6>
 8006738:	f240 314d 	movw	r1, #845	@ 0x34d
 800673c:	4812      	ldr	r0, [pc, #72]	@ (8006788 <HAL_RCC_ClockConfig+0x33c>)
 800673e:	f7fc f9e1 	bl	8002b04 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006742:	4b12      	ldr	r3, [pc, #72]	@ (800678c <HAL_RCC_ClockConfig+0x340>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	490e      	ldr	r1, [pc, #56]	@ (800678c <HAL_RCC_ClockConfig+0x340>)
 8006752:	4313      	orrs	r3, r2
 8006754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006756:	f000 f821 	bl	800679c <HAL_RCC_GetSysClockFreq>
 800675a:	4602      	mov	r2, r0
 800675c:	4b0b      	ldr	r3, [pc, #44]	@ (800678c <HAL_RCC_ClockConfig+0x340>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	091b      	lsrs	r3, r3, #4
 8006762:	f003 030f 	and.w	r3, r3, #15
 8006766:	490a      	ldr	r1, [pc, #40]	@ (8006790 <HAL_RCC_ClockConfig+0x344>)
 8006768:	5ccb      	ldrb	r3, [r1, r3]
 800676a:	fa22 f303 	lsr.w	r3, r2, r3
 800676e:	4a09      	ldr	r2, [pc, #36]	@ (8006794 <HAL_RCC_ClockConfig+0x348>)
 8006770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006772:	4b09      	ldr	r3, [pc, #36]	@ (8006798 <HAL_RCC_ClockConfig+0x34c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f7fc fd5c 	bl	8003234 <HAL_InitTick>

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	0800c664 	.word	0x0800c664
 800678c:	40023800 	.word	0x40023800
 8006790:	0800c74c 	.word	0x0800c74c
 8006794:	20000068 	.word	0x20000068
 8006798:	2000006c 	.word	0x2000006c

0800679c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800679c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a0:	b090      	sub	sp, #64	@ 0x40
 80067a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a8:	2300      	movs	r3, #0
 80067aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ac:	2300      	movs	r3, #0
 80067ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067b4:	4b59      	ldr	r3, [pc, #356]	@ (800691c <HAL_RCC_GetSysClockFreq+0x180>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 030c 	and.w	r3, r3, #12
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d00d      	beq.n	80067dc <HAL_RCC_GetSysClockFreq+0x40>
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	f200 80a1 	bhi.w	8006908 <HAL_RCC_GetSysClockFreq+0x16c>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <HAL_RCC_GetSysClockFreq+0x34>
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d003      	beq.n	80067d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80067ce:	e09b      	b.n	8006908 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067d0:	4b53      	ldr	r3, [pc, #332]	@ (8006920 <HAL_RCC_GetSysClockFreq+0x184>)
 80067d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80067d4:	e09b      	b.n	800690e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067d6:	4b53      	ldr	r3, [pc, #332]	@ (8006924 <HAL_RCC_GetSysClockFreq+0x188>)
 80067d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80067da:	e098      	b.n	800690e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067dc:	4b4f      	ldr	r3, [pc, #316]	@ (800691c <HAL_RCC_GetSysClockFreq+0x180>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80067e6:	4b4d      	ldr	r3, [pc, #308]	@ (800691c <HAL_RCC_GetSysClockFreq+0x180>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d028      	beq.n	8006844 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067f2:	4b4a      	ldr	r3, [pc, #296]	@ (800691c <HAL_RCC_GetSysClockFreq+0x180>)
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	099b      	lsrs	r3, r3, #6
 80067f8:	2200      	movs	r2, #0
 80067fa:	623b      	str	r3, [r7, #32]
 80067fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006804:	2100      	movs	r1, #0
 8006806:	4b47      	ldr	r3, [pc, #284]	@ (8006924 <HAL_RCC_GetSysClockFreq+0x188>)
 8006808:	fb03 f201 	mul.w	r2, r3, r1
 800680c:	2300      	movs	r3, #0
 800680e:	fb00 f303 	mul.w	r3, r0, r3
 8006812:	4413      	add	r3, r2
 8006814:	4a43      	ldr	r2, [pc, #268]	@ (8006924 <HAL_RCC_GetSysClockFreq+0x188>)
 8006816:	fba0 1202 	umull	r1, r2, r0, r2
 800681a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800681c:	460a      	mov	r2, r1
 800681e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006822:	4413      	add	r3, r2
 8006824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006828:	2200      	movs	r2, #0
 800682a:	61bb      	str	r3, [r7, #24]
 800682c:	61fa      	str	r2, [r7, #28]
 800682e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006832:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006836:	f7fa fa27 	bl	8000c88 <__aeabi_uldivmod>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4613      	mov	r3, r2
 8006840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006842:	e053      	b.n	80068ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006844:	4b35      	ldr	r3, [pc, #212]	@ (800691c <HAL_RCC_GetSysClockFreq+0x180>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	099b      	lsrs	r3, r3, #6
 800684a:	2200      	movs	r2, #0
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	617a      	str	r2, [r7, #20]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006856:	f04f 0b00 	mov.w	fp, #0
 800685a:	4652      	mov	r2, sl
 800685c:	465b      	mov	r3, fp
 800685e:	f04f 0000 	mov.w	r0, #0
 8006862:	f04f 0100 	mov.w	r1, #0
 8006866:	0159      	lsls	r1, r3, #5
 8006868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800686c:	0150      	lsls	r0, r2, #5
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	ebb2 080a 	subs.w	r8, r2, sl
 8006876:	eb63 090b 	sbc.w	r9, r3, fp
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006886:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800688a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800688e:	ebb2 0408 	subs.w	r4, r2, r8
 8006892:	eb63 0509 	sbc.w	r5, r3, r9
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	00eb      	lsls	r3, r5, #3
 80068a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068a4:	00e2      	lsls	r2, r4, #3
 80068a6:	4614      	mov	r4, r2
 80068a8:	461d      	mov	r5, r3
 80068aa:	eb14 030a 	adds.w	r3, r4, sl
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	eb45 030b 	adc.w	r3, r5, fp
 80068b4:	607b      	str	r3, [r7, #4]
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	f04f 0300 	mov.w	r3, #0
 80068be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068c2:	4629      	mov	r1, r5
 80068c4:	028b      	lsls	r3, r1, #10
 80068c6:	4621      	mov	r1, r4
 80068c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068cc:	4621      	mov	r1, r4
 80068ce:	028a      	lsls	r2, r1, #10
 80068d0:	4610      	mov	r0, r2
 80068d2:	4619      	mov	r1, r3
 80068d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d6:	2200      	movs	r2, #0
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	60fa      	str	r2, [r7, #12]
 80068dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068e0:	f7fa f9d2 	bl	8000c88 <__aeabi_uldivmod>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4613      	mov	r3, r2
 80068ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80068ec:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <HAL_RCC_GetSysClockFreq+0x180>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	0c1b      	lsrs	r3, r3, #16
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	3301      	adds	r3, #1
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80068fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	fbb2 f3f3 	udiv	r3, r2, r3
 8006904:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006906:	e002      	b.n	800690e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006908:	4b05      	ldr	r3, [pc, #20]	@ (8006920 <HAL_RCC_GetSysClockFreq+0x184>)
 800690a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800690c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800690e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006910:	4618      	mov	r0, r3
 8006912:	3740      	adds	r7, #64	@ 0x40
 8006914:	46bd      	mov	sp, r7
 8006916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800691a:	bf00      	nop
 800691c:	40023800 	.word	0x40023800
 8006920:	00f42400 	.word	0x00f42400
 8006924:	017d7840 	.word	0x017d7840

08006928 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	f040 8089 	bne.w	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	f040 8082 	bne.w	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b00      	cmp	r3, #0
 800696a:	d17b      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006974:	2b00      	cmp	r3, #0
 8006976:	d175      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006980:	2b00      	cmp	r3, #0
 8006982:	d16f      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800698c:	2b00      	cmp	r3, #0
 800698e:	d169      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006998:	2b00      	cmp	r3, #0
 800699a:	d163      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d15d      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d157      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d151      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d14b      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d145      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d13f      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d139      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d133      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d12d      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d127      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d121      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d11b      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d115      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10f      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d109      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a5c:	2172      	movs	r1, #114	@ 0x72
 8006a5e:	4895      	ldr	r0, [pc, #596]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006a60:	f7fc f850 	bl	8002b04 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01f      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d008      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a80:	d003      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006a82:	2178      	movs	r1, #120	@ 0x78
 8006a84:	488b      	ldr	r0, [pc, #556]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006a86:	f7fc f83d 	bl	8002b04 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a8a:	4b8b      	ldr	r3, [pc, #556]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	4a8a      	ldr	r2, [pc, #552]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006a90:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a94:	6093      	str	r3, [r2, #8]
 8006a96:	4b88      	ldr	r3, [pc, #544]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a9e:	4986      	ldr	r1, [pc, #536]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8006aac:	2301      	movs	r3, #1
 8006aae:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d029      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00d      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006acc:	d008      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ad6:	d003      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006ad8:	2188      	movs	r1, #136	@ 0x88
 8006ada:	4876      	ldr	r0, [pc, #472]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006adc:	f7fc f812 	bl	8002b04 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ae0:	4b75      	ldr	r3, [pc, #468]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ae6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aee:	4972      	ldr	r1, [pc, #456]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006afe:	d101      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8006b00:	2301      	movs	r3, #1
 8006b02:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d029      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00d      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b2c:	d008      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b36:	d003      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006b38:	219c      	movs	r1, #156	@ 0x9c
 8006b3a:	485e      	ldr	r0, [pc, #376]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006b3c:	f7fb ffe2 	bl	8002b04 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b40:	4b5d      	ldr	r3, [pc, #372]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4e:	495a      	ldr	r1, [pc, #360]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b5e:	d101      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8006b60:	2301      	movs	r3, #1
 8006b62:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8186 	beq.w	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b96:	f000 80e4 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ba2:	f000 80de 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006baa:	4a44      	ldr	r2, [pc, #272]	@ (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	f000 80d8 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb6:	4a42      	ldr	r2, [pc, #264]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	f000 80d2 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc2:	4a40      	ldr	r2, [pc, #256]	@ (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	f000 80cc 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bce:	4a3e      	ldr	r2, [pc, #248]	@ (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	f000 80c6 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bda:	4a3c      	ldr	r2, [pc, #240]	@ (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	f000 80c0 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be6:	4a3a      	ldr	r2, [pc, #232]	@ (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	f000 80ba 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf2:	4a38      	ldr	r2, [pc, #224]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	f000 80b4 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfe:	4a36      	ldr	r2, [pc, #216]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	f000 80ae 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0a:	4a34      	ldr	r2, [pc, #208]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	f000 80a8 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c16:	4a32      	ldr	r2, [pc, #200]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	f000 80a2 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c22:	4a30      	ldr	r2, [pc, #192]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	f000 809c 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c2e:	4a2e      	ldr	r2, [pc, #184]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	f000 8096 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8006cec <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	f000 8090 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c46:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	f000 808a 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c52:	4a28      	ldr	r2, [pc, #160]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	f000 8084 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5e:	4a26      	ldr	r2, [pc, #152]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d07e      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c68:	4a24      	ldr	r2, [pc, #144]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d079      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c72:	4a23      	ldr	r2, [pc, #140]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d074      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7c:	4a21      	ldr	r2, [pc, #132]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d06f      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c86:	4a20      	ldr	r2, [pc, #128]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d06a      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c90:	4a1e      	ldr	r2, [pc, #120]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d065      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d060      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d05b      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cae:	4a1a      	ldr	r2, [pc, #104]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	e033      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006cb4:	0800c69c 	.word	0x0800c69c
 8006cb8:	40023800 	.word	0x40023800
 8006cbc:	00020300 	.word	0x00020300
 8006cc0:	00030300 	.word	0x00030300
 8006cc4:	00040300 	.word	0x00040300
 8006cc8:	00050300 	.word	0x00050300
 8006ccc:	00060300 	.word	0x00060300
 8006cd0:	00070300 	.word	0x00070300
 8006cd4:	00080300 	.word	0x00080300
 8006cd8:	00090300 	.word	0x00090300
 8006cdc:	000a0300 	.word	0x000a0300
 8006ce0:	000b0300 	.word	0x000b0300
 8006ce4:	000c0300 	.word	0x000c0300
 8006ce8:	000d0300 	.word	0x000d0300
 8006cec:	000e0300 	.word	0x000e0300
 8006cf0:	000f0300 	.word	0x000f0300
 8006cf4:	00100300 	.word	0x00100300
 8006cf8:	00110300 	.word	0x00110300
 8006cfc:	00120300 	.word	0x00120300
 8006d00:	00130300 	.word	0x00130300
 8006d04:	00140300 	.word	0x00140300
 8006d08:	00150300 	.word	0x00150300
 8006d0c:	00160300 	.word	0x00160300
 8006d10:	00170300 	.word	0x00170300
 8006d14:	00180300 	.word	0x00180300
 8006d18:	00190300 	.word	0x00190300
 8006d1c:	d021      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d22:	4a4c      	ldr	r2, [pc, #304]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d01c      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2c:	4a4a      	ldr	r2, [pc, #296]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d017      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d36:	4a49      	ldr	r2, [pc, #292]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d012      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d40:	4a47      	ldr	r2, [pc, #284]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00d      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4a:	4a46      	ldr	r2, [pc, #280]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d008      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d54:	4a44      	ldr	r2, [pc, #272]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d003      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006d5a:	21b7      	movs	r1, #183	@ 0xb7
 8006d5c:	4843      	ldr	r0, [pc, #268]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8006d5e:	f7fb fed1 	bl	8002b04 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d62:	4b43      	ldr	r3, [pc, #268]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d66:	4a42      	ldr	r2, [pc, #264]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d6e:	4b40      	ldr	r3, [pc, #256]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d76:	60bb      	str	r3, [r7, #8]
 8006d78:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a3d      	ldr	r2, [pc, #244]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d86:	f7fc fa99 	bl	80032bc <HAL_GetTick>
 8006d8a:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d8c:	e009      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d8e:	f7fc fa95 	bl	80032bc <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b64      	cmp	r3, #100	@ 0x64
 8006d9a:	d902      	bls.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	f000 bd9f 	b.w	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006da2:	4b34      	ldr	r3, [pc, #208]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0ef      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dae:	4b30      	ldr	r3, [pc, #192]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006db6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d036      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d02f      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dcc:	4b28      	ldr	r3, [pc, #160]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dd6:	4b26      	ldr	r3, [pc, #152]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dda:	4a25      	ldr	r2, [pc, #148]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006de0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006de2:	4b23      	ldr	r3, [pc, #140]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de6:	4a22      	ldr	r2, [pc, #136]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006dee:	4a20      	ldr	r2, [pc, #128]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006df4:	4b1e      	ldr	r3, [pc, #120]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d115      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e00:	f7fc fa5c 	bl	80032bc <HAL_GetTick>
 8006e04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e06:	e00b      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e08:	f7fc fa58 	bl	80032bc <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d902      	bls.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	f000 bd60 	b.w	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e20:	4b13      	ldr	r3, [pc, #76]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0ed      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e38:	d120      	bne.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006e46:	4b0c      	ldr	r3, [pc, #48]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006e48:	400b      	ands	r3, r1
 8006e4a:	4909      	ldr	r1, [pc, #36]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	608b      	str	r3, [r1, #8]
 8006e50:	e01a      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006e52:	bf00      	nop
 8006e54:	001a0300 	.word	0x001a0300
 8006e58:	001b0300 	.word	0x001b0300
 8006e5c:	001c0300 	.word	0x001c0300
 8006e60:	001d0300 	.word	0x001d0300
 8006e64:	001e0300 	.word	0x001e0300
 8006e68:	001f0300 	.word	0x001f0300
 8006e6c:	0800c69c 	.word	0x0800c69c
 8006e70:	40023800 	.word	0x40023800
 8006e74:	40007000 	.word	0x40007000
 8006e78:	0ffffcff 	.word	0x0ffffcff
 8006e7c:	4b9a      	ldr	r3, [pc, #616]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	4a99      	ldr	r2, [pc, #612]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e82:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006e86:	6093      	str	r3, [r2, #8]
 8006e88:	4b97      	ldr	r3, [pc, #604]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e94:	4994      	ldr	r1, [pc, #592]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01d      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d008      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eb6:	d003      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006eb8:	21f1      	movs	r1, #241	@ 0xf1
 8006eba:	488c      	ldr	r0, [pc, #560]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006ebc:	f7fb fe22 	bl	8002b04 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ec0:	4b89      	ldr	r3, [pc, #548]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ec6:	4a88      	ldr	r2, [pc, #544]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ec8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ecc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006ed0:	4b85      	ldr	r3, [pc, #532]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ed2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	4983      	ldr	r1, [pc, #524]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d01c      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00d      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006efa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006efe:	d008      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f08:	d003      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006f0a:	21fb      	movs	r1, #251	@ 0xfb
 8006f0c:	4877      	ldr	r0, [pc, #476]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006f0e:	f7fb fdf9 	bl	8002b04 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f12:	4b75      	ldr	r3, [pc, #468]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f20:	4971      	ldr	r1, [pc, #452]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01d      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00e      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f44:	d009      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f4e:	d004      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006f50:	f240 1105 	movw	r1, #261	@ 0x105
 8006f54:	4865      	ldr	r0, [pc, #404]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006f56:	f7fb fdd5 	bl	8002b04 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f5a:	4b63      	ldr	r3, [pc, #396]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f68:	495f      	ldr	r1, [pc, #380]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01d      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00e      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f8c:	d009      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f96:	d004      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006f98:	f240 110f 	movw	r1, #271	@ 0x10f
 8006f9c:	4853      	ldr	r0, [pc, #332]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006f9e:	f7fb fdb1 	bl	8002b04 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fa2:	4b51      	ldr	r3, [pc, #324]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fb0:	494d      	ldr	r1, [pc, #308]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01d      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00e      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fd4:	d009      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fde:	d004      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006fe0:	f240 1119 	movw	r1, #281	@ 0x119
 8006fe4:	4841      	ldr	r0, [pc, #260]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006fe6:	f7fb fd8d 	bl	8002b04 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fea:	4b3f      	ldr	r3, [pc, #252]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff8:	493b      	ldr	r1, [pc, #236]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01f      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007010:	2b00      	cmp	r3, #0
 8007012:	d010      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007018:	2b01      	cmp	r3, #1
 800701a:	d00c      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007020:	2b03      	cmp	r3, #3
 8007022:	d008      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007028:	2b02      	cmp	r3, #2
 800702a:	d004      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800702c:	f240 1123 	movw	r1, #291	@ 0x123
 8007030:	482e      	ldr	r0, [pc, #184]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8007032:	f7fb fd67 	bl	8002b04 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007036:	4b2c      	ldr	r3, [pc, #176]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8007038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703c:	f023 0203 	bic.w	r2, r3, #3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007044:	4928      	ldr	r1, [pc, #160]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8007046:	4313      	orrs	r3, r2
 8007048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01f      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800705c:	2b00      	cmp	r3, #0
 800705e:	d010      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007064:	2b04      	cmp	r3, #4
 8007066:	d00c      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800706c:	2b0c      	cmp	r3, #12
 800706e:	d008      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007074:	2b08      	cmp	r3, #8
 8007076:	d004      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8007078:	f240 112d 	movw	r1, #301	@ 0x12d
 800707c:	481b      	ldr	r0, [pc, #108]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800707e:	f7fb fd41 	bl	8002b04 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007082:	4b19      	ldr	r3, [pc, #100]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8007084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007088:	f023 020c 	bic.w	r2, r3, #12
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007090:	4915      	ldr	r1, [pc, #84]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8007092:	4313      	orrs	r3, r2
 8007094:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d025      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d010      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070b0:	2b10      	cmp	r3, #16
 80070b2:	d00c      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070b8:	2b30      	cmp	r3, #48	@ 0x30
 80070ba:	d008      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d004      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80070c4:	f240 1137 	movw	r1, #311	@ 0x137
 80070c8:	4808      	ldr	r0, [pc, #32]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80070ca:	f7fb fd1b 	bl	8002b04 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070ce:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80070d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070dc:	4902      	ldr	r1, [pc, #8]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80070e4:	e004      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80070e6:	bf00      	nop
 80070e8:	40023800 	.word	0x40023800
 80070ec:	0800c69c 	.word	0x0800c69c
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01f      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007100:	2b00      	cmp	r3, #0
 8007102:	d010      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007108:	2b40      	cmp	r3, #64	@ 0x40
 800710a:	d00c      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007110:	2bc0      	cmp	r3, #192	@ 0xc0
 8007112:	d008      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007118:	2b80      	cmp	r3, #128	@ 0x80
 800711a:	d004      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 800711c:	f240 1141 	movw	r1, #321	@ 0x141
 8007120:	48a0      	ldr	r0, [pc, #640]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007122:	f7fb fcef 	bl	8002b04 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007126:	4ba0      	ldr	r3, [pc, #640]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800712c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007134:	499c      	ldr	r1, [pc, #624]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007136:	4313      	orrs	r3, r2
 8007138:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007144:	2b00      	cmp	r3, #0
 8007146:	d022      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800714c:	2b00      	cmp	r3, #0
 800714e:	d013      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007158:	d00e      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007162:	d009      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800716c:	d004      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800716e:	f240 114b 	movw	r1, #331	@ 0x14b
 8007172:	488c      	ldr	r0, [pc, #560]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007174:	f7fb fcc6 	bl	8002b04 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007178:	4b8b      	ldr	r3, [pc, #556]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800717a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800717e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007186:	4988      	ldr	r1, [pc, #544]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007196:	2b00      	cmp	r3, #0
 8007198:	d022      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d013      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071aa:	d00e      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071b4:	d009      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071be:	d004      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80071c0:	f240 1155 	movw	r1, #341	@ 0x155
 80071c4:	4877      	ldr	r0, [pc, #476]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80071c6:	f7fb fc9d 	bl	8002b04 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80071ca:	4b77      	ldr	r3, [pc, #476]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d8:	4973      	ldr	r1, [pc, #460]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d022      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d013      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071fc:	d00e      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007202:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007206:	d009      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800720c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007210:	d004      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8007212:	f240 115f 	movw	r1, #351	@ 0x15f
 8007216:	4863      	ldr	r0, [pc, #396]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007218:	f7fb fc74 	bl	8002b04 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800721c:	4b62      	ldr	r3, [pc, #392]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007222:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800722a:	495f      	ldr	r1, [pc, #380]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800722c:	4313      	orrs	r3, r2
 800722e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d022      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007242:	2b00      	cmp	r3, #0
 8007244:	d013      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800724a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800724e:	d00e      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007254:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007258:	d009      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x946>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800725e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007262:	d004      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007264:	f240 1169 	movw	r1, #361	@ 0x169
 8007268:	484e      	ldr	r0, [pc, #312]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800726a:	f7fb fc4b 	bl	8002b04 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800726e:	4b4e      	ldr	r3, [pc, #312]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007274:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800727c:	494a      	ldr	r1, [pc, #296]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d018      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007294:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007298:	d008      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x984>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x984>
 80072a2:	f240 1173 	movw	r1, #371	@ 0x173
 80072a6:	483f      	ldr	r0, [pc, #252]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80072a8:	f7fb fc2c 	bl	8002b04 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072ac:	4b3e      	ldr	r3, [pc, #248]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80072ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072ba:	493b      	ldr	r1, [pc, #236]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d01f      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072d6:	d008      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d004      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80072e0:	f240 117d 	movw	r1, #381	@ 0x17d
 80072e4:	482f      	ldr	r0, [pc, #188]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80072e6:	f7fb fc0d 	bl	8002b04 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072ea:	4b2f      	ldr	r3, [pc, #188]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80072ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072f8:	492b      	ldr	r1, [pc, #172]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007308:	d101      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 800730a:	2301      	movs	r3, #1
 800730c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0308 	and.w	r3, r3, #8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 800731a:	2301      	movs	r3, #1
 800731c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d022      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732e:	2b00      	cmp	r3, #0
 8007330:	d013      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800733a:	d00e      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007340:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007344:	d009      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800734a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800734e:	d004      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8007350:	f240 1195 	movw	r1, #405	@ 0x195
 8007354:	4813      	ldr	r0, [pc, #76]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007356:	f7fb fbd5 	bl	8002b04 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800735a:	4b13      	ldr	r3, [pc, #76]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800735c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007360:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007368:	490f      	ldr	r1, [pc, #60]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800736a:	4313      	orrs	r3, r2
 800736c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d020      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007386:	d009      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007392:	f240 119f 	movw	r1, #415	@ 0x19f
 8007396:	4803      	ldr	r0, [pc, #12]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8007398:	f7fb fbb4 	bl	8002b04 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800739c:	4b02      	ldr	r3, [pc, #8]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a2:	e003      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
 80073a4:	0800c69c 	.word	0x0800c69c
 80073a8:	40023800 	.word	0x40023800
 80073ac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073b6:	4910      	ldr	r1, [pc, #64]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d006      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 8155 	beq.w	800767c <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073d2:	4b09      	ldr	r3, [pc, #36]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a08      	ldr	r2, [pc, #32]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80073d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073de:	f7fb ff6d 	bl	80032bc <HAL_GetTick>
 80073e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073e4:	e00a      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073e6:	f7fb ff69 	bl	80032bc <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b64      	cmp	r3, #100	@ 0x64
 80073f2:	d903      	bls.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e273      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80073f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073fc:	4b9a      	ldr	r3, [pc, #616]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1ee      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2b31      	cmp	r3, #49	@ 0x31
 800740e:	d904      	bls.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8007418:	d904      	bls.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800741a:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800741e:	4893      	ldr	r0, [pc, #588]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007420:	f7fb fb70 	bl	8002b04 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d02e      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007434:	2b00      	cmp	r3, #0
 8007436:	d12a      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d903      	bls.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b07      	cmp	r3, #7
 8007446:	d904      	bls.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007448:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800744c:	4887      	ldr	r0, [pc, #540]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800744e:	f7fb fb59 	bl	8002b04 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007452:	4b85      	ldr	r3, [pc, #532]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007458:	0c1b      	lsrs	r3, r3, #16
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007460:	4b81      	ldr	r3, [pc, #516]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007466:	0e1b      	lsrs	r3, r3, #24
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	019a      	lsls	r2, r3, #6
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	041b      	lsls	r3, r3, #16
 8007478:	431a      	orrs	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	061b      	lsls	r3, r3, #24
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	071b      	lsls	r3, r3, #28
 8007486:	4978      	ldr	r1, [pc, #480]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d004      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800749e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074a2:	d00a      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d048      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074b8:	d143      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d903      	bls.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	d904      	bls.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80074ca:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 80074ce:	4867      	ldr	r0, [pc, #412]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80074d0:	f7fb fb18 	bl	8002b04 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d904      	bls.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 80074e4:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 80074e8:	4860      	ldr	r0, [pc, #384]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80074ea:	f7fb fb0b 	bl	8002b04 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074ee:	4b5e      	ldr	r3, [pc, #376]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80074f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074f4:	0c1b      	lsrs	r3, r3, #16
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074fc:	4b5a      	ldr	r3, [pc, #360]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80074fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007502:	0f1b      	lsrs	r3, r3, #28
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	019a      	lsls	r2, r3, #6
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	041b      	lsls	r3, r3, #16
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	061b      	lsls	r3, r3, #24
 800751c:	431a      	orrs	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	071b      	lsls	r3, r3, #28
 8007522:	4951      	ldr	r1, [pc, #324]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800752a:	4b4f      	ldr	r3, [pc, #316]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800752c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007530:	f023 021f 	bic.w	r2, r3, #31
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	3b01      	subs	r3, #1
 800753a:	494b      	ldr	r1, [pc, #300]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d032      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d010      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d00c      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	2b02      	cmp	r3, #2
 8007564:	d008      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2b03      	cmp	r3, #3
 800756c:	d004      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800756e:	f240 2105 	movw	r1, #517	@ 0x205
 8007572:	483e      	ldr	r0, [pc, #248]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007574:	f7fb fac6 	bl	8002b04 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007578:	4b3b      	ldr	r3, [pc, #236]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800757a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800757e:	0e1b      	lsrs	r3, r3, #24
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007586:	4b38      	ldr	r3, [pc, #224]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007588:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800758c:	0f1b      	lsrs	r3, r3, #28
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	019a      	lsls	r2, r3, #6
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	431a      	orrs	r2, r3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	061b      	lsls	r3, r3, #24
 80075a6:	431a      	orrs	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	071b      	lsls	r3, r3, #28
 80075ac:	492e      	ldr	r1, [pc, #184]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d040      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d010      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d00c      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d008      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d004      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80075e0:	f44f 7105 	mov.w	r1, #532	@ 0x214
 80075e4:	4821      	ldr	r0, [pc, #132]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80075e6:	f7fb fa8d 	bl	8002b04 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d903      	bls.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2b07      	cmp	r3, #7
 80075f8:	d904      	bls.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80075fa:	f240 2115 	movw	r1, #533	@ 0x215
 80075fe:	481b      	ldr	r0, [pc, #108]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007600:	f7fb fa80 	bl	8002b04 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d903      	bls.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b0f      	cmp	r3, #15
 8007612:	d904      	bls.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8007614:	f240 2116 	movw	r1, #534	@ 0x216
 8007618:	4814      	ldr	r0, [pc, #80]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800761a:	f7fb fa73 	bl	8002b04 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	019a      	lsls	r2, r3, #6
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	041b      	lsls	r3, r3, #16
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	061b      	lsls	r3, r3, #24
 8007632:	431a      	orrs	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	071b      	lsls	r3, r3, #28
 800763a:	490b      	ldr	r1, [pc, #44]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800763c:	4313      	orrs	r3, r2
 800763e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007642:	4b09      	ldr	r3, [pc, #36]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a08      	ldr	r2, [pc, #32]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007648:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800764c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800764e:	f7fb fe35 	bl	80032bc <HAL_GetTick>
 8007652:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007654:	e00c      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007656:	f7fb fe31 	bl	80032bc <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b64      	cmp	r3, #100	@ 0x64
 8007662:	d905      	bls.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e13b      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8007668:	40023800 	.word	0x40023800
 800766c:	0800c69c 	.word	0x0800c69c
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007670:	4b9d      	ldr	r3, [pc, #628]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0ec      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	2b01      	cmp	r3, #1
 8007680:	f040 812d 	bne.w	80078de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007684:	4b98      	ldr	r3, [pc, #608]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a97      	ldr	r2, [pc, #604]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800768a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800768e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007690:	f7fb fe14 	bl	80032bc <HAL_GetTick>
 8007694:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007696:	e008      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007698:	f7fb fe10 	bl	80032bc <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b64      	cmp	r3, #100	@ 0x64
 80076a4:	d901      	bls.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e11a      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80076aa:	4b8f      	ldr	r3, [pc, #572]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076b6:	d0ef      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	2b31      	cmp	r3, #49	@ 0x31
 80076be:	d904      	bls.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 80076c8:	d904      	bls.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80076ca:	f44f 7111 	mov.w	r1, #580	@ 0x244
 80076ce:	4887      	ldr	r0, [pc, #540]	@ (80078ec <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80076d0:	f7fb fa18 	bl	8002b04 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d009      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d048      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d144      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d903      	bls.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b0f      	cmp	r3, #15
 800770a:	d904      	bls.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 800770c:	f240 214b 	movw	r1, #587	@ 0x24b
 8007710:	4876      	ldr	r0, [pc, #472]	@ (80078ec <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007712:	f7fb f9f7 	bl	8002b04 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007722:	2b20      	cmp	r3, #32
 8007724:	d904      	bls.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8007726:	f240 214d 	movw	r1, #589	@ 0x24d
 800772a:	4870      	ldr	r0, [pc, #448]	@ (80078ec <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800772c:	f7fb f9ea 	bl	8002b04 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007730:	4b6d      	ldr	r3, [pc, #436]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007736:	0c1b      	lsrs	r3, r3, #16
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800773e:	4b6a      	ldr	r3, [pc, #424]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007744:	0f1b      	lsrs	r3, r3, #28
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	019a      	lsls	r2, r3, #6
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	041b      	lsls	r3, r3, #16
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	061b      	lsls	r3, r3, #24
 800775e:	431a      	orrs	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	071b      	lsls	r3, r3, #28
 8007764:	4960      	ldr	r1, [pc, #384]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007766:	4313      	orrs	r3, r2
 8007768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800776c:	4b5e      	ldr	r3, [pc, #376]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800776e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007772:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777a:	3b01      	subs	r3, #1
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	495a      	ldr	r1, [pc, #360]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007780:	4313      	orrs	r3, r2
 8007782:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d037      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007796:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800779a:	d132      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a1b      	ldr	r3, [r3, #32]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d010      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d00c      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d008      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d004      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80077bc:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80077c0:	484a      	ldr	r0, [pc, #296]	@ (80078ec <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80077c2:	f7fb f99f 	bl	8002b04 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80077c6:	4b48      	ldr	r3, [pc, #288]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80077c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077cc:	0e1b      	lsrs	r3, r3, #24
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077d4:	4b44      	ldr	r3, [pc, #272]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80077d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077da:	0f1b      	lsrs	r3, r3, #28
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	019a      	lsls	r2, r3, #6
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	041b      	lsls	r3, r3, #16
 80077ee:	431a      	orrs	r2, r3
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	061b      	lsls	r3, r3, #24
 80077f4:	431a      	orrs	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	071b      	lsls	r3, r3, #28
 80077fa:	493b      	ldr	r1, [pc, #236]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0308 	and.w	r3, r3, #8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d04d      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d903      	bls.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	2b07      	cmp	r3, #7
 800781c:	d904      	bls.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 800781e:	f240 216f 	movw	r1, #623	@ 0x26f
 8007822:	4832      	ldr	r0, [pc, #200]	@ (80078ec <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007824:	f7fb f96e 	bl	8002b04 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d013      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007838:	d00e      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007842:	d009      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007848:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800784c:	d004      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800784e:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8007852:	4826      	ldr	r0, [pc, #152]	@ (80078ec <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007854:	f7fb f956 	bl	8002b04 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007858:	4b23      	ldr	r3, [pc, #140]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800785a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800785e:	0e1b      	lsrs	r3, r3, #24
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007866:	4b20      	ldr	r3, [pc, #128]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800786c:	0c1b      	lsrs	r3, r3, #16
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	019a      	lsls	r2, r3, #6
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	041b      	lsls	r3, r3, #16
 800787e:	431a      	orrs	r2, r3
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	061b      	lsls	r3, r3, #24
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	071b      	lsls	r3, r3, #28
 800788c:	4916      	ldr	r1, [pc, #88]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800788e:	4313      	orrs	r3, r2
 8007890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007894:	4b14      	ldr	r3, [pc, #80]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800789a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a2:	4911      	ldr	r1, [pc, #68]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80078aa:	4b0f      	ldr	r3, [pc, #60]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a0e      	ldr	r2, [pc, #56]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80078b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b6:	f7fb fd01 	bl	80032bc <HAL_GetTick>
 80078ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80078bc:	e008      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80078be:	f7fb fcfd 	bl	80032bc <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b64      	cmp	r3, #100	@ 0x64
 80078ca:	d901      	bls.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e007      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80078d0:	4b05      	ldr	r3, [pc, #20]	@ (80078e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078dc:	d1ef      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3720      	adds	r7, #32
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	40023800 	.word	0x40023800
 80078ec:	0800c69c 	.word	0x0800c69c

080078f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e1a8      	b.n	8007c56 <HAL_TIM_Encoder_Init+0x366>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a7f      	ldr	r2, [pc, #508]	@ (8007b08 <HAL_TIM_Encoder_Init+0x218>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d01d      	beq.n	800794a <HAL_TIM_Encoder_Init+0x5a>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007916:	d018      	beq.n	800794a <HAL_TIM_Encoder_Init+0x5a>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a7b      	ldr	r2, [pc, #492]	@ (8007b0c <HAL_TIM_Encoder_Init+0x21c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d013      	beq.n	800794a <HAL_TIM_Encoder_Init+0x5a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a7a      	ldr	r2, [pc, #488]	@ (8007b10 <HAL_TIM_Encoder_Init+0x220>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00e      	beq.n	800794a <HAL_TIM_Encoder_Init+0x5a>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a78      	ldr	r2, [pc, #480]	@ (8007b14 <HAL_TIM_Encoder_Init+0x224>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d009      	beq.n	800794a <HAL_TIM_Encoder_Init+0x5a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a77      	ldr	r2, [pc, #476]	@ (8007b18 <HAL_TIM_Encoder_Init+0x228>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d004      	beq.n	800794a <HAL_TIM_Encoder_Init+0x5a>
 8007940:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8007944:	4875      	ldr	r0, [pc, #468]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 8007946:	f7fb f8dd 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d014      	beq.n	800797c <HAL_TIM_Encoder_Init+0x8c>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	2b10      	cmp	r3, #16
 8007958:	d010      	beq.n	800797c <HAL_TIM_Encoder_Init+0x8c>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b20      	cmp	r3, #32
 8007960:	d00c      	beq.n	800797c <HAL_TIM_Encoder_Init+0x8c>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	2b40      	cmp	r3, #64	@ 0x40
 8007968:	d008      	beq.n	800797c <HAL_TIM_Encoder_Init+0x8c>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2b60      	cmp	r3, #96	@ 0x60
 8007970:	d004      	beq.n	800797c <HAL_TIM_Encoder_Init+0x8c>
 8007972:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8007976:	4869      	ldr	r0, [pc, #420]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 8007978:	f7fb f8c4 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00e      	beq.n	80079a2 <HAL_TIM_Encoder_Init+0xb2>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800798c:	d009      	beq.n	80079a2 <HAL_TIM_Encoder_Init+0xb2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007996:	d004      	beq.n	80079a2 <HAL_TIM_Encoder_Init+0xb2>
 8007998:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 800799c:	485f      	ldr	r0, [pc, #380]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 800799e:	f7fb f8b1 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d008      	beq.n	80079bc <HAL_TIM_Encoder_Init+0xcc>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	2b80      	cmp	r3, #128	@ 0x80
 80079b0:	d004      	beq.n	80079bc <HAL_TIM_Encoder_Init+0xcc>
 80079b2:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 80079b6:	4859      	ldr	r0, [pc, #356]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 80079b8:	f7fb f8a4 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d00c      	beq.n	80079de <HAL_TIM_Encoder_Init+0xee>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d008      	beq.n	80079de <HAL_TIM_Encoder_Init+0xee>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d004      	beq.n	80079de <HAL_TIM_Encoder_Init+0xee>
 80079d4:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 80079d8:	4850      	ldr	r0, [pc, #320]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 80079da:	f7fb f893 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d00c      	beq.n	8007a00 <HAL_TIM_Encoder_Init+0x110>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d008      	beq.n	8007a00 <HAL_TIM_Encoder_Init+0x110>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d004      	beq.n	8007a00 <HAL_TIM_Encoder_Init+0x110>
 80079f6:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 80079fa:	4848      	ldr	r0, [pc, #288]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 80079fc:	f7fb f882 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d00c      	beq.n	8007a22 <HAL_TIM_Encoder_Init+0x132>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d008      	beq.n	8007a22 <HAL_TIM_Encoder_Init+0x132>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d004      	beq.n	8007a22 <HAL_TIM_Encoder_Init+0x132>
 8007a18:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8007a1c:	483f      	ldr	r0, [pc, #252]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 8007a1e:	f7fb f871 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d008      	beq.n	8007a3c <HAL_TIM_Encoder_Init+0x14c>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d004      	beq.n	8007a3c <HAL_TIM_Encoder_Init+0x14c>
 8007a32:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8007a36:	4839      	ldr	r0, [pc, #228]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 8007a38:	f7fb f864 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d008      	beq.n	8007a56 <HAL_TIM_Encoder_Init+0x166>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d004      	beq.n	8007a56 <HAL_TIM_Encoder_Init+0x166>
 8007a4c:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 8007a50:	4832      	ldr	r0, [pc, #200]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 8007a52:	f7fb f857 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d010      	beq.n	8007a80 <HAL_TIM_Encoder_Init+0x190>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d00c      	beq.n	8007a80 <HAL_TIM_Encoder_Init+0x190>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	2b08      	cmp	r3, #8
 8007a6c:	d008      	beq.n	8007a80 <HAL_TIM_Encoder_Init+0x190>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	2b0c      	cmp	r3, #12
 8007a74:	d004      	beq.n	8007a80 <HAL_TIM_Encoder_Init+0x190>
 8007a76:	f640 31ec 	movw	r1, #3052	@ 0xbec
 8007a7a:	4828      	ldr	r0, [pc, #160]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 8007a7c:	f7fb f842 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d010      	beq.n	8007aaa <HAL_TIM_Encoder_Init+0x1ba>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d00c      	beq.n	8007aaa <HAL_TIM_Encoder_Init+0x1ba>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d008      	beq.n	8007aaa <HAL_TIM_Encoder_Init+0x1ba>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	2b0c      	cmp	r3, #12
 8007a9e:	d004      	beq.n	8007aaa <HAL_TIM_Encoder_Init+0x1ba>
 8007aa0:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8007aa4:	481d      	ldr	r0, [pc, #116]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 8007aa6:	f7fb f82d 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2b0f      	cmp	r3, #15
 8007ab0:	d904      	bls.n	8007abc <HAL_TIM_Encoder_Init+0x1cc>
 8007ab2:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8007ab6:	4819      	ldr	r0, [pc, #100]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 8007ab8:	f7fb f824 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	2b0f      	cmp	r3, #15
 8007ac2:	d904      	bls.n	8007ace <HAL_TIM_Encoder_Init+0x1de>
 8007ac4:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8007ac8:	4814      	ldr	r0, [pc, #80]	@ (8007b1c <HAL_TIM_Encoder_Init+0x22c>)
 8007aca:	f7fb f81b 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ad6:	d004      	beq.n	8007ae2 <HAL_TIM_Encoder_Init+0x1f2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a0d      	ldr	r2, [pc, #52]	@ (8007b14 <HAL_TIM_Encoder_Init+0x224>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d107      	bne.n	8007af2 <HAL_TIM_Encoder_Init+0x202>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	bf14      	ite	ne
 8007aea:	2301      	movne	r3, #1
 8007aec:	2300      	moveq	r3, #0
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	e01a      	b.n	8007b28 <HAL_TIM_Encoder_Init+0x238>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d012      	beq.n	8007b20 <HAL_TIM_Encoder_Init+0x230>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b02:	d20d      	bcs.n	8007b20 <HAL_TIM_Encoder_Init+0x230>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e00c      	b.n	8007b22 <HAL_TIM_Encoder_Init+0x232>
 8007b08:	40010000 	.word	0x40010000
 8007b0c:	40000400 	.word	0x40000400
 8007b10:	40000800 	.word	0x40000800
 8007b14:	40000c00 	.word	0x40000c00
 8007b18:	40010400 	.word	0x40010400
 8007b1c:	0800c6d8 	.word	0x0800c6d8
 8007b20:	2300      	movs	r3, #0
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d104      	bne.n	8007b36 <HAL_TIM_Encoder_Init+0x246>
 8007b2c:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8007b30:	484b      	ldr	r0, [pc, #300]	@ (8007c60 <HAL_TIM_Encoder_Init+0x370>)
 8007b32:	f7fa ffe7 	bl	8002b04 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fb f984 	bl	8002e58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6899      	ldr	r1, [r3, #8]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b40      	ldr	r3, [pc, #256]	@ (8007c64 <HAL_TIM_Encoder_Init+0x374>)
 8007b64:	400b      	ands	r3, r1
 8007b66:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f000 f93c 	bl	8007df0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4b32      	ldr	r3, [pc, #200]	@ (8007c68 <HAL_TIM_Encoder_Init+0x378>)
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	689a      	ldr	r2, [r3, #8]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	021b      	lsls	r3, r3, #8
 8007bac:	4313      	orrs	r3, r2
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8007c6c <HAL_TIM_Encoder_Init+0x37c>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8007c70 <HAL_TIM_Encoder_Init+0x380>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	011a      	lsls	r2, r3, #4
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	031b      	lsls	r3, r3, #12
 8007be2:	4313      	orrs	r3, r2
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007bf0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007bf8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	4313      	orrs	r3, r2
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	0800c6d8 	.word	0x0800c6d8
 8007c64:	fffebff8 	.word	0xfffebff8
 8007c68:	fffffcfc 	.word	0xfffffcfc
 8007c6c:	fffff3f3 	.word	0xfffff3f3
 8007c70:	ffff0f0f 	.word	0xffff0f0f

08007c74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a4d      	ldr	r2, [pc, #308]	@ (8007dd8 <HAL_TIM_Encoder_Start+0x164>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d01d      	beq.n	8007ce4 <HAL_TIM_Encoder_Start+0x70>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb0:	d018      	beq.n	8007ce4 <HAL_TIM_Encoder_Start+0x70>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a49      	ldr	r2, [pc, #292]	@ (8007ddc <HAL_TIM_Encoder_Start+0x168>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d013      	beq.n	8007ce4 <HAL_TIM_Encoder_Start+0x70>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a47      	ldr	r2, [pc, #284]	@ (8007de0 <HAL_TIM_Encoder_Start+0x16c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00e      	beq.n	8007ce4 <HAL_TIM_Encoder_Start+0x70>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a46      	ldr	r2, [pc, #280]	@ (8007de4 <HAL_TIM_Encoder_Start+0x170>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d009      	beq.n	8007ce4 <HAL_TIM_Encoder_Start+0x70>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a44      	ldr	r2, [pc, #272]	@ (8007de8 <HAL_TIM_Encoder_Start+0x174>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d004      	beq.n	8007ce4 <HAL_TIM_Encoder_Start+0x70>
 8007cda:	f640 41a1 	movw	r1, #3233	@ 0xca1
 8007cde:	4843      	ldr	r0, [pc, #268]	@ (8007dec <HAL_TIM_Encoder_Start+0x178>)
 8007ce0:	f7fa ff10 	bl	8002b04 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d110      	bne.n	8007d0c <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d102      	bne.n	8007cf6 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cf0:	7b7b      	ldrb	r3, [r7, #13]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d001      	beq.n	8007cfa <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e069      	b.n	8007dce <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2202      	movs	r2, #2
 8007d06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d0a:	e031      	b.n	8007d70 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	d110      	bne.n	8007d34 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d102      	bne.n	8007d1e <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d18:	7b3b      	ldrb	r3, [r7, #12]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d001      	beq.n	8007d22 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e055      	b.n	8007dce <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2202      	movs	r2, #2
 8007d26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d32:	e01d      	b.n	8007d70 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d108      	bne.n	8007d4c <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d105      	bne.n	8007d4c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d40:	7b7b      	ldrb	r3, [r7, #13]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d102      	bne.n	8007d4c <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d46:	7b3b      	ldrb	r3, [r7, #12]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d001      	beq.n	8007d50 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e03e      	b.n	8007dce <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_TIM_Encoder_Start+0x10a>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d008      	beq.n	8007d8e <HAL_TIM_Encoder_Start+0x11a>
 8007d7c:	e00f      	b.n	8007d9e <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2201      	movs	r2, #1
 8007d84:	2100      	movs	r1, #0
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f8d8 	bl	8007f3c <TIM_CCxChannelCmd>
      break;
 8007d8c:	e016      	b.n	8007dbc <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2201      	movs	r2, #1
 8007d94:	2104      	movs	r1, #4
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 f8d0 	bl	8007f3c <TIM_CCxChannelCmd>
      break;
 8007d9c:	e00e      	b.n	8007dbc <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2201      	movs	r2, #1
 8007da4:	2100      	movs	r1, #0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f8c8 	bl	8007f3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2201      	movs	r2, #1
 8007db2:	2104      	movs	r1, #4
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 f8c1 	bl	8007f3c <TIM_CCxChannelCmd>
      break;
 8007dba:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f042 0201 	orr.w	r2, r2, #1
 8007dca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	40010000 	.word	0x40010000
 8007ddc:	40000400 	.word	0x40000400
 8007de0:	40000800 	.word	0x40000800
 8007de4:	40000c00 	.word	0x40000c00
 8007de8:	40010400 	.word	0x40010400
 8007dec:	0800c6d8 	.word	0x0800c6d8

08007df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a43      	ldr	r2, [pc, #268]	@ (8007f10 <TIM_Base_SetConfig+0x120>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d013      	beq.n	8007e30 <TIM_Base_SetConfig+0x40>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e0e:	d00f      	beq.n	8007e30 <TIM_Base_SetConfig+0x40>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a40      	ldr	r2, [pc, #256]	@ (8007f14 <TIM_Base_SetConfig+0x124>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00b      	beq.n	8007e30 <TIM_Base_SetConfig+0x40>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8007f18 <TIM_Base_SetConfig+0x128>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d007      	beq.n	8007e30 <TIM_Base_SetConfig+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a3e      	ldr	r2, [pc, #248]	@ (8007f1c <TIM_Base_SetConfig+0x12c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <TIM_Base_SetConfig+0x40>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8007f20 <TIM_Base_SetConfig+0x130>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d108      	bne.n	8007e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a32      	ldr	r2, [pc, #200]	@ (8007f10 <TIM_Base_SetConfig+0x120>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d02b      	beq.n	8007ea2 <TIM_Base_SetConfig+0xb2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e50:	d027      	beq.n	8007ea2 <TIM_Base_SetConfig+0xb2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a2f      	ldr	r2, [pc, #188]	@ (8007f14 <TIM_Base_SetConfig+0x124>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d023      	beq.n	8007ea2 <TIM_Base_SetConfig+0xb2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8007f18 <TIM_Base_SetConfig+0x128>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d01f      	beq.n	8007ea2 <TIM_Base_SetConfig+0xb2>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a2d      	ldr	r2, [pc, #180]	@ (8007f1c <TIM_Base_SetConfig+0x12c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01b      	beq.n	8007ea2 <TIM_Base_SetConfig+0xb2>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8007f20 <TIM_Base_SetConfig+0x130>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d017      	beq.n	8007ea2 <TIM_Base_SetConfig+0xb2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a2b      	ldr	r2, [pc, #172]	@ (8007f24 <TIM_Base_SetConfig+0x134>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d013      	beq.n	8007ea2 <TIM_Base_SetConfig+0xb2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8007f28 <TIM_Base_SetConfig+0x138>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00f      	beq.n	8007ea2 <TIM_Base_SetConfig+0xb2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a29      	ldr	r2, [pc, #164]	@ (8007f2c <TIM_Base_SetConfig+0x13c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d00b      	beq.n	8007ea2 <TIM_Base_SetConfig+0xb2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a28      	ldr	r2, [pc, #160]	@ (8007f30 <TIM_Base_SetConfig+0x140>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d007      	beq.n	8007ea2 <TIM_Base_SetConfig+0xb2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a27      	ldr	r2, [pc, #156]	@ (8007f34 <TIM_Base_SetConfig+0x144>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d003      	beq.n	8007ea2 <TIM_Base_SetConfig+0xb2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a26      	ldr	r2, [pc, #152]	@ (8007f38 <TIM_Base_SetConfig+0x148>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d108      	bne.n	8007eb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8007f10 <TIM_Base_SetConfig+0x120>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d003      	beq.n	8007ee2 <TIM_Base_SetConfig+0xf2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a10      	ldr	r2, [pc, #64]	@ (8007f20 <TIM_Base_SetConfig+0x130>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d103      	bne.n	8007eea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	691a      	ldr	r2, [r3, #16]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f043 0204 	orr.w	r2, r3, #4
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	601a      	str	r2, [r3, #0]
}
 8007f02:	bf00      	nop
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40010000 	.word	0x40010000
 8007f14:	40000400 	.word	0x40000400
 8007f18:	40000800 	.word	0x40000800
 8007f1c:	40000c00 	.word	0x40000c00
 8007f20:	40010400 	.word	0x40010400
 8007f24:	40014000 	.word	0x40014000
 8007f28:	40014400 	.word	0x40014400
 8007f2c:	40014800 	.word	0x40014800
 8007f30:	40001800 	.word	0x40001800
 8007f34:	40001c00 	.word	0x40001c00
 8007f38:	40002000 	.word	0x40002000

08007f3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4a35      	ldr	r2, [pc, #212]	@ (8008020 <TIM_CCxChannelCmd+0xe4>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d030      	beq.n	8007fb2 <TIM_CCxChannelCmd+0x76>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f56:	d02c      	beq.n	8007fb2 <TIM_CCxChannelCmd+0x76>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4a32      	ldr	r2, [pc, #200]	@ (8008024 <TIM_CCxChannelCmd+0xe8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d028      	beq.n	8007fb2 <TIM_CCxChannelCmd+0x76>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4a31      	ldr	r2, [pc, #196]	@ (8008028 <TIM_CCxChannelCmd+0xec>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d024      	beq.n	8007fb2 <TIM_CCxChannelCmd+0x76>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4a30      	ldr	r2, [pc, #192]	@ (800802c <TIM_CCxChannelCmd+0xf0>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d020      	beq.n	8007fb2 <TIM_CCxChannelCmd+0x76>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a2f      	ldr	r2, [pc, #188]	@ (8008030 <TIM_CCxChannelCmd+0xf4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d01c      	beq.n	8007fb2 <TIM_CCxChannelCmd+0x76>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4a2e      	ldr	r2, [pc, #184]	@ (8008034 <TIM_CCxChannelCmd+0xf8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d018      	beq.n	8007fb2 <TIM_CCxChannelCmd+0x76>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a2d      	ldr	r2, [pc, #180]	@ (8008038 <TIM_CCxChannelCmd+0xfc>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d014      	beq.n	8007fb2 <TIM_CCxChannelCmd+0x76>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4a2c      	ldr	r2, [pc, #176]	@ (800803c <TIM_CCxChannelCmd+0x100>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d010      	beq.n	8007fb2 <TIM_CCxChannelCmd+0x76>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4a2b      	ldr	r2, [pc, #172]	@ (8008040 <TIM_CCxChannelCmd+0x104>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00c      	beq.n	8007fb2 <TIM_CCxChannelCmd+0x76>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8008044 <TIM_CCxChannelCmd+0x108>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d008      	beq.n	8007fb2 <TIM_CCxChannelCmd+0x76>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4a29      	ldr	r2, [pc, #164]	@ (8008048 <TIM_CCxChannelCmd+0x10c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d004      	beq.n	8007fb2 <TIM_CCxChannelCmd+0x76>
 8007fa8:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 8007fac:	4827      	ldr	r0, [pc, #156]	@ (800804c <TIM_CCxChannelCmd+0x110>)
 8007fae:	f7fa fda9 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d016      	beq.n	8007fe6 <TIM_CCxChannelCmd+0xaa>
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	d013      	beq.n	8007fe6 <TIM_CCxChannelCmd+0xaa>
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b08      	cmp	r3, #8
 8007fc2:	d010      	beq.n	8007fe6 <TIM_CCxChannelCmd+0xaa>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b0c      	cmp	r3, #12
 8007fc8:	d00d      	beq.n	8007fe6 <TIM_CCxChannelCmd+0xaa>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b10      	cmp	r3, #16
 8007fce:	d00a      	beq.n	8007fe6 <TIM_CCxChannelCmd+0xaa>
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b14      	cmp	r3, #20
 8007fd4:	d007      	beq.n	8007fe6 <TIM_CCxChannelCmd+0xaa>
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b3c      	cmp	r3, #60	@ 0x3c
 8007fda:	d004      	beq.n	8007fe6 <TIM_CCxChannelCmd+0xaa>
 8007fdc:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 8007fe0:	481a      	ldr	r0, [pc, #104]	@ (800804c <TIM_CCxChannelCmd+0x110>)
 8007fe2:	f7fa fd8f 	bl	8002b04 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f003 031f 	and.w	r3, r3, #31
 8007fec:	2201      	movs	r2, #1
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6a1a      	ldr	r2, [r3, #32]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	43db      	mvns	r3, r3
 8007ffc:	401a      	ands	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6a1a      	ldr	r2, [r3, #32]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	fa01 f303 	lsl.w	r3, r1, r3
 8008012:	431a      	orrs	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	621a      	str	r2, [r3, #32]
}
 8008018:	bf00      	nop
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	40010000 	.word	0x40010000
 8008024:	40000400 	.word	0x40000400
 8008028:	40000800 	.word	0x40000800
 800802c:	40000c00 	.word	0x40000c00
 8008030:	40010400 	.word	0x40010400
 8008034:	40014000 	.word	0x40014000
 8008038:	40014400 	.word	0x40014400
 800803c:	40014800 	.word	0x40014800
 8008040:	40001800 	.word	0x40001800
 8008044:	40001c00 	.word	0x40001c00
 8008048:	40002000 	.word	0x40002000
 800804c:	0800c6d8 	.word	0x0800c6d8

08008050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a32      	ldr	r2, [pc, #200]	@ (8008128 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d027      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800806c:	d022      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a2e      	ldr	r2, [pc, #184]	@ (800812c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d01d      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a2c      	ldr	r2, [pc, #176]	@ (8008130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d018      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a2b      	ldr	r2, [pc, #172]	@ (8008134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d013      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a29      	ldr	r2, [pc, #164]	@ (8008138 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00e      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a28      	ldr	r2, [pc, #160]	@ (800813c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d009      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a26      	ldr	r2, [pc, #152]	@ (8008140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d004      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80080aa:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 80080ae:	4825      	ldr	r0, [pc, #148]	@ (8008144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080b0:	f7fa fd28 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d020      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b10      	cmp	r3, #16
 80080c2:	d01c      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	d018      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b30      	cmp	r3, #48	@ 0x30
 80080d2:	d014      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b40      	cmp	r3, #64	@ 0x40
 80080da:	d010      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b50      	cmp	r3, #80	@ 0x50
 80080e2:	d00c      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b60      	cmp	r3, #96	@ 0x60
 80080ea:	d008      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b70      	cmp	r3, #112	@ 0x70
 80080f2:	d004      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080f4:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 80080f8:	4812      	ldr	r0, [pc, #72]	@ (8008144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080fa:	f7fa fd03 	bl	8002b04 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	2b80      	cmp	r3, #128	@ 0x80
 8008104:	d008      	beq.n	8008118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d004      	beq.n	8008118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800810e:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8008112:	480c      	ldr	r0, [pc, #48]	@ (8008144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008114:	f7fa fcf6 	bl	8002b04 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800811e:	2b01      	cmp	r3, #1
 8008120:	d112      	bne.n	8008148 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8008122:	2302      	movs	r3, #2
 8008124:	e0d7      	b.n	80082d6 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8008126:	bf00      	nop
 8008128:	40010000 	.word	0x40010000
 800812c:	40000400 	.word	0x40000400
 8008130:	40000800 	.word	0x40000800
 8008134:	40000c00 	.word	0x40000c00
 8008138:	40001000 	.word	0x40001000
 800813c:	40001400 	.word	0x40001400
 8008140:	40010400 	.word	0x40010400
 8008144:	0800c710 	.word	0x0800c710
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a5c      	ldr	r2, [pc, #368]	@ (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d004      	beq.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a5b      	ldr	r2, [pc, #364]	@ (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d161      	bne.n	8008240 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d054      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800818c:	d04f      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008196:	d04a      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081a0:	d045      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081aa:	d040      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80081b4:	d03b      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80081be:	d036      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80081c8:	d031      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 80081d2:	d02c      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081dc:	d027      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 80081e6:	d022      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80081f0:	d01d      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 80081fa:	d018      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008204:	d013      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800820e:	d00e      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8008218:	d009      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8008222:	d004      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008224:	f240 71bf 	movw	r1, #1983	@ 0x7bf
 8008228:	482f      	ldr	r0, [pc, #188]	@ (80082e8 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800822a:	f7fa fc6b 	bl	8002b04 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008234:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	4313      	orrs	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a20      	ldr	r2, [pc, #128]	@ (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d022      	beq.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800826c:	d01d      	beq.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a1e      	ldr	r2, [pc, #120]	@ (80082ec <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d018      	beq.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a1c      	ldr	r2, [pc, #112]	@ (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d013      	beq.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a1b      	ldr	r2, [pc, #108]	@ (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d00e      	beq.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a14      	ldr	r2, [pc, #80]	@ (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d009      	beq.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a17      	ldr	r2, [pc, #92]	@ (80082f8 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d004      	beq.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a15      	ldr	r2, [pc, #84]	@ (80082fc <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d10c      	bne.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40010400 	.word	0x40010400
 80082e8:	0800c710 	.word	0x0800c710
 80082ec:	40000400 	.word	0x40000400
 80082f0:	40000800 	.word	0x40000800
 80082f4:	40000c00 	.word	0x40000c00
 80082f8:	40014000 	.word	0x40014000
 80082fc:	40001800 	.word	0x40001800

08008300 <arm_biquad_cascade_df2T_f32>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	7807      	ldrb	r7, [r0, #0]
 8008306:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 800830a:	6885      	ldr	r5, [r0, #8]
 800830c:	3514      	adds	r5, #20
 800830e:	6846      	ldr	r6, [r0, #4]
 8008310:	3608      	adds	r6, #8
 8008312:	ea4f 1b8e 	mov.w	fp, lr, lsl #6
 8008316:	eb02 1a8e 	add.w	sl, r2, lr, lsl #6
 800831a:	f003 080f 	and.w	r8, r3, #15
 800831e:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8008322:	ed55 7a05 	vldr	s15, [r5, #-20]	@ 0xffffffec
 8008326:	ed15 7a04 	vldr	s14, [r5, #-16]
 800832a:	ed55 6a03 	vldr	s13, [r5, #-12]
 800832e:	ed15 6a02 	vldr	s12, [r5, #-8]
 8008332:	ed55 5a01 	vldr	s11, [r5, #-4]
 8008336:	46b4      	mov	ip, r6
 8008338:	ed56 3a02 	vldr	s7, [r6, #-8]
 800833c:	ed16 4a01 	vldr	s8, [r6, #-4]
 8008340:	f1be 0f00 	cmp.w	lr, #0
 8008344:	f000 8193 	beq.w	800866e <arm_biquad_cascade_df2T_f32+0x36e>
 8008348:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800834c:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8008350:	4674      	mov	r4, lr
 8008352:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 8008356:	ee27 5a83 	vmul.f32	s10, s15, s6
 800835a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800835e:	ee67 4a03 	vmul.f32	s9, s14, s6
 8008362:	ee34 4a84 	vadd.f32	s8, s9, s8
 8008366:	ee66 4a05 	vmul.f32	s9, s12, s10
 800836a:	ee34 4a84 	vadd.f32	s8, s9, s8
 800836e:	ee26 3a83 	vmul.f32	s6, s13, s6
 8008372:	ed03 5a10 	vstr	s10, [r3, #-64]	@ 0xffffffc0
 8008376:	ed50 3a0f 	vldr	s7, [r0, #-60]	@ 0xffffffc4
 800837a:	ee67 4aa3 	vmul.f32	s9, s15, s7
 800837e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008382:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008386:	ee35 5a03 	vadd.f32	s10, s10, s6
 800838a:	ee27 4a23 	vmul.f32	s8, s14, s7
 800838e:	ee35 5a04 	vadd.f32	s10, s10, s8
 8008392:	ee26 3a24 	vmul.f32	s6, s12, s9
 8008396:	ee33 3a05 	vadd.f32	s6, s6, s10
 800839a:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800839e:	ed43 4a0f 	vstr	s9, [r3, #-60]	@ 0xffffffc4
 80083a2:	ed10 4a0e 	vldr	s8, [r0, #-56]	@ 0xffffffc8
 80083a6:	ee27 5a84 	vmul.f32	s10, s15, s8
 80083aa:	ee35 5a03 	vadd.f32	s10, s10, s6
 80083ae:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80083b2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80083b6:	ee67 3a04 	vmul.f32	s7, s14, s8
 80083ba:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80083be:	ee26 3a05 	vmul.f32	s6, s12, s10
 80083c2:	ee33 3a24 	vadd.f32	s6, s6, s9
 80083c6:	ee66 3a84 	vmul.f32	s7, s13, s8
 80083ca:	ed03 5a0e 	vstr	s10, [r3, #-56]	@ 0xffffffc8
 80083ce:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 80083d2:	ee67 4a84 	vmul.f32	s9, s15, s8
 80083d6:	ee74 4a83 	vadd.f32	s9, s9, s6
 80083da:	ee25 5a85 	vmul.f32	s10, s11, s10
 80083de:	ee35 5a23 	vadd.f32	s10, s10, s7
 80083e2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80083e6:	ee35 5a23 	vadd.f32	s10, s10, s7
 80083ea:	ee26 3a24 	vmul.f32	s6, s12, s9
 80083ee:	ee33 3a05 	vadd.f32	s6, s6, s10
 80083f2:	ee66 3a84 	vmul.f32	s7, s13, s8
 80083f6:	ed43 4a0d 	vstr	s9, [r3, #-52]	@ 0xffffffcc
 80083fa:	ed10 4a0c 	vldr	s8, [r0, #-48]	@ 0xffffffd0
 80083fe:	ee27 5a84 	vmul.f32	s10, s15, s8
 8008402:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008406:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800840a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800840e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008412:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008416:	ee26 3a05 	vmul.f32	s6, s12, s10
 800841a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800841e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008422:	ed03 5a0c 	vstr	s10, [r3, #-48]	@ 0xffffffd0
 8008426:	ed10 4a0b 	vldr	s8, [r0, #-44]	@ 0xffffffd4
 800842a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800842e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8008432:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008436:	ee35 5a23 	vadd.f32	s10, s10, s7
 800843a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800843e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008442:	ee26 3a24 	vmul.f32	s6, s12, s9
 8008446:	ee33 3a05 	vadd.f32	s6, s6, s10
 800844a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800844e:	ed43 4a0b 	vstr	s9, [r3, #-44]	@ 0xffffffd4
 8008452:	ed10 4a0a 	vldr	s8, [r0, #-40]	@ 0xffffffd8
 8008456:	ee27 5a84 	vmul.f32	s10, s15, s8
 800845a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800845e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8008462:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008466:	ee67 3a04 	vmul.f32	s7, s14, s8
 800846a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800846e:	ee26 3a05 	vmul.f32	s6, s12, s10
 8008472:	ee33 3a24 	vadd.f32	s6, s6, s9
 8008476:	ee66 3a84 	vmul.f32	s7, s13, s8
 800847a:	ed03 5a0a 	vstr	s10, [r3, #-40]	@ 0xffffffd8
 800847e:	ed10 4a09 	vldr	s8, [r0, #-36]	@ 0xffffffdc
 8008482:	ee67 4a84 	vmul.f32	s9, s15, s8
 8008486:	ee74 4a83 	vadd.f32	s9, s9, s6
 800848a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800848e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008492:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008496:	ee35 5a23 	vadd.f32	s10, s10, s7
 800849a:	ee26 3a24 	vmul.f32	s6, s12, s9
 800849e:	ee33 3a05 	vadd.f32	s6, s6, s10
 80084a2:	ee66 3a84 	vmul.f32	s7, s13, s8
 80084a6:	ed43 4a09 	vstr	s9, [r3, #-36]	@ 0xffffffdc
 80084aa:	ed10 4a08 	vldr	s8, [r0, #-32]	@ 0xffffffe0
 80084ae:	ee27 5a84 	vmul.f32	s10, s15, s8
 80084b2:	ee35 5a03 	vadd.f32	s10, s10, s6
 80084b6:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80084ba:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80084be:	ee67 3a04 	vmul.f32	s7, s14, s8
 80084c2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80084c6:	ee26 3a05 	vmul.f32	s6, s12, s10
 80084ca:	ee33 3a24 	vadd.f32	s6, s6, s9
 80084ce:	ee66 3a84 	vmul.f32	s7, s13, s8
 80084d2:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 80084d6:	ed10 4a07 	vldr	s8, [r0, #-28]	@ 0xffffffe4
 80084da:	ee67 4a84 	vmul.f32	s9, s15, s8
 80084de:	ee74 4a83 	vadd.f32	s9, s9, s6
 80084e2:	ee25 5a85 	vmul.f32	s10, s11, s10
 80084e6:	ee35 5a23 	vadd.f32	s10, s10, s7
 80084ea:	ee67 3a04 	vmul.f32	s7, s14, s8
 80084ee:	ee35 5a23 	vadd.f32	s10, s10, s7
 80084f2:	ee26 3a24 	vmul.f32	s6, s12, s9
 80084f6:	ee33 3a05 	vadd.f32	s6, s6, s10
 80084fa:	ee66 3a84 	vmul.f32	s7, s13, s8
 80084fe:	ed43 4a07 	vstr	s9, [r3, #-28]	@ 0xffffffe4
 8008502:	ed10 4a06 	vldr	s8, [r0, #-24]	@ 0xffffffe8
 8008506:	ee27 5a84 	vmul.f32	s10, s15, s8
 800850a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800850e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8008512:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008516:	ee67 3a04 	vmul.f32	s7, s14, s8
 800851a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800851e:	ee26 3a05 	vmul.f32	s6, s12, s10
 8008522:	ee33 3a24 	vadd.f32	s6, s6, s9
 8008526:	ee66 3a84 	vmul.f32	s7, s13, s8
 800852a:	ed03 5a06 	vstr	s10, [r3, #-24]	@ 0xffffffe8
 800852e:	ed10 4a05 	vldr	s8, [r0, #-20]	@ 0xffffffec
 8008532:	ee67 4a84 	vmul.f32	s9, s15, s8
 8008536:	ee74 4a83 	vadd.f32	s9, s9, s6
 800853a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800853e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008542:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008546:	ee35 5a23 	vadd.f32	s10, s10, s7
 800854a:	ee26 3a24 	vmul.f32	s6, s12, s9
 800854e:	ee33 3a05 	vadd.f32	s6, s6, s10
 8008552:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008556:	ed43 4a05 	vstr	s9, [r3, #-20]	@ 0xffffffec
 800855a:	ed10 4a04 	vldr	s8, [r0, #-16]
 800855e:	ee27 5a84 	vmul.f32	s10, s15, s8
 8008562:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008566:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800856a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800856e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008572:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008576:	ee26 3a05 	vmul.f32	s6, s12, s10
 800857a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800857e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008582:	ed03 5a04 	vstr	s10, [r3, #-16]
 8008586:	ed10 4a03 	vldr	s8, [r0, #-12]
 800858a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800858e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8008592:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008596:	ee35 5a23 	vadd.f32	s10, s10, s7
 800859a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800859e:	ee35 5a23 	vadd.f32	s10, s10, s7
 80085a2:	ee26 3a24 	vmul.f32	s6, s12, s9
 80085a6:	ee33 3a05 	vadd.f32	s6, s6, s10
 80085aa:	ee66 3a84 	vmul.f32	s7, s13, s8
 80085ae:	ed43 4a03 	vstr	s9, [r3, #-12]
 80085b2:	ed10 4a02 	vldr	s8, [r0, #-8]
 80085b6:	ee27 5a84 	vmul.f32	s10, s15, s8
 80085ba:	ee35 5a03 	vadd.f32	s10, s10, s6
 80085be:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80085c2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80085c6:	ee67 3a04 	vmul.f32	s7, s14, s8
 80085ca:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80085ce:	ee26 3a05 	vmul.f32	s6, s12, s10
 80085d2:	ee33 3a24 	vadd.f32	s6, s6, s9
 80085d6:	ee66 3a84 	vmul.f32	s7, s13, s8
 80085da:	ed03 5a02 	vstr	s10, [r3, #-8]
 80085de:	ed10 4a01 	vldr	s8, [r0, #-4]
 80085e2:	ee67 4a84 	vmul.f32	s9, s15, s8
 80085e6:	ee74 4a83 	vadd.f32	s9, s9, s6
 80085ea:	ee25 5a85 	vmul.f32	s10, s11, s10
 80085ee:	ee35 5a23 	vadd.f32	s10, s10, s7
 80085f2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80085f6:	ee35 5a23 	vadd.f32	s10, s10, s7
 80085fa:	ee66 3a24 	vmul.f32	s7, s12, s9
 80085fe:	ee73 3a85 	vadd.f32	s7, s7, s10
 8008602:	ee26 5a84 	vmul.f32	s10, s13, s8
 8008606:	ee25 4aa4 	vmul.f32	s8, s11, s9
 800860a:	ee34 4a05 	vadd.f32	s8, s8, s10
 800860e:	ed43 4a01 	vstr	s9, [r3, #-4]
 8008612:	3040      	adds	r0, #64	@ 0x40
 8008614:	3340      	adds	r3, #64	@ 0x40
 8008616:	3c01      	subs	r4, #1
 8008618:	f47f ae9b 	bne.w	8008352 <arm_biquad_cascade_df2T_f32+0x52>
 800861c:	4459      	add	r1, fp
 800861e:	4653      	mov	r3, sl
 8008620:	f1b8 0f00 	cmp.w	r8, #0
 8008624:	d019      	beq.n	800865a <arm_biquad_cascade_df2T_f32+0x35a>
 8008626:	eb01 0009 	add.w	r0, r1, r9
 800862a:	ecf1 2a01 	vldmia	r1!, {s5}
 800862e:	ee27 3aa2 	vmul.f32	s6, s15, s5
 8008632:	ee33 3a23 	vadd.f32	s6, s6, s7
 8008636:	ee67 3a22 	vmul.f32	s7, s14, s5
 800863a:	ee33 4a84 	vadd.f32	s8, s7, s8
 800863e:	ee26 5a03 	vmul.f32	s10, s12, s6
 8008642:	ee75 3a04 	vadd.f32	s7, s10, s8
 8008646:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800864a:	ee25 4a83 	vmul.f32	s8, s11, s6
 800864e:	ee34 4a22 	vadd.f32	s8, s8, s5
 8008652:	eca3 3a01 	vstmia	r3!, {s6}
 8008656:	4281      	cmp	r1, r0
 8008658:	d1e7      	bne.n	800862a <arm_biquad_cascade_df2T_f32+0x32a>
 800865a:	ed4c 3a02 	vstr	s7, [ip, #-8]
 800865e:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8008662:	3514      	adds	r5, #20
 8008664:	3608      	adds	r6, #8
 8008666:	3f01      	subs	r7, #1
 8008668:	d003      	beq.n	8008672 <arm_biquad_cascade_df2T_f32+0x372>
 800866a:	4611      	mov	r1, r2
 800866c:	e659      	b.n	8008322 <arm_biquad_cascade_df2T_f32+0x22>
 800866e:	4613      	mov	r3, r2
 8008670:	e7d6      	b.n	8008620 <arm_biquad_cascade_df2T_f32+0x320>
 8008672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008676:	bf00      	nop

08008678 <arm_biquad_cascade_df2T_init_f32>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4615      	mov	r5, r2
 800867c:	460a      	mov	r2, r1
 800867e:	4604      	mov	r4, r0
 8008680:	2100      	movs	r1, #0
 8008682:	7002      	strb	r2, [r0, #0]
 8008684:	00d2      	lsls	r2, r2, #3
 8008686:	6085      	str	r5, [r0, #8]
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fd80 	bl	800918e <memset>
 800868e:	6060      	str	r0, [r4, #4]
 8008690:	bd38      	pop	{r3, r4, r5, pc}
 8008692:	bf00      	nop

08008694 <__cvt>:
 8008694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008698:	ec57 6b10 	vmov	r6, r7, d0
 800869c:	2f00      	cmp	r7, #0
 800869e:	460c      	mov	r4, r1
 80086a0:	4619      	mov	r1, r3
 80086a2:	463b      	mov	r3, r7
 80086a4:	bfbb      	ittet	lt
 80086a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80086aa:	461f      	movlt	r7, r3
 80086ac:	2300      	movge	r3, #0
 80086ae:	232d      	movlt	r3, #45	@ 0x2d
 80086b0:	700b      	strb	r3, [r1, #0]
 80086b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80086b8:	4691      	mov	r9, r2
 80086ba:	f023 0820 	bic.w	r8, r3, #32
 80086be:	bfbc      	itt	lt
 80086c0:	4632      	movlt	r2, r6
 80086c2:	4616      	movlt	r6, r2
 80086c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80086c8:	d005      	beq.n	80086d6 <__cvt+0x42>
 80086ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80086ce:	d100      	bne.n	80086d2 <__cvt+0x3e>
 80086d0:	3401      	adds	r4, #1
 80086d2:	2102      	movs	r1, #2
 80086d4:	e000      	b.n	80086d8 <__cvt+0x44>
 80086d6:	2103      	movs	r1, #3
 80086d8:	ab03      	add	r3, sp, #12
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	ab02      	add	r3, sp, #8
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	ec47 6b10 	vmov	d0, r6, r7
 80086e4:	4653      	mov	r3, sl
 80086e6:	4622      	mov	r2, r4
 80086e8:	f000 fe5a 	bl	80093a0 <_dtoa_r>
 80086ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80086f0:	4605      	mov	r5, r0
 80086f2:	d119      	bne.n	8008728 <__cvt+0x94>
 80086f4:	f019 0f01 	tst.w	r9, #1
 80086f8:	d00e      	beq.n	8008718 <__cvt+0x84>
 80086fa:	eb00 0904 	add.w	r9, r0, r4
 80086fe:	2200      	movs	r2, #0
 8008700:	2300      	movs	r3, #0
 8008702:	4630      	mov	r0, r6
 8008704:	4639      	mov	r1, r7
 8008706:	f7f8 f9ff 	bl	8000b08 <__aeabi_dcmpeq>
 800870a:	b108      	cbz	r0, 8008710 <__cvt+0x7c>
 800870c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008710:	2230      	movs	r2, #48	@ 0x30
 8008712:	9b03      	ldr	r3, [sp, #12]
 8008714:	454b      	cmp	r3, r9
 8008716:	d31e      	bcc.n	8008756 <__cvt+0xc2>
 8008718:	9b03      	ldr	r3, [sp, #12]
 800871a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800871c:	1b5b      	subs	r3, r3, r5
 800871e:	4628      	mov	r0, r5
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	b004      	add	sp, #16
 8008724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008728:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800872c:	eb00 0904 	add.w	r9, r0, r4
 8008730:	d1e5      	bne.n	80086fe <__cvt+0x6a>
 8008732:	7803      	ldrb	r3, [r0, #0]
 8008734:	2b30      	cmp	r3, #48	@ 0x30
 8008736:	d10a      	bne.n	800874e <__cvt+0xba>
 8008738:	2200      	movs	r2, #0
 800873a:	2300      	movs	r3, #0
 800873c:	4630      	mov	r0, r6
 800873e:	4639      	mov	r1, r7
 8008740:	f7f8 f9e2 	bl	8000b08 <__aeabi_dcmpeq>
 8008744:	b918      	cbnz	r0, 800874e <__cvt+0xba>
 8008746:	f1c4 0401 	rsb	r4, r4, #1
 800874a:	f8ca 4000 	str.w	r4, [sl]
 800874e:	f8da 3000 	ldr.w	r3, [sl]
 8008752:	4499      	add	r9, r3
 8008754:	e7d3      	b.n	80086fe <__cvt+0x6a>
 8008756:	1c59      	adds	r1, r3, #1
 8008758:	9103      	str	r1, [sp, #12]
 800875a:	701a      	strb	r2, [r3, #0]
 800875c:	e7d9      	b.n	8008712 <__cvt+0x7e>

0800875e <__exponent>:
 800875e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008760:	2900      	cmp	r1, #0
 8008762:	bfba      	itte	lt
 8008764:	4249      	neglt	r1, r1
 8008766:	232d      	movlt	r3, #45	@ 0x2d
 8008768:	232b      	movge	r3, #43	@ 0x2b
 800876a:	2909      	cmp	r1, #9
 800876c:	7002      	strb	r2, [r0, #0]
 800876e:	7043      	strb	r3, [r0, #1]
 8008770:	dd29      	ble.n	80087c6 <__exponent+0x68>
 8008772:	f10d 0307 	add.w	r3, sp, #7
 8008776:	461d      	mov	r5, r3
 8008778:	270a      	movs	r7, #10
 800877a:	461a      	mov	r2, r3
 800877c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008780:	fb07 1416 	mls	r4, r7, r6, r1
 8008784:	3430      	adds	r4, #48	@ 0x30
 8008786:	f802 4c01 	strb.w	r4, [r2, #-1]
 800878a:	460c      	mov	r4, r1
 800878c:	2c63      	cmp	r4, #99	@ 0x63
 800878e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008792:	4631      	mov	r1, r6
 8008794:	dcf1      	bgt.n	800877a <__exponent+0x1c>
 8008796:	3130      	adds	r1, #48	@ 0x30
 8008798:	1e94      	subs	r4, r2, #2
 800879a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800879e:	1c41      	adds	r1, r0, #1
 80087a0:	4623      	mov	r3, r4
 80087a2:	42ab      	cmp	r3, r5
 80087a4:	d30a      	bcc.n	80087bc <__exponent+0x5e>
 80087a6:	f10d 0309 	add.w	r3, sp, #9
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	42ac      	cmp	r4, r5
 80087ae:	bf88      	it	hi
 80087b0:	2300      	movhi	r3, #0
 80087b2:	3302      	adds	r3, #2
 80087b4:	4403      	add	r3, r0
 80087b6:	1a18      	subs	r0, r3, r0
 80087b8:	b003      	add	sp, #12
 80087ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80087c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80087c4:	e7ed      	b.n	80087a2 <__exponent+0x44>
 80087c6:	2330      	movs	r3, #48	@ 0x30
 80087c8:	3130      	adds	r1, #48	@ 0x30
 80087ca:	7083      	strb	r3, [r0, #2]
 80087cc:	70c1      	strb	r1, [r0, #3]
 80087ce:	1d03      	adds	r3, r0, #4
 80087d0:	e7f1      	b.n	80087b6 <__exponent+0x58>
	...

080087d4 <_printf_float>:
 80087d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d8:	b08d      	sub	sp, #52	@ 0x34
 80087da:	460c      	mov	r4, r1
 80087dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80087e0:	4616      	mov	r6, r2
 80087e2:	461f      	mov	r7, r3
 80087e4:	4605      	mov	r5, r0
 80087e6:	f000 fcdb 	bl	80091a0 <_localeconv_r>
 80087ea:	6803      	ldr	r3, [r0, #0]
 80087ec:	9304      	str	r3, [sp, #16]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7f7 fd5e 	bl	80002b0 <strlen>
 80087f4:	2300      	movs	r3, #0
 80087f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f8:	f8d8 3000 	ldr.w	r3, [r8]
 80087fc:	9005      	str	r0, [sp, #20]
 80087fe:	3307      	adds	r3, #7
 8008800:	f023 0307 	bic.w	r3, r3, #7
 8008804:	f103 0208 	add.w	r2, r3, #8
 8008808:	f894 a018 	ldrb.w	sl, [r4, #24]
 800880c:	f8d4 b000 	ldr.w	fp, [r4]
 8008810:	f8c8 2000 	str.w	r2, [r8]
 8008814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008818:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800881c:	9307      	str	r3, [sp, #28]
 800881e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008822:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800882a:	4b9c      	ldr	r3, [pc, #624]	@ (8008a9c <_printf_float+0x2c8>)
 800882c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008830:	f7f8 f99c 	bl	8000b6c <__aeabi_dcmpun>
 8008834:	bb70      	cbnz	r0, 8008894 <_printf_float+0xc0>
 8008836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800883a:	4b98      	ldr	r3, [pc, #608]	@ (8008a9c <_printf_float+0x2c8>)
 800883c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008840:	f7f8 f976 	bl	8000b30 <__aeabi_dcmple>
 8008844:	bb30      	cbnz	r0, 8008894 <_printf_float+0xc0>
 8008846:	2200      	movs	r2, #0
 8008848:	2300      	movs	r3, #0
 800884a:	4640      	mov	r0, r8
 800884c:	4649      	mov	r1, r9
 800884e:	f7f8 f965 	bl	8000b1c <__aeabi_dcmplt>
 8008852:	b110      	cbz	r0, 800885a <_printf_float+0x86>
 8008854:	232d      	movs	r3, #45	@ 0x2d
 8008856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800885a:	4a91      	ldr	r2, [pc, #580]	@ (8008aa0 <_printf_float+0x2cc>)
 800885c:	4b91      	ldr	r3, [pc, #580]	@ (8008aa4 <_printf_float+0x2d0>)
 800885e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008862:	bf8c      	ite	hi
 8008864:	4690      	movhi	r8, r2
 8008866:	4698      	movls	r8, r3
 8008868:	2303      	movs	r3, #3
 800886a:	6123      	str	r3, [r4, #16]
 800886c:	f02b 0304 	bic.w	r3, fp, #4
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	f04f 0900 	mov.w	r9, #0
 8008876:	9700      	str	r7, [sp, #0]
 8008878:	4633      	mov	r3, r6
 800887a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800887c:	4621      	mov	r1, r4
 800887e:	4628      	mov	r0, r5
 8008880:	f000 f9d2 	bl	8008c28 <_printf_common>
 8008884:	3001      	adds	r0, #1
 8008886:	f040 808d 	bne.w	80089a4 <_printf_float+0x1d0>
 800888a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800888e:	b00d      	add	sp, #52	@ 0x34
 8008890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008894:	4642      	mov	r2, r8
 8008896:	464b      	mov	r3, r9
 8008898:	4640      	mov	r0, r8
 800889a:	4649      	mov	r1, r9
 800889c:	f7f8 f966 	bl	8000b6c <__aeabi_dcmpun>
 80088a0:	b140      	cbz	r0, 80088b4 <_printf_float+0xe0>
 80088a2:	464b      	mov	r3, r9
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	bfbc      	itt	lt
 80088a8:	232d      	movlt	r3, #45	@ 0x2d
 80088aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80088ae:	4a7e      	ldr	r2, [pc, #504]	@ (8008aa8 <_printf_float+0x2d4>)
 80088b0:	4b7e      	ldr	r3, [pc, #504]	@ (8008aac <_printf_float+0x2d8>)
 80088b2:	e7d4      	b.n	800885e <_printf_float+0x8a>
 80088b4:	6863      	ldr	r3, [r4, #4]
 80088b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80088ba:	9206      	str	r2, [sp, #24]
 80088bc:	1c5a      	adds	r2, r3, #1
 80088be:	d13b      	bne.n	8008938 <_printf_float+0x164>
 80088c0:	2306      	movs	r3, #6
 80088c2:	6063      	str	r3, [r4, #4]
 80088c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80088c8:	2300      	movs	r3, #0
 80088ca:	6022      	str	r2, [r4, #0]
 80088cc:	9303      	str	r3, [sp, #12]
 80088ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80088d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80088d4:	ab09      	add	r3, sp, #36	@ 0x24
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	6861      	ldr	r1, [r4, #4]
 80088da:	ec49 8b10 	vmov	d0, r8, r9
 80088de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80088e2:	4628      	mov	r0, r5
 80088e4:	f7ff fed6 	bl	8008694 <__cvt>
 80088e8:	9b06      	ldr	r3, [sp, #24]
 80088ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80088ec:	2b47      	cmp	r3, #71	@ 0x47
 80088ee:	4680      	mov	r8, r0
 80088f0:	d129      	bne.n	8008946 <_printf_float+0x172>
 80088f2:	1cc8      	adds	r0, r1, #3
 80088f4:	db02      	blt.n	80088fc <_printf_float+0x128>
 80088f6:	6863      	ldr	r3, [r4, #4]
 80088f8:	4299      	cmp	r1, r3
 80088fa:	dd41      	ble.n	8008980 <_printf_float+0x1ac>
 80088fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8008900:	fa5f fa8a 	uxtb.w	sl, sl
 8008904:	3901      	subs	r1, #1
 8008906:	4652      	mov	r2, sl
 8008908:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800890c:	9109      	str	r1, [sp, #36]	@ 0x24
 800890e:	f7ff ff26 	bl	800875e <__exponent>
 8008912:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008914:	1813      	adds	r3, r2, r0
 8008916:	2a01      	cmp	r2, #1
 8008918:	4681      	mov	r9, r0
 800891a:	6123      	str	r3, [r4, #16]
 800891c:	dc02      	bgt.n	8008924 <_printf_float+0x150>
 800891e:	6822      	ldr	r2, [r4, #0]
 8008920:	07d2      	lsls	r2, r2, #31
 8008922:	d501      	bpl.n	8008928 <_printf_float+0x154>
 8008924:	3301      	adds	r3, #1
 8008926:	6123      	str	r3, [r4, #16]
 8008928:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0a2      	beq.n	8008876 <_printf_float+0xa2>
 8008930:	232d      	movs	r3, #45	@ 0x2d
 8008932:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008936:	e79e      	b.n	8008876 <_printf_float+0xa2>
 8008938:	9a06      	ldr	r2, [sp, #24]
 800893a:	2a47      	cmp	r2, #71	@ 0x47
 800893c:	d1c2      	bne.n	80088c4 <_printf_float+0xf0>
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1c0      	bne.n	80088c4 <_printf_float+0xf0>
 8008942:	2301      	movs	r3, #1
 8008944:	e7bd      	b.n	80088c2 <_printf_float+0xee>
 8008946:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800894a:	d9db      	bls.n	8008904 <_printf_float+0x130>
 800894c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008950:	d118      	bne.n	8008984 <_printf_float+0x1b0>
 8008952:	2900      	cmp	r1, #0
 8008954:	6863      	ldr	r3, [r4, #4]
 8008956:	dd0b      	ble.n	8008970 <_printf_float+0x19c>
 8008958:	6121      	str	r1, [r4, #16]
 800895a:	b913      	cbnz	r3, 8008962 <_printf_float+0x18e>
 800895c:	6822      	ldr	r2, [r4, #0]
 800895e:	07d0      	lsls	r0, r2, #31
 8008960:	d502      	bpl.n	8008968 <_printf_float+0x194>
 8008962:	3301      	adds	r3, #1
 8008964:	440b      	add	r3, r1
 8008966:	6123      	str	r3, [r4, #16]
 8008968:	65a1      	str	r1, [r4, #88]	@ 0x58
 800896a:	f04f 0900 	mov.w	r9, #0
 800896e:	e7db      	b.n	8008928 <_printf_float+0x154>
 8008970:	b913      	cbnz	r3, 8008978 <_printf_float+0x1a4>
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	07d2      	lsls	r2, r2, #31
 8008976:	d501      	bpl.n	800897c <_printf_float+0x1a8>
 8008978:	3302      	adds	r3, #2
 800897a:	e7f4      	b.n	8008966 <_printf_float+0x192>
 800897c:	2301      	movs	r3, #1
 800897e:	e7f2      	b.n	8008966 <_printf_float+0x192>
 8008980:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008986:	4299      	cmp	r1, r3
 8008988:	db05      	blt.n	8008996 <_printf_float+0x1c2>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	6121      	str	r1, [r4, #16]
 800898e:	07d8      	lsls	r0, r3, #31
 8008990:	d5ea      	bpl.n	8008968 <_printf_float+0x194>
 8008992:	1c4b      	adds	r3, r1, #1
 8008994:	e7e7      	b.n	8008966 <_printf_float+0x192>
 8008996:	2900      	cmp	r1, #0
 8008998:	bfd4      	ite	le
 800899a:	f1c1 0202 	rsble	r2, r1, #2
 800899e:	2201      	movgt	r2, #1
 80089a0:	4413      	add	r3, r2
 80089a2:	e7e0      	b.n	8008966 <_printf_float+0x192>
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	055a      	lsls	r2, r3, #21
 80089a8:	d407      	bmi.n	80089ba <_printf_float+0x1e6>
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	4642      	mov	r2, r8
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b8      	blx	r7
 80089b4:	3001      	adds	r0, #1
 80089b6:	d12b      	bne.n	8008a10 <_printf_float+0x23c>
 80089b8:	e767      	b.n	800888a <_printf_float+0xb6>
 80089ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80089be:	f240 80dd 	bls.w	8008b7c <_printf_float+0x3a8>
 80089c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80089c6:	2200      	movs	r2, #0
 80089c8:	2300      	movs	r3, #0
 80089ca:	f7f8 f89d 	bl	8000b08 <__aeabi_dcmpeq>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d033      	beq.n	8008a3a <_printf_float+0x266>
 80089d2:	4a37      	ldr	r2, [pc, #220]	@ (8008ab0 <_printf_float+0x2dc>)
 80089d4:	2301      	movs	r3, #1
 80089d6:	4631      	mov	r1, r6
 80089d8:	4628      	mov	r0, r5
 80089da:	47b8      	blx	r7
 80089dc:	3001      	adds	r0, #1
 80089de:	f43f af54 	beq.w	800888a <_printf_float+0xb6>
 80089e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80089e6:	4543      	cmp	r3, r8
 80089e8:	db02      	blt.n	80089f0 <_printf_float+0x21c>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	07d8      	lsls	r0, r3, #31
 80089ee:	d50f      	bpl.n	8008a10 <_printf_float+0x23c>
 80089f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f43f af45 	beq.w	800888a <_printf_float+0xb6>
 8008a00:	f04f 0900 	mov.w	r9, #0
 8008a04:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008a08:	f104 0a1a 	add.w	sl, r4, #26
 8008a0c:	45c8      	cmp	r8, r9
 8008a0e:	dc09      	bgt.n	8008a24 <_printf_float+0x250>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	079b      	lsls	r3, r3, #30
 8008a14:	f100 8103 	bmi.w	8008c1e <_printf_float+0x44a>
 8008a18:	68e0      	ldr	r0, [r4, #12]
 8008a1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a1c:	4298      	cmp	r0, r3
 8008a1e:	bfb8      	it	lt
 8008a20:	4618      	movlt	r0, r3
 8008a22:	e734      	b.n	800888e <_printf_float+0xba>
 8008a24:	2301      	movs	r3, #1
 8008a26:	4652      	mov	r2, sl
 8008a28:	4631      	mov	r1, r6
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	47b8      	blx	r7
 8008a2e:	3001      	adds	r0, #1
 8008a30:	f43f af2b 	beq.w	800888a <_printf_float+0xb6>
 8008a34:	f109 0901 	add.w	r9, r9, #1
 8008a38:	e7e8      	b.n	8008a0c <_printf_float+0x238>
 8008a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dc39      	bgt.n	8008ab4 <_printf_float+0x2e0>
 8008a40:	4a1b      	ldr	r2, [pc, #108]	@ (8008ab0 <_printf_float+0x2dc>)
 8008a42:	2301      	movs	r3, #1
 8008a44:	4631      	mov	r1, r6
 8008a46:	4628      	mov	r0, r5
 8008a48:	47b8      	blx	r7
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	f43f af1d 	beq.w	800888a <_printf_float+0xb6>
 8008a50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008a54:	ea59 0303 	orrs.w	r3, r9, r3
 8008a58:	d102      	bne.n	8008a60 <_printf_float+0x28c>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	07d9      	lsls	r1, r3, #31
 8008a5e:	d5d7      	bpl.n	8008a10 <_printf_float+0x23c>
 8008a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a64:	4631      	mov	r1, r6
 8008a66:	4628      	mov	r0, r5
 8008a68:	47b8      	blx	r7
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	f43f af0d 	beq.w	800888a <_printf_float+0xb6>
 8008a70:	f04f 0a00 	mov.w	sl, #0
 8008a74:	f104 0b1a 	add.w	fp, r4, #26
 8008a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a7a:	425b      	negs	r3, r3
 8008a7c:	4553      	cmp	r3, sl
 8008a7e:	dc01      	bgt.n	8008a84 <_printf_float+0x2b0>
 8008a80:	464b      	mov	r3, r9
 8008a82:	e793      	b.n	80089ac <_printf_float+0x1d8>
 8008a84:	2301      	movs	r3, #1
 8008a86:	465a      	mov	r2, fp
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	47b8      	blx	r7
 8008a8e:	3001      	adds	r0, #1
 8008a90:	f43f aefb 	beq.w	800888a <_printf_float+0xb6>
 8008a94:	f10a 0a01 	add.w	sl, sl, #1
 8008a98:	e7ee      	b.n	8008a78 <_printf_float+0x2a4>
 8008a9a:	bf00      	nop
 8008a9c:	7fefffff 	.word	0x7fefffff
 8008aa0:	0800c768 	.word	0x0800c768
 8008aa4:	0800c764 	.word	0x0800c764
 8008aa8:	0800c770 	.word	0x0800c770
 8008aac:	0800c76c 	.word	0x0800c76c
 8008ab0:	0800c774 	.word	0x0800c774
 8008ab4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ab6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008aba:	4553      	cmp	r3, sl
 8008abc:	bfa8      	it	ge
 8008abe:	4653      	movge	r3, sl
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	4699      	mov	r9, r3
 8008ac4:	dc36      	bgt.n	8008b34 <_printf_float+0x360>
 8008ac6:	f04f 0b00 	mov.w	fp, #0
 8008aca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ace:	f104 021a 	add.w	r2, r4, #26
 8008ad2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ad4:	9306      	str	r3, [sp, #24]
 8008ad6:	eba3 0309 	sub.w	r3, r3, r9
 8008ada:	455b      	cmp	r3, fp
 8008adc:	dc31      	bgt.n	8008b42 <_printf_float+0x36e>
 8008ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ae0:	459a      	cmp	sl, r3
 8008ae2:	dc3a      	bgt.n	8008b5a <_printf_float+0x386>
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	07da      	lsls	r2, r3, #31
 8008ae8:	d437      	bmi.n	8008b5a <_printf_float+0x386>
 8008aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aec:	ebaa 0903 	sub.w	r9, sl, r3
 8008af0:	9b06      	ldr	r3, [sp, #24]
 8008af2:	ebaa 0303 	sub.w	r3, sl, r3
 8008af6:	4599      	cmp	r9, r3
 8008af8:	bfa8      	it	ge
 8008afa:	4699      	movge	r9, r3
 8008afc:	f1b9 0f00 	cmp.w	r9, #0
 8008b00:	dc33      	bgt.n	8008b6a <_printf_float+0x396>
 8008b02:	f04f 0800 	mov.w	r8, #0
 8008b06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b0a:	f104 0b1a 	add.w	fp, r4, #26
 8008b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b10:	ebaa 0303 	sub.w	r3, sl, r3
 8008b14:	eba3 0309 	sub.w	r3, r3, r9
 8008b18:	4543      	cmp	r3, r8
 8008b1a:	f77f af79 	ble.w	8008a10 <_printf_float+0x23c>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	465a      	mov	r2, fp
 8008b22:	4631      	mov	r1, r6
 8008b24:	4628      	mov	r0, r5
 8008b26:	47b8      	blx	r7
 8008b28:	3001      	adds	r0, #1
 8008b2a:	f43f aeae 	beq.w	800888a <_printf_float+0xb6>
 8008b2e:	f108 0801 	add.w	r8, r8, #1
 8008b32:	e7ec      	b.n	8008b0e <_printf_float+0x33a>
 8008b34:	4642      	mov	r2, r8
 8008b36:	4631      	mov	r1, r6
 8008b38:	4628      	mov	r0, r5
 8008b3a:	47b8      	blx	r7
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	d1c2      	bne.n	8008ac6 <_printf_float+0x2f2>
 8008b40:	e6a3      	b.n	800888a <_printf_float+0xb6>
 8008b42:	2301      	movs	r3, #1
 8008b44:	4631      	mov	r1, r6
 8008b46:	4628      	mov	r0, r5
 8008b48:	9206      	str	r2, [sp, #24]
 8008b4a:	47b8      	blx	r7
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	f43f ae9c 	beq.w	800888a <_printf_float+0xb6>
 8008b52:	9a06      	ldr	r2, [sp, #24]
 8008b54:	f10b 0b01 	add.w	fp, fp, #1
 8008b58:	e7bb      	b.n	8008ad2 <_printf_float+0x2fe>
 8008b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4628      	mov	r0, r5
 8008b62:	47b8      	blx	r7
 8008b64:	3001      	adds	r0, #1
 8008b66:	d1c0      	bne.n	8008aea <_printf_float+0x316>
 8008b68:	e68f      	b.n	800888a <_printf_float+0xb6>
 8008b6a:	9a06      	ldr	r2, [sp, #24]
 8008b6c:	464b      	mov	r3, r9
 8008b6e:	4442      	add	r2, r8
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	d1c3      	bne.n	8008b02 <_printf_float+0x32e>
 8008b7a:	e686      	b.n	800888a <_printf_float+0xb6>
 8008b7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b80:	f1ba 0f01 	cmp.w	sl, #1
 8008b84:	dc01      	bgt.n	8008b8a <_printf_float+0x3b6>
 8008b86:	07db      	lsls	r3, r3, #31
 8008b88:	d536      	bpl.n	8008bf8 <_printf_float+0x424>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4642      	mov	r2, r8
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b8      	blx	r7
 8008b94:	3001      	adds	r0, #1
 8008b96:	f43f ae78 	beq.w	800888a <_printf_float+0xb6>
 8008b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b8      	blx	r7
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	f43f ae70 	beq.w	800888a <_printf_float+0xb6>
 8008baa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008bb6:	f7f7 ffa7 	bl	8000b08 <__aeabi_dcmpeq>
 8008bba:	b9c0      	cbnz	r0, 8008bee <_printf_float+0x41a>
 8008bbc:	4653      	mov	r3, sl
 8008bbe:	f108 0201 	add.w	r2, r8, #1
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b8      	blx	r7
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d10c      	bne.n	8008be6 <_printf_float+0x412>
 8008bcc:	e65d      	b.n	800888a <_printf_float+0xb6>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	465a      	mov	r2, fp
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	47b8      	blx	r7
 8008bd8:	3001      	adds	r0, #1
 8008bda:	f43f ae56 	beq.w	800888a <_printf_float+0xb6>
 8008bde:	f108 0801 	add.w	r8, r8, #1
 8008be2:	45d0      	cmp	r8, sl
 8008be4:	dbf3      	blt.n	8008bce <_printf_float+0x3fa>
 8008be6:	464b      	mov	r3, r9
 8008be8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008bec:	e6df      	b.n	80089ae <_printf_float+0x1da>
 8008bee:	f04f 0800 	mov.w	r8, #0
 8008bf2:	f104 0b1a 	add.w	fp, r4, #26
 8008bf6:	e7f4      	b.n	8008be2 <_printf_float+0x40e>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	4642      	mov	r2, r8
 8008bfc:	e7e1      	b.n	8008bc2 <_printf_float+0x3ee>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	464a      	mov	r2, r9
 8008c02:	4631      	mov	r1, r6
 8008c04:	4628      	mov	r0, r5
 8008c06:	47b8      	blx	r7
 8008c08:	3001      	adds	r0, #1
 8008c0a:	f43f ae3e 	beq.w	800888a <_printf_float+0xb6>
 8008c0e:	f108 0801 	add.w	r8, r8, #1
 8008c12:	68e3      	ldr	r3, [r4, #12]
 8008c14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c16:	1a5b      	subs	r3, r3, r1
 8008c18:	4543      	cmp	r3, r8
 8008c1a:	dcf0      	bgt.n	8008bfe <_printf_float+0x42a>
 8008c1c:	e6fc      	b.n	8008a18 <_printf_float+0x244>
 8008c1e:	f04f 0800 	mov.w	r8, #0
 8008c22:	f104 0919 	add.w	r9, r4, #25
 8008c26:	e7f4      	b.n	8008c12 <_printf_float+0x43e>

08008c28 <_printf_common>:
 8008c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c2c:	4616      	mov	r6, r2
 8008c2e:	4698      	mov	r8, r3
 8008c30:	688a      	ldr	r2, [r1, #8]
 8008c32:	690b      	ldr	r3, [r1, #16]
 8008c34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	bfb8      	it	lt
 8008c3c:	4613      	movlt	r3, r2
 8008c3e:	6033      	str	r3, [r6, #0]
 8008c40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c44:	4607      	mov	r7, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	b10a      	cbz	r2, 8008c4e <_printf_common+0x26>
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	6033      	str	r3, [r6, #0]
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	0699      	lsls	r1, r3, #26
 8008c52:	bf42      	ittt	mi
 8008c54:	6833      	ldrmi	r3, [r6, #0]
 8008c56:	3302      	addmi	r3, #2
 8008c58:	6033      	strmi	r3, [r6, #0]
 8008c5a:	6825      	ldr	r5, [r4, #0]
 8008c5c:	f015 0506 	ands.w	r5, r5, #6
 8008c60:	d106      	bne.n	8008c70 <_printf_common+0x48>
 8008c62:	f104 0a19 	add.w	sl, r4, #25
 8008c66:	68e3      	ldr	r3, [r4, #12]
 8008c68:	6832      	ldr	r2, [r6, #0]
 8008c6a:	1a9b      	subs	r3, r3, r2
 8008c6c:	42ab      	cmp	r3, r5
 8008c6e:	dc26      	bgt.n	8008cbe <_printf_common+0x96>
 8008c70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c74:	6822      	ldr	r2, [r4, #0]
 8008c76:	3b00      	subs	r3, #0
 8008c78:	bf18      	it	ne
 8008c7a:	2301      	movne	r3, #1
 8008c7c:	0692      	lsls	r2, r2, #26
 8008c7e:	d42b      	bmi.n	8008cd8 <_printf_common+0xb0>
 8008c80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c84:	4641      	mov	r1, r8
 8008c86:	4638      	mov	r0, r7
 8008c88:	47c8      	blx	r9
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	d01e      	beq.n	8008ccc <_printf_common+0xa4>
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	6922      	ldr	r2, [r4, #16]
 8008c92:	f003 0306 	and.w	r3, r3, #6
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	bf02      	ittt	eq
 8008c9a:	68e5      	ldreq	r5, [r4, #12]
 8008c9c:	6833      	ldreq	r3, [r6, #0]
 8008c9e:	1aed      	subeq	r5, r5, r3
 8008ca0:	68a3      	ldr	r3, [r4, #8]
 8008ca2:	bf0c      	ite	eq
 8008ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ca8:	2500      	movne	r5, #0
 8008caa:	4293      	cmp	r3, r2
 8008cac:	bfc4      	itt	gt
 8008cae:	1a9b      	subgt	r3, r3, r2
 8008cb0:	18ed      	addgt	r5, r5, r3
 8008cb2:	2600      	movs	r6, #0
 8008cb4:	341a      	adds	r4, #26
 8008cb6:	42b5      	cmp	r5, r6
 8008cb8:	d11a      	bne.n	8008cf0 <_printf_common+0xc8>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	e008      	b.n	8008cd0 <_printf_common+0xa8>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	4652      	mov	r2, sl
 8008cc2:	4641      	mov	r1, r8
 8008cc4:	4638      	mov	r0, r7
 8008cc6:	47c8      	blx	r9
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d103      	bne.n	8008cd4 <_printf_common+0xac>
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd4:	3501      	adds	r5, #1
 8008cd6:	e7c6      	b.n	8008c66 <_printf_common+0x3e>
 8008cd8:	18e1      	adds	r1, r4, r3
 8008cda:	1c5a      	adds	r2, r3, #1
 8008cdc:	2030      	movs	r0, #48	@ 0x30
 8008cde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ce2:	4422      	add	r2, r4
 8008ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ce8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008cec:	3302      	adds	r3, #2
 8008cee:	e7c7      	b.n	8008c80 <_printf_common+0x58>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	4641      	mov	r1, r8
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	47c8      	blx	r9
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	d0e6      	beq.n	8008ccc <_printf_common+0xa4>
 8008cfe:	3601      	adds	r6, #1
 8008d00:	e7d9      	b.n	8008cb6 <_printf_common+0x8e>
	...

08008d04 <_printf_i>:
 8008d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d08:	7e0f      	ldrb	r7, [r1, #24]
 8008d0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d0c:	2f78      	cmp	r7, #120	@ 0x78
 8008d0e:	4691      	mov	r9, r2
 8008d10:	4680      	mov	r8, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	469a      	mov	sl, r3
 8008d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d1a:	d807      	bhi.n	8008d2c <_printf_i+0x28>
 8008d1c:	2f62      	cmp	r7, #98	@ 0x62
 8008d1e:	d80a      	bhi.n	8008d36 <_printf_i+0x32>
 8008d20:	2f00      	cmp	r7, #0
 8008d22:	f000 80d1 	beq.w	8008ec8 <_printf_i+0x1c4>
 8008d26:	2f58      	cmp	r7, #88	@ 0x58
 8008d28:	f000 80b8 	beq.w	8008e9c <_printf_i+0x198>
 8008d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d34:	e03a      	b.n	8008dac <_printf_i+0xa8>
 8008d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d3a:	2b15      	cmp	r3, #21
 8008d3c:	d8f6      	bhi.n	8008d2c <_printf_i+0x28>
 8008d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8008d44 <_printf_i+0x40>)
 8008d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d44:	08008d9d 	.word	0x08008d9d
 8008d48:	08008db1 	.word	0x08008db1
 8008d4c:	08008d2d 	.word	0x08008d2d
 8008d50:	08008d2d 	.word	0x08008d2d
 8008d54:	08008d2d 	.word	0x08008d2d
 8008d58:	08008d2d 	.word	0x08008d2d
 8008d5c:	08008db1 	.word	0x08008db1
 8008d60:	08008d2d 	.word	0x08008d2d
 8008d64:	08008d2d 	.word	0x08008d2d
 8008d68:	08008d2d 	.word	0x08008d2d
 8008d6c:	08008d2d 	.word	0x08008d2d
 8008d70:	08008eaf 	.word	0x08008eaf
 8008d74:	08008ddb 	.word	0x08008ddb
 8008d78:	08008e69 	.word	0x08008e69
 8008d7c:	08008d2d 	.word	0x08008d2d
 8008d80:	08008d2d 	.word	0x08008d2d
 8008d84:	08008ed1 	.word	0x08008ed1
 8008d88:	08008d2d 	.word	0x08008d2d
 8008d8c:	08008ddb 	.word	0x08008ddb
 8008d90:	08008d2d 	.word	0x08008d2d
 8008d94:	08008d2d 	.word	0x08008d2d
 8008d98:	08008e71 	.word	0x08008e71
 8008d9c:	6833      	ldr	r3, [r6, #0]
 8008d9e:	1d1a      	adds	r2, r3, #4
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6032      	str	r2, [r6, #0]
 8008da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008dac:	2301      	movs	r3, #1
 8008dae:	e09c      	b.n	8008eea <_printf_i+0x1e6>
 8008db0:	6833      	ldr	r3, [r6, #0]
 8008db2:	6820      	ldr	r0, [r4, #0]
 8008db4:	1d19      	adds	r1, r3, #4
 8008db6:	6031      	str	r1, [r6, #0]
 8008db8:	0606      	lsls	r6, r0, #24
 8008dba:	d501      	bpl.n	8008dc0 <_printf_i+0xbc>
 8008dbc:	681d      	ldr	r5, [r3, #0]
 8008dbe:	e003      	b.n	8008dc8 <_printf_i+0xc4>
 8008dc0:	0645      	lsls	r5, r0, #25
 8008dc2:	d5fb      	bpl.n	8008dbc <_printf_i+0xb8>
 8008dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	da03      	bge.n	8008dd4 <_printf_i+0xd0>
 8008dcc:	232d      	movs	r3, #45	@ 0x2d
 8008dce:	426d      	negs	r5, r5
 8008dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dd4:	4858      	ldr	r0, [pc, #352]	@ (8008f38 <_printf_i+0x234>)
 8008dd6:	230a      	movs	r3, #10
 8008dd8:	e011      	b.n	8008dfe <_printf_i+0xfa>
 8008dda:	6821      	ldr	r1, [r4, #0]
 8008ddc:	6833      	ldr	r3, [r6, #0]
 8008dde:	0608      	lsls	r0, r1, #24
 8008de0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008de4:	d402      	bmi.n	8008dec <_printf_i+0xe8>
 8008de6:	0649      	lsls	r1, r1, #25
 8008de8:	bf48      	it	mi
 8008dea:	b2ad      	uxthmi	r5, r5
 8008dec:	2f6f      	cmp	r7, #111	@ 0x6f
 8008dee:	4852      	ldr	r0, [pc, #328]	@ (8008f38 <_printf_i+0x234>)
 8008df0:	6033      	str	r3, [r6, #0]
 8008df2:	bf14      	ite	ne
 8008df4:	230a      	movne	r3, #10
 8008df6:	2308      	moveq	r3, #8
 8008df8:	2100      	movs	r1, #0
 8008dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008dfe:	6866      	ldr	r6, [r4, #4]
 8008e00:	60a6      	str	r6, [r4, #8]
 8008e02:	2e00      	cmp	r6, #0
 8008e04:	db05      	blt.n	8008e12 <_printf_i+0x10e>
 8008e06:	6821      	ldr	r1, [r4, #0]
 8008e08:	432e      	orrs	r6, r5
 8008e0a:	f021 0104 	bic.w	r1, r1, #4
 8008e0e:	6021      	str	r1, [r4, #0]
 8008e10:	d04b      	beq.n	8008eaa <_printf_i+0x1a6>
 8008e12:	4616      	mov	r6, r2
 8008e14:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e18:	fb03 5711 	mls	r7, r3, r1, r5
 8008e1c:	5dc7      	ldrb	r7, [r0, r7]
 8008e1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e22:	462f      	mov	r7, r5
 8008e24:	42bb      	cmp	r3, r7
 8008e26:	460d      	mov	r5, r1
 8008e28:	d9f4      	bls.n	8008e14 <_printf_i+0x110>
 8008e2a:	2b08      	cmp	r3, #8
 8008e2c:	d10b      	bne.n	8008e46 <_printf_i+0x142>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	07df      	lsls	r7, r3, #31
 8008e32:	d508      	bpl.n	8008e46 <_printf_i+0x142>
 8008e34:	6923      	ldr	r3, [r4, #16]
 8008e36:	6861      	ldr	r1, [r4, #4]
 8008e38:	4299      	cmp	r1, r3
 8008e3a:	bfde      	ittt	le
 8008e3c:	2330      	movle	r3, #48	@ 0x30
 8008e3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e42:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008e46:	1b92      	subs	r2, r2, r6
 8008e48:	6122      	str	r2, [r4, #16]
 8008e4a:	f8cd a000 	str.w	sl, [sp]
 8008e4e:	464b      	mov	r3, r9
 8008e50:	aa03      	add	r2, sp, #12
 8008e52:	4621      	mov	r1, r4
 8008e54:	4640      	mov	r0, r8
 8008e56:	f7ff fee7 	bl	8008c28 <_printf_common>
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	d14a      	bne.n	8008ef4 <_printf_i+0x1f0>
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e62:	b004      	add	sp, #16
 8008e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	f043 0320 	orr.w	r3, r3, #32
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	4832      	ldr	r0, [pc, #200]	@ (8008f3c <_printf_i+0x238>)
 8008e72:	2778      	movs	r7, #120	@ 0x78
 8008e74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	6831      	ldr	r1, [r6, #0]
 8008e7c:	061f      	lsls	r7, r3, #24
 8008e7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e82:	d402      	bmi.n	8008e8a <_printf_i+0x186>
 8008e84:	065f      	lsls	r7, r3, #25
 8008e86:	bf48      	it	mi
 8008e88:	b2ad      	uxthmi	r5, r5
 8008e8a:	6031      	str	r1, [r6, #0]
 8008e8c:	07d9      	lsls	r1, r3, #31
 8008e8e:	bf44      	itt	mi
 8008e90:	f043 0320 	orrmi.w	r3, r3, #32
 8008e94:	6023      	strmi	r3, [r4, #0]
 8008e96:	b11d      	cbz	r5, 8008ea0 <_printf_i+0x19c>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	e7ad      	b.n	8008df8 <_printf_i+0xf4>
 8008e9c:	4826      	ldr	r0, [pc, #152]	@ (8008f38 <_printf_i+0x234>)
 8008e9e:	e7e9      	b.n	8008e74 <_printf_i+0x170>
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	f023 0320 	bic.w	r3, r3, #32
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	e7f6      	b.n	8008e98 <_printf_i+0x194>
 8008eaa:	4616      	mov	r6, r2
 8008eac:	e7bd      	b.n	8008e2a <_printf_i+0x126>
 8008eae:	6833      	ldr	r3, [r6, #0]
 8008eb0:	6825      	ldr	r5, [r4, #0]
 8008eb2:	6961      	ldr	r1, [r4, #20]
 8008eb4:	1d18      	adds	r0, r3, #4
 8008eb6:	6030      	str	r0, [r6, #0]
 8008eb8:	062e      	lsls	r6, r5, #24
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	d501      	bpl.n	8008ec2 <_printf_i+0x1be>
 8008ebe:	6019      	str	r1, [r3, #0]
 8008ec0:	e002      	b.n	8008ec8 <_printf_i+0x1c4>
 8008ec2:	0668      	lsls	r0, r5, #25
 8008ec4:	d5fb      	bpl.n	8008ebe <_printf_i+0x1ba>
 8008ec6:	8019      	strh	r1, [r3, #0]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	6123      	str	r3, [r4, #16]
 8008ecc:	4616      	mov	r6, r2
 8008ece:	e7bc      	b.n	8008e4a <_printf_i+0x146>
 8008ed0:	6833      	ldr	r3, [r6, #0]
 8008ed2:	1d1a      	adds	r2, r3, #4
 8008ed4:	6032      	str	r2, [r6, #0]
 8008ed6:	681e      	ldr	r6, [r3, #0]
 8008ed8:	6862      	ldr	r2, [r4, #4]
 8008eda:	2100      	movs	r1, #0
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7f7 f997 	bl	8000210 <memchr>
 8008ee2:	b108      	cbz	r0, 8008ee8 <_printf_i+0x1e4>
 8008ee4:	1b80      	subs	r0, r0, r6
 8008ee6:	6060      	str	r0, [r4, #4]
 8008ee8:	6863      	ldr	r3, [r4, #4]
 8008eea:	6123      	str	r3, [r4, #16]
 8008eec:	2300      	movs	r3, #0
 8008eee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ef2:	e7aa      	b.n	8008e4a <_printf_i+0x146>
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	4632      	mov	r2, r6
 8008ef8:	4649      	mov	r1, r9
 8008efa:	4640      	mov	r0, r8
 8008efc:	47d0      	blx	sl
 8008efe:	3001      	adds	r0, #1
 8008f00:	d0ad      	beq.n	8008e5e <_printf_i+0x15a>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	079b      	lsls	r3, r3, #30
 8008f06:	d413      	bmi.n	8008f30 <_printf_i+0x22c>
 8008f08:	68e0      	ldr	r0, [r4, #12]
 8008f0a:	9b03      	ldr	r3, [sp, #12]
 8008f0c:	4298      	cmp	r0, r3
 8008f0e:	bfb8      	it	lt
 8008f10:	4618      	movlt	r0, r3
 8008f12:	e7a6      	b.n	8008e62 <_printf_i+0x15e>
 8008f14:	2301      	movs	r3, #1
 8008f16:	4632      	mov	r2, r6
 8008f18:	4649      	mov	r1, r9
 8008f1a:	4640      	mov	r0, r8
 8008f1c:	47d0      	blx	sl
 8008f1e:	3001      	adds	r0, #1
 8008f20:	d09d      	beq.n	8008e5e <_printf_i+0x15a>
 8008f22:	3501      	adds	r5, #1
 8008f24:	68e3      	ldr	r3, [r4, #12]
 8008f26:	9903      	ldr	r1, [sp, #12]
 8008f28:	1a5b      	subs	r3, r3, r1
 8008f2a:	42ab      	cmp	r3, r5
 8008f2c:	dcf2      	bgt.n	8008f14 <_printf_i+0x210>
 8008f2e:	e7eb      	b.n	8008f08 <_printf_i+0x204>
 8008f30:	2500      	movs	r5, #0
 8008f32:	f104 0619 	add.w	r6, r4, #25
 8008f36:	e7f5      	b.n	8008f24 <_printf_i+0x220>
 8008f38:	0800c776 	.word	0x0800c776
 8008f3c:	0800c787 	.word	0x0800c787

08008f40 <std>:
 8008f40:	2300      	movs	r3, #0
 8008f42:	b510      	push	{r4, lr}
 8008f44:	4604      	mov	r4, r0
 8008f46:	e9c0 3300 	strd	r3, r3, [r0]
 8008f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f4e:	6083      	str	r3, [r0, #8]
 8008f50:	8181      	strh	r1, [r0, #12]
 8008f52:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f54:	81c2      	strh	r2, [r0, #14]
 8008f56:	6183      	str	r3, [r0, #24]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	2208      	movs	r2, #8
 8008f5c:	305c      	adds	r0, #92	@ 0x5c
 8008f5e:	f000 f916 	bl	800918e <memset>
 8008f62:	4b0d      	ldr	r3, [pc, #52]	@ (8008f98 <std+0x58>)
 8008f64:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f66:	4b0d      	ldr	r3, [pc, #52]	@ (8008f9c <std+0x5c>)
 8008f68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa0 <std+0x60>)
 8008f6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa4 <std+0x64>)
 8008f70:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f72:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa8 <std+0x68>)
 8008f74:	6224      	str	r4, [r4, #32]
 8008f76:	429c      	cmp	r4, r3
 8008f78:	d006      	beq.n	8008f88 <std+0x48>
 8008f7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f7e:	4294      	cmp	r4, r2
 8008f80:	d002      	beq.n	8008f88 <std+0x48>
 8008f82:	33d0      	adds	r3, #208	@ 0xd0
 8008f84:	429c      	cmp	r4, r3
 8008f86:	d105      	bne.n	8008f94 <std+0x54>
 8008f88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f90:	f000 b97a 	b.w	8009288 <__retarget_lock_init_recursive>
 8008f94:	bd10      	pop	{r4, pc}
 8008f96:	bf00      	nop
 8008f98:	08009109 	.word	0x08009109
 8008f9c:	0800912b 	.word	0x0800912b
 8008fa0:	08009163 	.word	0x08009163
 8008fa4:	08009187 	.word	0x08009187
 8008fa8:	2003deb4 	.word	0x2003deb4

08008fac <stdio_exit_handler>:
 8008fac:	4a02      	ldr	r2, [pc, #8]	@ (8008fb8 <stdio_exit_handler+0xc>)
 8008fae:	4903      	ldr	r1, [pc, #12]	@ (8008fbc <stdio_exit_handler+0x10>)
 8008fb0:	4803      	ldr	r0, [pc, #12]	@ (8008fc0 <stdio_exit_handler+0x14>)
 8008fb2:	f000 b869 	b.w	8009088 <_fwalk_sglue>
 8008fb6:	bf00      	nop
 8008fb8:	20000074 	.word	0x20000074
 8008fbc:	0800abed 	.word	0x0800abed
 8008fc0:	20000084 	.word	0x20000084

08008fc4 <cleanup_stdio>:
 8008fc4:	6841      	ldr	r1, [r0, #4]
 8008fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff8 <cleanup_stdio+0x34>)
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	b510      	push	{r4, lr}
 8008fcc:	4604      	mov	r4, r0
 8008fce:	d001      	beq.n	8008fd4 <cleanup_stdio+0x10>
 8008fd0:	f001 fe0c 	bl	800abec <_fflush_r>
 8008fd4:	68a1      	ldr	r1, [r4, #8]
 8008fd6:	4b09      	ldr	r3, [pc, #36]	@ (8008ffc <cleanup_stdio+0x38>)
 8008fd8:	4299      	cmp	r1, r3
 8008fda:	d002      	beq.n	8008fe2 <cleanup_stdio+0x1e>
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f001 fe05 	bl	800abec <_fflush_r>
 8008fe2:	68e1      	ldr	r1, [r4, #12]
 8008fe4:	4b06      	ldr	r3, [pc, #24]	@ (8009000 <cleanup_stdio+0x3c>)
 8008fe6:	4299      	cmp	r1, r3
 8008fe8:	d004      	beq.n	8008ff4 <cleanup_stdio+0x30>
 8008fea:	4620      	mov	r0, r4
 8008fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ff0:	f001 bdfc 	b.w	800abec <_fflush_r>
 8008ff4:	bd10      	pop	{r4, pc}
 8008ff6:	bf00      	nop
 8008ff8:	2003deb4 	.word	0x2003deb4
 8008ffc:	2003df1c 	.word	0x2003df1c
 8009000:	2003df84 	.word	0x2003df84

08009004 <global_stdio_init.part.0>:
 8009004:	b510      	push	{r4, lr}
 8009006:	4b0b      	ldr	r3, [pc, #44]	@ (8009034 <global_stdio_init.part.0+0x30>)
 8009008:	4c0b      	ldr	r4, [pc, #44]	@ (8009038 <global_stdio_init.part.0+0x34>)
 800900a:	4a0c      	ldr	r2, [pc, #48]	@ (800903c <global_stdio_init.part.0+0x38>)
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	4620      	mov	r0, r4
 8009010:	2200      	movs	r2, #0
 8009012:	2104      	movs	r1, #4
 8009014:	f7ff ff94 	bl	8008f40 <std>
 8009018:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800901c:	2201      	movs	r2, #1
 800901e:	2109      	movs	r1, #9
 8009020:	f7ff ff8e 	bl	8008f40 <std>
 8009024:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009028:	2202      	movs	r2, #2
 800902a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800902e:	2112      	movs	r1, #18
 8009030:	f7ff bf86 	b.w	8008f40 <std>
 8009034:	2003dfec 	.word	0x2003dfec
 8009038:	2003deb4 	.word	0x2003deb4
 800903c:	08008fad 	.word	0x08008fad

08009040 <__sfp_lock_acquire>:
 8009040:	4801      	ldr	r0, [pc, #4]	@ (8009048 <__sfp_lock_acquire+0x8>)
 8009042:	f000 b922 	b.w	800928a <__retarget_lock_acquire_recursive>
 8009046:	bf00      	nop
 8009048:	2003dff5 	.word	0x2003dff5

0800904c <__sfp_lock_release>:
 800904c:	4801      	ldr	r0, [pc, #4]	@ (8009054 <__sfp_lock_release+0x8>)
 800904e:	f000 b91d 	b.w	800928c <__retarget_lock_release_recursive>
 8009052:	bf00      	nop
 8009054:	2003dff5 	.word	0x2003dff5

08009058 <__sinit>:
 8009058:	b510      	push	{r4, lr}
 800905a:	4604      	mov	r4, r0
 800905c:	f7ff fff0 	bl	8009040 <__sfp_lock_acquire>
 8009060:	6a23      	ldr	r3, [r4, #32]
 8009062:	b11b      	cbz	r3, 800906c <__sinit+0x14>
 8009064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009068:	f7ff bff0 	b.w	800904c <__sfp_lock_release>
 800906c:	4b04      	ldr	r3, [pc, #16]	@ (8009080 <__sinit+0x28>)
 800906e:	6223      	str	r3, [r4, #32]
 8009070:	4b04      	ldr	r3, [pc, #16]	@ (8009084 <__sinit+0x2c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1f5      	bne.n	8009064 <__sinit+0xc>
 8009078:	f7ff ffc4 	bl	8009004 <global_stdio_init.part.0>
 800907c:	e7f2      	b.n	8009064 <__sinit+0xc>
 800907e:	bf00      	nop
 8009080:	08008fc5 	.word	0x08008fc5
 8009084:	2003dfec 	.word	0x2003dfec

08009088 <_fwalk_sglue>:
 8009088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800908c:	4607      	mov	r7, r0
 800908e:	4688      	mov	r8, r1
 8009090:	4614      	mov	r4, r2
 8009092:	2600      	movs	r6, #0
 8009094:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009098:	f1b9 0901 	subs.w	r9, r9, #1
 800909c:	d505      	bpl.n	80090aa <_fwalk_sglue+0x22>
 800909e:	6824      	ldr	r4, [r4, #0]
 80090a0:	2c00      	cmp	r4, #0
 80090a2:	d1f7      	bne.n	8009094 <_fwalk_sglue+0xc>
 80090a4:	4630      	mov	r0, r6
 80090a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090aa:	89ab      	ldrh	r3, [r5, #12]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d907      	bls.n	80090c0 <_fwalk_sglue+0x38>
 80090b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090b4:	3301      	adds	r3, #1
 80090b6:	d003      	beq.n	80090c0 <_fwalk_sglue+0x38>
 80090b8:	4629      	mov	r1, r5
 80090ba:	4638      	mov	r0, r7
 80090bc:	47c0      	blx	r8
 80090be:	4306      	orrs	r6, r0
 80090c0:	3568      	adds	r5, #104	@ 0x68
 80090c2:	e7e9      	b.n	8009098 <_fwalk_sglue+0x10>

080090c4 <siprintf>:
 80090c4:	b40e      	push	{r1, r2, r3}
 80090c6:	b510      	push	{r4, lr}
 80090c8:	b09d      	sub	sp, #116	@ 0x74
 80090ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80090cc:	9002      	str	r0, [sp, #8]
 80090ce:	9006      	str	r0, [sp, #24]
 80090d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80090d4:	480a      	ldr	r0, [pc, #40]	@ (8009100 <siprintf+0x3c>)
 80090d6:	9107      	str	r1, [sp, #28]
 80090d8:	9104      	str	r1, [sp, #16]
 80090da:	490a      	ldr	r1, [pc, #40]	@ (8009104 <siprintf+0x40>)
 80090dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e0:	9105      	str	r1, [sp, #20]
 80090e2:	2400      	movs	r4, #0
 80090e4:	a902      	add	r1, sp, #8
 80090e6:	6800      	ldr	r0, [r0, #0]
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80090ec:	f001 fbfe 	bl	800a8ec <_svfiprintf_r>
 80090f0:	9b02      	ldr	r3, [sp, #8]
 80090f2:	701c      	strb	r4, [r3, #0]
 80090f4:	b01d      	add	sp, #116	@ 0x74
 80090f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090fa:	b003      	add	sp, #12
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	20000080 	.word	0x20000080
 8009104:	ffff0208 	.word	0xffff0208

08009108 <__sread>:
 8009108:	b510      	push	{r4, lr}
 800910a:	460c      	mov	r4, r1
 800910c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009110:	f000 f86c 	bl	80091ec <_read_r>
 8009114:	2800      	cmp	r0, #0
 8009116:	bfab      	itete	ge
 8009118:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800911a:	89a3      	ldrhlt	r3, [r4, #12]
 800911c:	181b      	addge	r3, r3, r0
 800911e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009122:	bfac      	ite	ge
 8009124:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009126:	81a3      	strhlt	r3, [r4, #12]
 8009128:	bd10      	pop	{r4, pc}

0800912a <__swrite>:
 800912a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912e:	461f      	mov	r7, r3
 8009130:	898b      	ldrh	r3, [r1, #12]
 8009132:	05db      	lsls	r3, r3, #23
 8009134:	4605      	mov	r5, r0
 8009136:	460c      	mov	r4, r1
 8009138:	4616      	mov	r6, r2
 800913a:	d505      	bpl.n	8009148 <__swrite+0x1e>
 800913c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009140:	2302      	movs	r3, #2
 8009142:	2200      	movs	r2, #0
 8009144:	f000 f840 	bl	80091c8 <_lseek_r>
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800914e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009152:	81a3      	strh	r3, [r4, #12]
 8009154:	4632      	mov	r2, r6
 8009156:	463b      	mov	r3, r7
 8009158:	4628      	mov	r0, r5
 800915a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800915e:	f000 b857 	b.w	8009210 <_write_r>

08009162 <__sseek>:
 8009162:	b510      	push	{r4, lr}
 8009164:	460c      	mov	r4, r1
 8009166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800916a:	f000 f82d 	bl	80091c8 <_lseek_r>
 800916e:	1c43      	adds	r3, r0, #1
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	bf15      	itete	ne
 8009174:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009176:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800917a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800917e:	81a3      	strheq	r3, [r4, #12]
 8009180:	bf18      	it	ne
 8009182:	81a3      	strhne	r3, [r4, #12]
 8009184:	bd10      	pop	{r4, pc}

08009186 <__sclose>:
 8009186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800918a:	f000 b80d 	b.w	80091a8 <_close_r>

0800918e <memset>:
 800918e:	4402      	add	r2, r0
 8009190:	4603      	mov	r3, r0
 8009192:	4293      	cmp	r3, r2
 8009194:	d100      	bne.n	8009198 <memset+0xa>
 8009196:	4770      	bx	lr
 8009198:	f803 1b01 	strb.w	r1, [r3], #1
 800919c:	e7f9      	b.n	8009192 <memset+0x4>
	...

080091a0 <_localeconv_r>:
 80091a0:	4800      	ldr	r0, [pc, #0]	@ (80091a4 <_localeconv_r+0x4>)
 80091a2:	4770      	bx	lr
 80091a4:	200001c0 	.word	0x200001c0

080091a8 <_close_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4d06      	ldr	r5, [pc, #24]	@ (80091c4 <_close_r+0x1c>)
 80091ac:	2300      	movs	r3, #0
 80091ae:	4604      	mov	r4, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	602b      	str	r3, [r5, #0]
 80091b4:	f7f9 ff82 	bl	80030bc <_close>
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	d102      	bne.n	80091c2 <_close_r+0x1a>
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	b103      	cbz	r3, 80091c2 <_close_r+0x1a>
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
 80091c4:	2003dff0 	.word	0x2003dff0

080091c8 <_lseek_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	4d07      	ldr	r5, [pc, #28]	@ (80091e8 <_lseek_r+0x20>)
 80091cc:	4604      	mov	r4, r0
 80091ce:	4608      	mov	r0, r1
 80091d0:	4611      	mov	r1, r2
 80091d2:	2200      	movs	r2, #0
 80091d4:	602a      	str	r2, [r5, #0]
 80091d6:	461a      	mov	r2, r3
 80091d8:	f7f9 ff97 	bl	800310a <_lseek>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	d102      	bne.n	80091e6 <_lseek_r+0x1e>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	b103      	cbz	r3, 80091e6 <_lseek_r+0x1e>
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	2003dff0 	.word	0x2003dff0

080091ec <_read_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	4d07      	ldr	r5, [pc, #28]	@ (800920c <_read_r+0x20>)
 80091f0:	4604      	mov	r4, r0
 80091f2:	4608      	mov	r0, r1
 80091f4:	4611      	mov	r1, r2
 80091f6:	2200      	movs	r2, #0
 80091f8:	602a      	str	r2, [r5, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	f7f9 ff25 	bl	800304a <_read>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_read_r+0x1e>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_read_r+0x1e>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	2003dff0 	.word	0x2003dff0

08009210 <_write_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4d07      	ldr	r5, [pc, #28]	@ (8009230 <_write_r+0x20>)
 8009214:	4604      	mov	r4, r0
 8009216:	4608      	mov	r0, r1
 8009218:	4611      	mov	r1, r2
 800921a:	2200      	movs	r2, #0
 800921c:	602a      	str	r2, [r5, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	f7f9 ff30 	bl	8003084 <_write>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	d102      	bne.n	800922e <_write_r+0x1e>
 8009228:	682b      	ldr	r3, [r5, #0]
 800922a:	b103      	cbz	r3, 800922e <_write_r+0x1e>
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	2003dff0 	.word	0x2003dff0

08009234 <__errno>:
 8009234:	4b01      	ldr	r3, [pc, #4]	@ (800923c <__errno+0x8>)
 8009236:	6818      	ldr	r0, [r3, #0]
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	20000080 	.word	0x20000080

08009240 <__libc_init_array>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	4d0d      	ldr	r5, [pc, #52]	@ (8009278 <__libc_init_array+0x38>)
 8009244:	4c0d      	ldr	r4, [pc, #52]	@ (800927c <__libc_init_array+0x3c>)
 8009246:	1b64      	subs	r4, r4, r5
 8009248:	10a4      	asrs	r4, r4, #2
 800924a:	2600      	movs	r6, #0
 800924c:	42a6      	cmp	r6, r4
 800924e:	d109      	bne.n	8009264 <__libc_init_array+0x24>
 8009250:	4d0b      	ldr	r5, [pc, #44]	@ (8009280 <__libc_init_array+0x40>)
 8009252:	4c0c      	ldr	r4, [pc, #48]	@ (8009284 <__libc_init_array+0x44>)
 8009254:	f003 f8e0 	bl	800c418 <_init>
 8009258:	1b64      	subs	r4, r4, r5
 800925a:	10a4      	asrs	r4, r4, #2
 800925c:	2600      	movs	r6, #0
 800925e:	42a6      	cmp	r6, r4
 8009260:	d105      	bne.n	800926e <__libc_init_array+0x2e>
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	f855 3b04 	ldr.w	r3, [r5], #4
 8009268:	4798      	blx	r3
 800926a:	3601      	adds	r6, #1
 800926c:	e7ee      	b.n	800924c <__libc_init_array+0xc>
 800926e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009272:	4798      	blx	r3
 8009274:	3601      	adds	r6, #1
 8009276:	e7f2      	b.n	800925e <__libc_init_array+0x1e>
 8009278:	0800ccc0 	.word	0x0800ccc0
 800927c:	0800ccc0 	.word	0x0800ccc0
 8009280:	0800ccc0 	.word	0x0800ccc0
 8009284:	0800ccc4 	.word	0x0800ccc4

08009288 <__retarget_lock_init_recursive>:
 8009288:	4770      	bx	lr

0800928a <__retarget_lock_acquire_recursive>:
 800928a:	4770      	bx	lr

0800928c <__retarget_lock_release_recursive>:
 800928c:	4770      	bx	lr

0800928e <quorem>:
 800928e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009292:	6903      	ldr	r3, [r0, #16]
 8009294:	690c      	ldr	r4, [r1, #16]
 8009296:	42a3      	cmp	r3, r4
 8009298:	4607      	mov	r7, r0
 800929a:	db7e      	blt.n	800939a <quorem+0x10c>
 800929c:	3c01      	subs	r4, #1
 800929e:	f101 0814 	add.w	r8, r1, #20
 80092a2:	00a3      	lsls	r3, r4, #2
 80092a4:	f100 0514 	add.w	r5, r0, #20
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092ae:	9301      	str	r3, [sp, #4]
 80092b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092b8:	3301      	adds	r3, #1
 80092ba:	429a      	cmp	r2, r3
 80092bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80092c4:	d32e      	bcc.n	8009324 <quorem+0x96>
 80092c6:	f04f 0a00 	mov.w	sl, #0
 80092ca:	46c4      	mov	ip, r8
 80092cc:	46ae      	mov	lr, r5
 80092ce:	46d3      	mov	fp, sl
 80092d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092d4:	b298      	uxth	r0, r3
 80092d6:	fb06 a000 	mla	r0, r6, r0, sl
 80092da:	0c02      	lsrs	r2, r0, #16
 80092dc:	0c1b      	lsrs	r3, r3, #16
 80092de:	fb06 2303 	mla	r3, r6, r3, r2
 80092e2:	f8de 2000 	ldr.w	r2, [lr]
 80092e6:	b280      	uxth	r0, r0
 80092e8:	b292      	uxth	r2, r2
 80092ea:	1a12      	subs	r2, r2, r0
 80092ec:	445a      	add	r2, fp
 80092ee:	f8de 0000 	ldr.w	r0, [lr]
 80092f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80092fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009300:	b292      	uxth	r2, r2
 8009302:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009306:	45e1      	cmp	r9, ip
 8009308:	f84e 2b04 	str.w	r2, [lr], #4
 800930c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009310:	d2de      	bcs.n	80092d0 <quorem+0x42>
 8009312:	9b00      	ldr	r3, [sp, #0]
 8009314:	58eb      	ldr	r3, [r5, r3]
 8009316:	b92b      	cbnz	r3, 8009324 <quorem+0x96>
 8009318:	9b01      	ldr	r3, [sp, #4]
 800931a:	3b04      	subs	r3, #4
 800931c:	429d      	cmp	r5, r3
 800931e:	461a      	mov	r2, r3
 8009320:	d32f      	bcc.n	8009382 <quorem+0xf4>
 8009322:	613c      	str	r4, [r7, #16]
 8009324:	4638      	mov	r0, r7
 8009326:	f001 f97d 	bl	800a624 <__mcmp>
 800932a:	2800      	cmp	r0, #0
 800932c:	db25      	blt.n	800937a <quorem+0xec>
 800932e:	4629      	mov	r1, r5
 8009330:	2000      	movs	r0, #0
 8009332:	f858 2b04 	ldr.w	r2, [r8], #4
 8009336:	f8d1 c000 	ldr.w	ip, [r1]
 800933a:	fa1f fe82 	uxth.w	lr, r2
 800933e:	fa1f f38c 	uxth.w	r3, ip
 8009342:	eba3 030e 	sub.w	r3, r3, lr
 8009346:	4403      	add	r3, r0
 8009348:	0c12      	lsrs	r2, r2, #16
 800934a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800934e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009352:	b29b      	uxth	r3, r3
 8009354:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009358:	45c1      	cmp	r9, r8
 800935a:	f841 3b04 	str.w	r3, [r1], #4
 800935e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009362:	d2e6      	bcs.n	8009332 <quorem+0xa4>
 8009364:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009368:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800936c:	b922      	cbnz	r2, 8009378 <quorem+0xea>
 800936e:	3b04      	subs	r3, #4
 8009370:	429d      	cmp	r5, r3
 8009372:	461a      	mov	r2, r3
 8009374:	d30b      	bcc.n	800938e <quorem+0x100>
 8009376:	613c      	str	r4, [r7, #16]
 8009378:	3601      	adds	r6, #1
 800937a:	4630      	mov	r0, r6
 800937c:	b003      	add	sp, #12
 800937e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009382:	6812      	ldr	r2, [r2, #0]
 8009384:	3b04      	subs	r3, #4
 8009386:	2a00      	cmp	r2, #0
 8009388:	d1cb      	bne.n	8009322 <quorem+0x94>
 800938a:	3c01      	subs	r4, #1
 800938c:	e7c6      	b.n	800931c <quorem+0x8e>
 800938e:	6812      	ldr	r2, [r2, #0]
 8009390:	3b04      	subs	r3, #4
 8009392:	2a00      	cmp	r2, #0
 8009394:	d1ef      	bne.n	8009376 <quorem+0xe8>
 8009396:	3c01      	subs	r4, #1
 8009398:	e7ea      	b.n	8009370 <quorem+0xe2>
 800939a:	2000      	movs	r0, #0
 800939c:	e7ee      	b.n	800937c <quorem+0xee>
	...

080093a0 <_dtoa_r>:
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	69c7      	ldr	r7, [r0, #28]
 80093a6:	b097      	sub	sp, #92	@ 0x5c
 80093a8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80093ac:	ec55 4b10 	vmov	r4, r5, d0
 80093b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80093b2:	9107      	str	r1, [sp, #28]
 80093b4:	4681      	mov	r9, r0
 80093b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80093b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80093ba:	b97f      	cbnz	r7, 80093dc <_dtoa_r+0x3c>
 80093bc:	2010      	movs	r0, #16
 80093be:	f000 fe09 	bl	8009fd4 <malloc>
 80093c2:	4602      	mov	r2, r0
 80093c4:	f8c9 001c 	str.w	r0, [r9, #28]
 80093c8:	b920      	cbnz	r0, 80093d4 <_dtoa_r+0x34>
 80093ca:	4ba9      	ldr	r3, [pc, #676]	@ (8009670 <_dtoa_r+0x2d0>)
 80093cc:	21ef      	movs	r1, #239	@ 0xef
 80093ce:	48a9      	ldr	r0, [pc, #676]	@ (8009674 <_dtoa_r+0x2d4>)
 80093d0:	f001 fc6c 	bl	800acac <__assert_func>
 80093d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80093d8:	6007      	str	r7, [r0, #0]
 80093da:	60c7      	str	r7, [r0, #12]
 80093dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80093e0:	6819      	ldr	r1, [r3, #0]
 80093e2:	b159      	cbz	r1, 80093fc <_dtoa_r+0x5c>
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	604a      	str	r2, [r1, #4]
 80093e8:	2301      	movs	r3, #1
 80093ea:	4093      	lsls	r3, r2
 80093ec:	608b      	str	r3, [r1, #8]
 80093ee:	4648      	mov	r0, r9
 80093f0:	f000 fee6 	bl	800a1c0 <_Bfree>
 80093f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	1e2b      	subs	r3, r5, #0
 80093fe:	bfb9      	ittee	lt
 8009400:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009404:	9305      	strlt	r3, [sp, #20]
 8009406:	2300      	movge	r3, #0
 8009408:	6033      	strge	r3, [r6, #0]
 800940a:	9f05      	ldr	r7, [sp, #20]
 800940c:	4b9a      	ldr	r3, [pc, #616]	@ (8009678 <_dtoa_r+0x2d8>)
 800940e:	bfbc      	itt	lt
 8009410:	2201      	movlt	r2, #1
 8009412:	6032      	strlt	r2, [r6, #0]
 8009414:	43bb      	bics	r3, r7
 8009416:	d112      	bne.n	800943e <_dtoa_r+0x9e>
 8009418:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800941a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009424:	4323      	orrs	r3, r4
 8009426:	f000 855a 	beq.w	8009ede <_dtoa_r+0xb3e>
 800942a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800942c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800968c <_dtoa_r+0x2ec>
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 855c 	beq.w	8009eee <_dtoa_r+0xb4e>
 8009436:	f10a 0303 	add.w	r3, sl, #3
 800943a:	f000 bd56 	b.w	8009eea <_dtoa_r+0xb4a>
 800943e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009442:	2200      	movs	r2, #0
 8009444:	ec51 0b17 	vmov	r0, r1, d7
 8009448:	2300      	movs	r3, #0
 800944a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800944e:	f7f7 fb5b 	bl	8000b08 <__aeabi_dcmpeq>
 8009452:	4680      	mov	r8, r0
 8009454:	b158      	cbz	r0, 800946e <_dtoa_r+0xce>
 8009456:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009458:	2301      	movs	r3, #1
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800945e:	b113      	cbz	r3, 8009466 <_dtoa_r+0xc6>
 8009460:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009462:	4b86      	ldr	r3, [pc, #536]	@ (800967c <_dtoa_r+0x2dc>)
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009690 <_dtoa_r+0x2f0>
 800946a:	f000 bd40 	b.w	8009eee <_dtoa_r+0xb4e>
 800946e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009472:	aa14      	add	r2, sp, #80	@ 0x50
 8009474:	a915      	add	r1, sp, #84	@ 0x54
 8009476:	4648      	mov	r0, r9
 8009478:	f001 f984 	bl	800a784 <__d2b>
 800947c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009480:	9002      	str	r0, [sp, #8]
 8009482:	2e00      	cmp	r6, #0
 8009484:	d078      	beq.n	8009578 <_dtoa_r+0x1d8>
 8009486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009488:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800948c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009490:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009494:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009498:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800949c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80094a0:	4619      	mov	r1, r3
 80094a2:	2200      	movs	r2, #0
 80094a4:	4b76      	ldr	r3, [pc, #472]	@ (8009680 <_dtoa_r+0x2e0>)
 80094a6:	f7f6 ff0f 	bl	80002c8 <__aeabi_dsub>
 80094aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8009658 <_dtoa_r+0x2b8>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f7f7 f8c2 	bl	8000638 <__aeabi_dmul>
 80094b4:	a36a      	add	r3, pc, #424	@ (adr r3, 8009660 <_dtoa_r+0x2c0>)
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	f7f6 ff07 	bl	80002cc <__adddf3>
 80094be:	4604      	mov	r4, r0
 80094c0:	4630      	mov	r0, r6
 80094c2:	460d      	mov	r5, r1
 80094c4:	f7f7 f84e 	bl	8000564 <__aeabi_i2d>
 80094c8:	a367      	add	r3, pc, #412	@ (adr r3, 8009668 <_dtoa_r+0x2c8>)
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	f7f7 f8b3 	bl	8000638 <__aeabi_dmul>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4620      	mov	r0, r4
 80094d8:	4629      	mov	r1, r5
 80094da:	f7f6 fef7 	bl	80002cc <__adddf3>
 80094de:	4604      	mov	r4, r0
 80094e0:	460d      	mov	r5, r1
 80094e2:	f7f7 fb59 	bl	8000b98 <__aeabi_d2iz>
 80094e6:	2200      	movs	r2, #0
 80094e8:	4607      	mov	r7, r0
 80094ea:	2300      	movs	r3, #0
 80094ec:	4620      	mov	r0, r4
 80094ee:	4629      	mov	r1, r5
 80094f0:	f7f7 fb14 	bl	8000b1c <__aeabi_dcmplt>
 80094f4:	b140      	cbz	r0, 8009508 <_dtoa_r+0x168>
 80094f6:	4638      	mov	r0, r7
 80094f8:	f7f7 f834 	bl	8000564 <__aeabi_i2d>
 80094fc:	4622      	mov	r2, r4
 80094fe:	462b      	mov	r3, r5
 8009500:	f7f7 fb02 	bl	8000b08 <__aeabi_dcmpeq>
 8009504:	b900      	cbnz	r0, 8009508 <_dtoa_r+0x168>
 8009506:	3f01      	subs	r7, #1
 8009508:	2f16      	cmp	r7, #22
 800950a:	d852      	bhi.n	80095b2 <_dtoa_r+0x212>
 800950c:	4b5d      	ldr	r3, [pc, #372]	@ (8009684 <_dtoa_r+0x2e4>)
 800950e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800951a:	f7f7 faff 	bl	8000b1c <__aeabi_dcmplt>
 800951e:	2800      	cmp	r0, #0
 8009520:	d049      	beq.n	80095b6 <_dtoa_r+0x216>
 8009522:	3f01      	subs	r7, #1
 8009524:	2300      	movs	r3, #0
 8009526:	9310      	str	r3, [sp, #64]	@ 0x40
 8009528:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800952a:	1b9b      	subs	r3, r3, r6
 800952c:	1e5a      	subs	r2, r3, #1
 800952e:	bf45      	ittet	mi
 8009530:	f1c3 0301 	rsbmi	r3, r3, #1
 8009534:	9300      	strmi	r3, [sp, #0]
 8009536:	2300      	movpl	r3, #0
 8009538:	2300      	movmi	r3, #0
 800953a:	9206      	str	r2, [sp, #24]
 800953c:	bf54      	ite	pl
 800953e:	9300      	strpl	r3, [sp, #0]
 8009540:	9306      	strmi	r3, [sp, #24]
 8009542:	2f00      	cmp	r7, #0
 8009544:	db39      	blt.n	80095ba <_dtoa_r+0x21a>
 8009546:	9b06      	ldr	r3, [sp, #24]
 8009548:	970d      	str	r7, [sp, #52]	@ 0x34
 800954a:	443b      	add	r3, r7
 800954c:	9306      	str	r3, [sp, #24]
 800954e:	2300      	movs	r3, #0
 8009550:	9308      	str	r3, [sp, #32]
 8009552:	9b07      	ldr	r3, [sp, #28]
 8009554:	2b09      	cmp	r3, #9
 8009556:	d863      	bhi.n	8009620 <_dtoa_r+0x280>
 8009558:	2b05      	cmp	r3, #5
 800955a:	bfc4      	itt	gt
 800955c:	3b04      	subgt	r3, #4
 800955e:	9307      	strgt	r3, [sp, #28]
 8009560:	9b07      	ldr	r3, [sp, #28]
 8009562:	f1a3 0302 	sub.w	r3, r3, #2
 8009566:	bfcc      	ite	gt
 8009568:	2400      	movgt	r4, #0
 800956a:	2401      	movle	r4, #1
 800956c:	2b03      	cmp	r3, #3
 800956e:	d863      	bhi.n	8009638 <_dtoa_r+0x298>
 8009570:	e8df f003 	tbb	[pc, r3]
 8009574:	2b375452 	.word	0x2b375452
 8009578:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800957c:	441e      	add	r6, r3
 800957e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009582:	2b20      	cmp	r3, #32
 8009584:	bfc1      	itttt	gt
 8009586:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800958a:	409f      	lslgt	r7, r3
 800958c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009590:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009594:	bfd6      	itet	le
 8009596:	f1c3 0320 	rsble	r3, r3, #32
 800959a:	ea47 0003 	orrgt.w	r0, r7, r3
 800959e:	fa04 f003 	lslle.w	r0, r4, r3
 80095a2:	f7f6 ffcf 	bl	8000544 <__aeabi_ui2d>
 80095a6:	2201      	movs	r2, #1
 80095a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80095ac:	3e01      	subs	r6, #1
 80095ae:	9212      	str	r2, [sp, #72]	@ 0x48
 80095b0:	e776      	b.n	80094a0 <_dtoa_r+0x100>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e7b7      	b.n	8009526 <_dtoa_r+0x186>
 80095b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80095b8:	e7b6      	b.n	8009528 <_dtoa_r+0x188>
 80095ba:	9b00      	ldr	r3, [sp, #0]
 80095bc:	1bdb      	subs	r3, r3, r7
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	427b      	negs	r3, r7
 80095c2:	9308      	str	r3, [sp, #32]
 80095c4:	2300      	movs	r3, #0
 80095c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80095c8:	e7c3      	b.n	8009552 <_dtoa_r+0x1b2>
 80095ca:	2301      	movs	r3, #1
 80095cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095d0:	eb07 0b03 	add.w	fp, r7, r3
 80095d4:	f10b 0301 	add.w	r3, fp, #1
 80095d8:	2b01      	cmp	r3, #1
 80095da:	9303      	str	r3, [sp, #12]
 80095dc:	bfb8      	it	lt
 80095de:	2301      	movlt	r3, #1
 80095e0:	e006      	b.n	80095f0 <_dtoa_r+0x250>
 80095e2:	2301      	movs	r3, #1
 80095e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dd28      	ble.n	800963e <_dtoa_r+0x29e>
 80095ec:	469b      	mov	fp, r3
 80095ee:	9303      	str	r3, [sp, #12]
 80095f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80095f4:	2100      	movs	r1, #0
 80095f6:	2204      	movs	r2, #4
 80095f8:	f102 0514 	add.w	r5, r2, #20
 80095fc:	429d      	cmp	r5, r3
 80095fe:	d926      	bls.n	800964e <_dtoa_r+0x2ae>
 8009600:	6041      	str	r1, [r0, #4]
 8009602:	4648      	mov	r0, r9
 8009604:	f000 fd9c 	bl	800a140 <_Balloc>
 8009608:	4682      	mov	sl, r0
 800960a:	2800      	cmp	r0, #0
 800960c:	d142      	bne.n	8009694 <_dtoa_r+0x2f4>
 800960e:	4b1e      	ldr	r3, [pc, #120]	@ (8009688 <_dtoa_r+0x2e8>)
 8009610:	4602      	mov	r2, r0
 8009612:	f240 11af 	movw	r1, #431	@ 0x1af
 8009616:	e6da      	b.n	80093ce <_dtoa_r+0x2e>
 8009618:	2300      	movs	r3, #0
 800961a:	e7e3      	b.n	80095e4 <_dtoa_r+0x244>
 800961c:	2300      	movs	r3, #0
 800961e:	e7d5      	b.n	80095cc <_dtoa_r+0x22c>
 8009620:	2401      	movs	r4, #1
 8009622:	2300      	movs	r3, #0
 8009624:	9307      	str	r3, [sp, #28]
 8009626:	9409      	str	r4, [sp, #36]	@ 0x24
 8009628:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800962c:	2200      	movs	r2, #0
 800962e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009632:	2312      	movs	r3, #18
 8009634:	920c      	str	r2, [sp, #48]	@ 0x30
 8009636:	e7db      	b.n	80095f0 <_dtoa_r+0x250>
 8009638:	2301      	movs	r3, #1
 800963a:	9309      	str	r3, [sp, #36]	@ 0x24
 800963c:	e7f4      	b.n	8009628 <_dtoa_r+0x288>
 800963e:	f04f 0b01 	mov.w	fp, #1
 8009642:	f8cd b00c 	str.w	fp, [sp, #12]
 8009646:	465b      	mov	r3, fp
 8009648:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800964c:	e7d0      	b.n	80095f0 <_dtoa_r+0x250>
 800964e:	3101      	adds	r1, #1
 8009650:	0052      	lsls	r2, r2, #1
 8009652:	e7d1      	b.n	80095f8 <_dtoa_r+0x258>
 8009654:	f3af 8000 	nop.w
 8009658:	636f4361 	.word	0x636f4361
 800965c:	3fd287a7 	.word	0x3fd287a7
 8009660:	8b60c8b3 	.word	0x8b60c8b3
 8009664:	3fc68a28 	.word	0x3fc68a28
 8009668:	509f79fb 	.word	0x509f79fb
 800966c:	3fd34413 	.word	0x3fd34413
 8009670:	0800c7a5 	.word	0x0800c7a5
 8009674:	0800c7bc 	.word	0x0800c7bc
 8009678:	7ff00000 	.word	0x7ff00000
 800967c:	0800c775 	.word	0x0800c775
 8009680:	3ff80000 	.word	0x3ff80000
 8009684:	0800c910 	.word	0x0800c910
 8009688:	0800c814 	.word	0x0800c814
 800968c:	0800c7a1 	.word	0x0800c7a1
 8009690:	0800c774 	.word	0x0800c774
 8009694:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009698:	6018      	str	r0, [r3, #0]
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	2b0e      	cmp	r3, #14
 800969e:	f200 80a1 	bhi.w	80097e4 <_dtoa_r+0x444>
 80096a2:	2c00      	cmp	r4, #0
 80096a4:	f000 809e 	beq.w	80097e4 <_dtoa_r+0x444>
 80096a8:	2f00      	cmp	r7, #0
 80096aa:	dd33      	ble.n	8009714 <_dtoa_r+0x374>
 80096ac:	4b9c      	ldr	r3, [pc, #624]	@ (8009920 <_dtoa_r+0x580>)
 80096ae:	f007 020f 	and.w	r2, r7, #15
 80096b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096b6:	ed93 7b00 	vldr	d7, [r3]
 80096ba:	05f8      	lsls	r0, r7, #23
 80096bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80096c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80096c4:	d516      	bpl.n	80096f4 <_dtoa_r+0x354>
 80096c6:	4b97      	ldr	r3, [pc, #604]	@ (8009924 <_dtoa_r+0x584>)
 80096c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096d0:	f7f7 f8dc 	bl	800088c <__aeabi_ddiv>
 80096d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096d8:	f004 040f 	and.w	r4, r4, #15
 80096dc:	2603      	movs	r6, #3
 80096de:	4d91      	ldr	r5, [pc, #580]	@ (8009924 <_dtoa_r+0x584>)
 80096e0:	b954      	cbnz	r4, 80096f8 <_dtoa_r+0x358>
 80096e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80096e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096ea:	f7f7 f8cf 	bl	800088c <__aeabi_ddiv>
 80096ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096f2:	e028      	b.n	8009746 <_dtoa_r+0x3a6>
 80096f4:	2602      	movs	r6, #2
 80096f6:	e7f2      	b.n	80096de <_dtoa_r+0x33e>
 80096f8:	07e1      	lsls	r1, r4, #31
 80096fa:	d508      	bpl.n	800970e <_dtoa_r+0x36e>
 80096fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009700:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009704:	f7f6 ff98 	bl	8000638 <__aeabi_dmul>
 8009708:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800970c:	3601      	adds	r6, #1
 800970e:	1064      	asrs	r4, r4, #1
 8009710:	3508      	adds	r5, #8
 8009712:	e7e5      	b.n	80096e0 <_dtoa_r+0x340>
 8009714:	f000 80af 	beq.w	8009876 <_dtoa_r+0x4d6>
 8009718:	427c      	negs	r4, r7
 800971a:	4b81      	ldr	r3, [pc, #516]	@ (8009920 <_dtoa_r+0x580>)
 800971c:	4d81      	ldr	r5, [pc, #516]	@ (8009924 <_dtoa_r+0x584>)
 800971e:	f004 020f 	and.w	r2, r4, #15
 8009722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800972e:	f7f6 ff83 	bl	8000638 <__aeabi_dmul>
 8009732:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009736:	1124      	asrs	r4, r4, #4
 8009738:	2300      	movs	r3, #0
 800973a:	2602      	movs	r6, #2
 800973c:	2c00      	cmp	r4, #0
 800973e:	f040 808f 	bne.w	8009860 <_dtoa_r+0x4c0>
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1d3      	bne.n	80096ee <_dtoa_r+0x34e>
 8009746:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009748:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 8094 	beq.w	800987a <_dtoa_r+0x4da>
 8009752:	4b75      	ldr	r3, [pc, #468]	@ (8009928 <_dtoa_r+0x588>)
 8009754:	2200      	movs	r2, #0
 8009756:	4620      	mov	r0, r4
 8009758:	4629      	mov	r1, r5
 800975a:	f7f7 f9df 	bl	8000b1c <__aeabi_dcmplt>
 800975e:	2800      	cmp	r0, #0
 8009760:	f000 808b 	beq.w	800987a <_dtoa_r+0x4da>
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 8087 	beq.w	800987a <_dtoa_r+0x4da>
 800976c:	f1bb 0f00 	cmp.w	fp, #0
 8009770:	dd34      	ble.n	80097dc <_dtoa_r+0x43c>
 8009772:	4620      	mov	r0, r4
 8009774:	4b6d      	ldr	r3, [pc, #436]	@ (800992c <_dtoa_r+0x58c>)
 8009776:	2200      	movs	r2, #0
 8009778:	4629      	mov	r1, r5
 800977a:	f7f6 ff5d 	bl	8000638 <__aeabi_dmul>
 800977e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009782:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009786:	3601      	adds	r6, #1
 8009788:	465c      	mov	r4, fp
 800978a:	4630      	mov	r0, r6
 800978c:	f7f6 feea 	bl	8000564 <__aeabi_i2d>
 8009790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009794:	f7f6 ff50 	bl	8000638 <__aeabi_dmul>
 8009798:	4b65      	ldr	r3, [pc, #404]	@ (8009930 <_dtoa_r+0x590>)
 800979a:	2200      	movs	r2, #0
 800979c:	f7f6 fd96 	bl	80002cc <__adddf3>
 80097a0:	4605      	mov	r5, r0
 80097a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80097a6:	2c00      	cmp	r4, #0
 80097a8:	d16a      	bne.n	8009880 <_dtoa_r+0x4e0>
 80097aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097ae:	4b61      	ldr	r3, [pc, #388]	@ (8009934 <_dtoa_r+0x594>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	f7f6 fd89 	bl	80002c8 <__aeabi_dsub>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097be:	462a      	mov	r2, r5
 80097c0:	4633      	mov	r3, r6
 80097c2:	f7f7 f9c9 	bl	8000b58 <__aeabi_dcmpgt>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	f040 8298 	bne.w	8009cfc <_dtoa_r+0x95c>
 80097cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097d0:	462a      	mov	r2, r5
 80097d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80097d6:	f7f7 f9a1 	bl	8000b1c <__aeabi_dcmplt>
 80097da:	bb38      	cbnz	r0, 800982c <_dtoa_r+0x48c>
 80097dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80097e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80097e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f2c0 8157 	blt.w	8009a9a <_dtoa_r+0x6fa>
 80097ec:	2f0e      	cmp	r7, #14
 80097ee:	f300 8154 	bgt.w	8009a9a <_dtoa_r+0x6fa>
 80097f2:	4b4b      	ldr	r3, [pc, #300]	@ (8009920 <_dtoa_r+0x580>)
 80097f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097f8:	ed93 7b00 	vldr	d7, [r3]
 80097fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097fe:	2b00      	cmp	r3, #0
 8009800:	ed8d 7b00 	vstr	d7, [sp]
 8009804:	f280 80e5 	bge.w	80099d2 <_dtoa_r+0x632>
 8009808:	9b03      	ldr	r3, [sp, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	f300 80e1 	bgt.w	80099d2 <_dtoa_r+0x632>
 8009810:	d10c      	bne.n	800982c <_dtoa_r+0x48c>
 8009812:	4b48      	ldr	r3, [pc, #288]	@ (8009934 <_dtoa_r+0x594>)
 8009814:	2200      	movs	r2, #0
 8009816:	ec51 0b17 	vmov	r0, r1, d7
 800981a:	f7f6 ff0d 	bl	8000638 <__aeabi_dmul>
 800981e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009822:	f7f7 f98f 	bl	8000b44 <__aeabi_dcmpge>
 8009826:	2800      	cmp	r0, #0
 8009828:	f000 8266 	beq.w	8009cf8 <_dtoa_r+0x958>
 800982c:	2400      	movs	r4, #0
 800982e:	4625      	mov	r5, r4
 8009830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009832:	4656      	mov	r6, sl
 8009834:	ea6f 0803 	mvn.w	r8, r3
 8009838:	2700      	movs	r7, #0
 800983a:	4621      	mov	r1, r4
 800983c:	4648      	mov	r0, r9
 800983e:	f000 fcbf 	bl	800a1c0 <_Bfree>
 8009842:	2d00      	cmp	r5, #0
 8009844:	f000 80bd 	beq.w	80099c2 <_dtoa_r+0x622>
 8009848:	b12f      	cbz	r7, 8009856 <_dtoa_r+0x4b6>
 800984a:	42af      	cmp	r7, r5
 800984c:	d003      	beq.n	8009856 <_dtoa_r+0x4b6>
 800984e:	4639      	mov	r1, r7
 8009850:	4648      	mov	r0, r9
 8009852:	f000 fcb5 	bl	800a1c0 <_Bfree>
 8009856:	4629      	mov	r1, r5
 8009858:	4648      	mov	r0, r9
 800985a:	f000 fcb1 	bl	800a1c0 <_Bfree>
 800985e:	e0b0      	b.n	80099c2 <_dtoa_r+0x622>
 8009860:	07e2      	lsls	r2, r4, #31
 8009862:	d505      	bpl.n	8009870 <_dtoa_r+0x4d0>
 8009864:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009868:	f7f6 fee6 	bl	8000638 <__aeabi_dmul>
 800986c:	3601      	adds	r6, #1
 800986e:	2301      	movs	r3, #1
 8009870:	1064      	asrs	r4, r4, #1
 8009872:	3508      	adds	r5, #8
 8009874:	e762      	b.n	800973c <_dtoa_r+0x39c>
 8009876:	2602      	movs	r6, #2
 8009878:	e765      	b.n	8009746 <_dtoa_r+0x3a6>
 800987a:	9c03      	ldr	r4, [sp, #12]
 800987c:	46b8      	mov	r8, r7
 800987e:	e784      	b.n	800978a <_dtoa_r+0x3ea>
 8009880:	4b27      	ldr	r3, [pc, #156]	@ (8009920 <_dtoa_r+0x580>)
 8009882:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009884:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009888:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800988c:	4454      	add	r4, sl
 800988e:	2900      	cmp	r1, #0
 8009890:	d054      	beq.n	800993c <_dtoa_r+0x59c>
 8009892:	4929      	ldr	r1, [pc, #164]	@ (8009938 <_dtoa_r+0x598>)
 8009894:	2000      	movs	r0, #0
 8009896:	f7f6 fff9 	bl	800088c <__aeabi_ddiv>
 800989a:	4633      	mov	r3, r6
 800989c:	462a      	mov	r2, r5
 800989e:	f7f6 fd13 	bl	80002c8 <__aeabi_dsub>
 80098a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098a6:	4656      	mov	r6, sl
 80098a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098ac:	f7f7 f974 	bl	8000b98 <__aeabi_d2iz>
 80098b0:	4605      	mov	r5, r0
 80098b2:	f7f6 fe57 	bl	8000564 <__aeabi_i2d>
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098be:	f7f6 fd03 	bl	80002c8 <__aeabi_dsub>
 80098c2:	3530      	adds	r5, #48	@ 0x30
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80098cc:	f806 5b01 	strb.w	r5, [r6], #1
 80098d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098d4:	f7f7 f922 	bl	8000b1c <__aeabi_dcmplt>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d172      	bne.n	80099c2 <_dtoa_r+0x622>
 80098dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098e0:	4911      	ldr	r1, [pc, #68]	@ (8009928 <_dtoa_r+0x588>)
 80098e2:	2000      	movs	r0, #0
 80098e4:	f7f6 fcf0 	bl	80002c8 <__aeabi_dsub>
 80098e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098ec:	f7f7 f916 	bl	8000b1c <__aeabi_dcmplt>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	f040 80b4 	bne.w	8009a5e <_dtoa_r+0x6be>
 80098f6:	42a6      	cmp	r6, r4
 80098f8:	f43f af70 	beq.w	80097dc <_dtoa_r+0x43c>
 80098fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009900:	4b0a      	ldr	r3, [pc, #40]	@ (800992c <_dtoa_r+0x58c>)
 8009902:	2200      	movs	r2, #0
 8009904:	f7f6 fe98 	bl	8000638 <__aeabi_dmul>
 8009908:	4b08      	ldr	r3, [pc, #32]	@ (800992c <_dtoa_r+0x58c>)
 800990a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800990e:	2200      	movs	r2, #0
 8009910:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009914:	f7f6 fe90 	bl	8000638 <__aeabi_dmul>
 8009918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800991c:	e7c4      	b.n	80098a8 <_dtoa_r+0x508>
 800991e:	bf00      	nop
 8009920:	0800c910 	.word	0x0800c910
 8009924:	0800c8e8 	.word	0x0800c8e8
 8009928:	3ff00000 	.word	0x3ff00000
 800992c:	40240000 	.word	0x40240000
 8009930:	401c0000 	.word	0x401c0000
 8009934:	40140000 	.word	0x40140000
 8009938:	3fe00000 	.word	0x3fe00000
 800993c:	4631      	mov	r1, r6
 800993e:	4628      	mov	r0, r5
 8009940:	f7f6 fe7a 	bl	8000638 <__aeabi_dmul>
 8009944:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009948:	9413      	str	r4, [sp, #76]	@ 0x4c
 800994a:	4656      	mov	r6, sl
 800994c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009950:	f7f7 f922 	bl	8000b98 <__aeabi_d2iz>
 8009954:	4605      	mov	r5, r0
 8009956:	f7f6 fe05 	bl	8000564 <__aeabi_i2d>
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009962:	f7f6 fcb1 	bl	80002c8 <__aeabi_dsub>
 8009966:	3530      	adds	r5, #48	@ 0x30
 8009968:	f806 5b01 	strb.w	r5, [r6], #1
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	42a6      	cmp	r6, r4
 8009972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009976:	f04f 0200 	mov.w	r2, #0
 800997a:	d124      	bne.n	80099c6 <_dtoa_r+0x626>
 800997c:	4baf      	ldr	r3, [pc, #700]	@ (8009c3c <_dtoa_r+0x89c>)
 800997e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009982:	f7f6 fca3 	bl	80002cc <__adddf3>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800998e:	f7f7 f8e3 	bl	8000b58 <__aeabi_dcmpgt>
 8009992:	2800      	cmp	r0, #0
 8009994:	d163      	bne.n	8009a5e <_dtoa_r+0x6be>
 8009996:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800999a:	49a8      	ldr	r1, [pc, #672]	@ (8009c3c <_dtoa_r+0x89c>)
 800999c:	2000      	movs	r0, #0
 800999e:	f7f6 fc93 	bl	80002c8 <__aeabi_dsub>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099aa:	f7f7 f8b7 	bl	8000b1c <__aeabi_dcmplt>
 80099ae:	2800      	cmp	r0, #0
 80099b0:	f43f af14 	beq.w	80097dc <_dtoa_r+0x43c>
 80099b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80099b6:	1e73      	subs	r3, r6, #1
 80099b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099be:	2b30      	cmp	r3, #48	@ 0x30
 80099c0:	d0f8      	beq.n	80099b4 <_dtoa_r+0x614>
 80099c2:	4647      	mov	r7, r8
 80099c4:	e03b      	b.n	8009a3e <_dtoa_r+0x69e>
 80099c6:	4b9e      	ldr	r3, [pc, #632]	@ (8009c40 <_dtoa_r+0x8a0>)
 80099c8:	f7f6 fe36 	bl	8000638 <__aeabi_dmul>
 80099cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099d0:	e7bc      	b.n	800994c <_dtoa_r+0x5ac>
 80099d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80099d6:	4656      	mov	r6, sl
 80099d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099dc:	4620      	mov	r0, r4
 80099de:	4629      	mov	r1, r5
 80099e0:	f7f6 ff54 	bl	800088c <__aeabi_ddiv>
 80099e4:	f7f7 f8d8 	bl	8000b98 <__aeabi_d2iz>
 80099e8:	4680      	mov	r8, r0
 80099ea:	f7f6 fdbb 	bl	8000564 <__aeabi_i2d>
 80099ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099f2:	f7f6 fe21 	bl	8000638 <__aeabi_dmul>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4620      	mov	r0, r4
 80099fc:	4629      	mov	r1, r5
 80099fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009a02:	f7f6 fc61 	bl	80002c8 <__aeabi_dsub>
 8009a06:	f806 4b01 	strb.w	r4, [r6], #1
 8009a0a:	9d03      	ldr	r5, [sp, #12]
 8009a0c:	eba6 040a 	sub.w	r4, r6, sl
 8009a10:	42a5      	cmp	r5, r4
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	d133      	bne.n	8009a80 <_dtoa_r+0x6e0>
 8009a18:	f7f6 fc58 	bl	80002cc <__adddf3>
 8009a1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a20:	4604      	mov	r4, r0
 8009a22:	460d      	mov	r5, r1
 8009a24:	f7f7 f898 	bl	8000b58 <__aeabi_dcmpgt>
 8009a28:	b9c0      	cbnz	r0, 8009a5c <_dtoa_r+0x6bc>
 8009a2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a2e:	4620      	mov	r0, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7f7 f869 	bl	8000b08 <__aeabi_dcmpeq>
 8009a36:	b110      	cbz	r0, 8009a3e <_dtoa_r+0x69e>
 8009a38:	f018 0f01 	tst.w	r8, #1
 8009a3c:	d10e      	bne.n	8009a5c <_dtoa_r+0x6bc>
 8009a3e:	9902      	ldr	r1, [sp, #8]
 8009a40:	4648      	mov	r0, r9
 8009a42:	f000 fbbd 	bl	800a1c0 <_Bfree>
 8009a46:	2300      	movs	r3, #0
 8009a48:	7033      	strb	r3, [r6, #0]
 8009a4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a4c:	3701      	adds	r7, #1
 8009a4e:	601f      	str	r7, [r3, #0]
 8009a50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f000 824b 	beq.w	8009eee <_dtoa_r+0xb4e>
 8009a58:	601e      	str	r6, [r3, #0]
 8009a5a:	e248      	b.n	8009eee <_dtoa_r+0xb4e>
 8009a5c:	46b8      	mov	r8, r7
 8009a5e:	4633      	mov	r3, r6
 8009a60:	461e      	mov	r6, r3
 8009a62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a66:	2a39      	cmp	r2, #57	@ 0x39
 8009a68:	d106      	bne.n	8009a78 <_dtoa_r+0x6d8>
 8009a6a:	459a      	cmp	sl, r3
 8009a6c:	d1f8      	bne.n	8009a60 <_dtoa_r+0x6c0>
 8009a6e:	2230      	movs	r2, #48	@ 0x30
 8009a70:	f108 0801 	add.w	r8, r8, #1
 8009a74:	f88a 2000 	strb.w	r2, [sl]
 8009a78:	781a      	ldrb	r2, [r3, #0]
 8009a7a:	3201      	adds	r2, #1
 8009a7c:	701a      	strb	r2, [r3, #0]
 8009a7e:	e7a0      	b.n	80099c2 <_dtoa_r+0x622>
 8009a80:	4b6f      	ldr	r3, [pc, #444]	@ (8009c40 <_dtoa_r+0x8a0>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	f7f6 fdd8 	bl	8000638 <__aeabi_dmul>
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	460d      	mov	r5, r1
 8009a90:	f7f7 f83a 	bl	8000b08 <__aeabi_dcmpeq>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d09f      	beq.n	80099d8 <_dtoa_r+0x638>
 8009a98:	e7d1      	b.n	8009a3e <_dtoa_r+0x69e>
 8009a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a9c:	2a00      	cmp	r2, #0
 8009a9e:	f000 80ea 	beq.w	8009c76 <_dtoa_r+0x8d6>
 8009aa2:	9a07      	ldr	r2, [sp, #28]
 8009aa4:	2a01      	cmp	r2, #1
 8009aa6:	f300 80cd 	bgt.w	8009c44 <_dtoa_r+0x8a4>
 8009aaa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009aac:	2a00      	cmp	r2, #0
 8009aae:	f000 80c1 	beq.w	8009c34 <_dtoa_r+0x894>
 8009ab2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009ab6:	9c08      	ldr	r4, [sp, #32]
 8009ab8:	9e00      	ldr	r6, [sp, #0]
 8009aba:	9a00      	ldr	r2, [sp, #0]
 8009abc:	441a      	add	r2, r3
 8009abe:	9200      	str	r2, [sp, #0]
 8009ac0:	9a06      	ldr	r2, [sp, #24]
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	441a      	add	r2, r3
 8009ac6:	4648      	mov	r0, r9
 8009ac8:	9206      	str	r2, [sp, #24]
 8009aca:	f000 fc2d 	bl	800a328 <__i2b>
 8009ace:	4605      	mov	r5, r0
 8009ad0:	b166      	cbz	r6, 8009aec <_dtoa_r+0x74c>
 8009ad2:	9b06      	ldr	r3, [sp, #24]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	dd09      	ble.n	8009aec <_dtoa_r+0x74c>
 8009ad8:	42b3      	cmp	r3, r6
 8009ada:	9a00      	ldr	r2, [sp, #0]
 8009adc:	bfa8      	it	ge
 8009ade:	4633      	movge	r3, r6
 8009ae0:	1ad2      	subs	r2, r2, r3
 8009ae2:	9200      	str	r2, [sp, #0]
 8009ae4:	9a06      	ldr	r2, [sp, #24]
 8009ae6:	1af6      	subs	r6, r6, r3
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	9306      	str	r3, [sp, #24]
 8009aec:	9b08      	ldr	r3, [sp, #32]
 8009aee:	b30b      	cbz	r3, 8009b34 <_dtoa_r+0x794>
 8009af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 80c6 	beq.w	8009c84 <_dtoa_r+0x8e4>
 8009af8:	2c00      	cmp	r4, #0
 8009afa:	f000 80c0 	beq.w	8009c7e <_dtoa_r+0x8de>
 8009afe:	4629      	mov	r1, r5
 8009b00:	4622      	mov	r2, r4
 8009b02:	4648      	mov	r0, r9
 8009b04:	f000 fcc8 	bl	800a498 <__pow5mult>
 8009b08:	9a02      	ldr	r2, [sp, #8]
 8009b0a:	4601      	mov	r1, r0
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	4648      	mov	r0, r9
 8009b10:	f000 fc20 	bl	800a354 <__multiply>
 8009b14:	9902      	ldr	r1, [sp, #8]
 8009b16:	4680      	mov	r8, r0
 8009b18:	4648      	mov	r0, r9
 8009b1a:	f000 fb51 	bl	800a1c0 <_Bfree>
 8009b1e:	9b08      	ldr	r3, [sp, #32]
 8009b20:	1b1b      	subs	r3, r3, r4
 8009b22:	9308      	str	r3, [sp, #32]
 8009b24:	f000 80b1 	beq.w	8009c8a <_dtoa_r+0x8ea>
 8009b28:	9a08      	ldr	r2, [sp, #32]
 8009b2a:	4641      	mov	r1, r8
 8009b2c:	4648      	mov	r0, r9
 8009b2e:	f000 fcb3 	bl	800a498 <__pow5mult>
 8009b32:	9002      	str	r0, [sp, #8]
 8009b34:	2101      	movs	r1, #1
 8009b36:	4648      	mov	r0, r9
 8009b38:	f000 fbf6 	bl	800a328 <__i2b>
 8009b3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b3e:	4604      	mov	r4, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 81d8 	beq.w	8009ef6 <_dtoa_r+0xb56>
 8009b46:	461a      	mov	r2, r3
 8009b48:	4601      	mov	r1, r0
 8009b4a:	4648      	mov	r0, r9
 8009b4c:	f000 fca4 	bl	800a498 <__pow5mult>
 8009b50:	9b07      	ldr	r3, [sp, #28]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	4604      	mov	r4, r0
 8009b56:	f300 809f 	bgt.w	8009c98 <_dtoa_r+0x8f8>
 8009b5a:	9b04      	ldr	r3, [sp, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f040 8097 	bne.w	8009c90 <_dtoa_r+0x8f0>
 8009b62:	9b05      	ldr	r3, [sp, #20]
 8009b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f040 8093 	bne.w	8009c94 <_dtoa_r+0x8f4>
 8009b6e:	9b05      	ldr	r3, [sp, #20]
 8009b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b74:	0d1b      	lsrs	r3, r3, #20
 8009b76:	051b      	lsls	r3, r3, #20
 8009b78:	b133      	cbz	r3, 8009b88 <_dtoa_r+0x7e8>
 8009b7a:	9b00      	ldr	r3, [sp, #0]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	9b06      	ldr	r3, [sp, #24]
 8009b82:	3301      	adds	r3, #1
 8009b84:	9306      	str	r3, [sp, #24]
 8009b86:	2301      	movs	r3, #1
 8009b88:	9308      	str	r3, [sp, #32]
 8009b8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 81b8 	beq.w	8009f02 <_dtoa_r+0xb62>
 8009b92:	6923      	ldr	r3, [r4, #16]
 8009b94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b98:	6918      	ldr	r0, [r3, #16]
 8009b9a:	f000 fb79 	bl	800a290 <__hi0bits>
 8009b9e:	f1c0 0020 	rsb	r0, r0, #32
 8009ba2:	9b06      	ldr	r3, [sp, #24]
 8009ba4:	4418      	add	r0, r3
 8009ba6:	f010 001f 	ands.w	r0, r0, #31
 8009baa:	f000 8082 	beq.w	8009cb2 <_dtoa_r+0x912>
 8009bae:	f1c0 0320 	rsb	r3, r0, #32
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	dd73      	ble.n	8009c9e <_dtoa_r+0x8fe>
 8009bb6:	9b00      	ldr	r3, [sp, #0]
 8009bb8:	f1c0 001c 	rsb	r0, r0, #28
 8009bbc:	4403      	add	r3, r0
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	9b06      	ldr	r3, [sp, #24]
 8009bc2:	4403      	add	r3, r0
 8009bc4:	4406      	add	r6, r0
 8009bc6:	9306      	str	r3, [sp, #24]
 8009bc8:	9b00      	ldr	r3, [sp, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	dd05      	ble.n	8009bda <_dtoa_r+0x83a>
 8009bce:	9902      	ldr	r1, [sp, #8]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	4648      	mov	r0, r9
 8009bd4:	f000 fcba 	bl	800a54c <__lshift>
 8009bd8:	9002      	str	r0, [sp, #8]
 8009bda:	9b06      	ldr	r3, [sp, #24]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	dd05      	ble.n	8009bec <_dtoa_r+0x84c>
 8009be0:	4621      	mov	r1, r4
 8009be2:	461a      	mov	r2, r3
 8009be4:	4648      	mov	r0, r9
 8009be6:	f000 fcb1 	bl	800a54c <__lshift>
 8009bea:	4604      	mov	r4, r0
 8009bec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d061      	beq.n	8009cb6 <_dtoa_r+0x916>
 8009bf2:	9802      	ldr	r0, [sp, #8]
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	f000 fd15 	bl	800a624 <__mcmp>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	da5b      	bge.n	8009cb6 <_dtoa_r+0x916>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	9902      	ldr	r1, [sp, #8]
 8009c02:	220a      	movs	r2, #10
 8009c04:	4648      	mov	r0, r9
 8009c06:	f000 fafd 	bl	800a204 <__multadd>
 8009c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c0c:	9002      	str	r0, [sp, #8]
 8009c0e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 8177 	beq.w	8009f06 <_dtoa_r+0xb66>
 8009c18:	4629      	mov	r1, r5
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	220a      	movs	r2, #10
 8009c1e:	4648      	mov	r0, r9
 8009c20:	f000 faf0 	bl	800a204 <__multadd>
 8009c24:	f1bb 0f00 	cmp.w	fp, #0
 8009c28:	4605      	mov	r5, r0
 8009c2a:	dc6f      	bgt.n	8009d0c <_dtoa_r+0x96c>
 8009c2c:	9b07      	ldr	r3, [sp, #28]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	dc49      	bgt.n	8009cc6 <_dtoa_r+0x926>
 8009c32:	e06b      	b.n	8009d0c <_dtoa_r+0x96c>
 8009c34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009c3a:	e73c      	b.n	8009ab6 <_dtoa_r+0x716>
 8009c3c:	3fe00000 	.word	0x3fe00000
 8009c40:	40240000 	.word	0x40240000
 8009c44:	9b03      	ldr	r3, [sp, #12]
 8009c46:	1e5c      	subs	r4, r3, #1
 8009c48:	9b08      	ldr	r3, [sp, #32]
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	db09      	blt.n	8009c62 <_dtoa_r+0x8c2>
 8009c4e:	1b1c      	subs	r4, r3, r4
 8009c50:	9b03      	ldr	r3, [sp, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f6bf af30 	bge.w	8009ab8 <_dtoa_r+0x718>
 8009c58:	9b00      	ldr	r3, [sp, #0]
 8009c5a:	9a03      	ldr	r2, [sp, #12]
 8009c5c:	1a9e      	subs	r6, r3, r2
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e72b      	b.n	8009aba <_dtoa_r+0x71a>
 8009c62:	9b08      	ldr	r3, [sp, #32]
 8009c64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c66:	9408      	str	r4, [sp, #32]
 8009c68:	1ae3      	subs	r3, r4, r3
 8009c6a:	441a      	add	r2, r3
 8009c6c:	9e00      	ldr	r6, [sp, #0]
 8009c6e:	9b03      	ldr	r3, [sp, #12]
 8009c70:	920d      	str	r2, [sp, #52]	@ 0x34
 8009c72:	2400      	movs	r4, #0
 8009c74:	e721      	b.n	8009aba <_dtoa_r+0x71a>
 8009c76:	9c08      	ldr	r4, [sp, #32]
 8009c78:	9e00      	ldr	r6, [sp, #0]
 8009c7a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009c7c:	e728      	b.n	8009ad0 <_dtoa_r+0x730>
 8009c7e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009c82:	e751      	b.n	8009b28 <_dtoa_r+0x788>
 8009c84:	9a08      	ldr	r2, [sp, #32]
 8009c86:	9902      	ldr	r1, [sp, #8]
 8009c88:	e750      	b.n	8009b2c <_dtoa_r+0x78c>
 8009c8a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009c8e:	e751      	b.n	8009b34 <_dtoa_r+0x794>
 8009c90:	2300      	movs	r3, #0
 8009c92:	e779      	b.n	8009b88 <_dtoa_r+0x7e8>
 8009c94:	9b04      	ldr	r3, [sp, #16]
 8009c96:	e777      	b.n	8009b88 <_dtoa_r+0x7e8>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9308      	str	r3, [sp, #32]
 8009c9c:	e779      	b.n	8009b92 <_dtoa_r+0x7f2>
 8009c9e:	d093      	beq.n	8009bc8 <_dtoa_r+0x828>
 8009ca0:	9a00      	ldr	r2, [sp, #0]
 8009ca2:	331c      	adds	r3, #28
 8009ca4:	441a      	add	r2, r3
 8009ca6:	9200      	str	r2, [sp, #0]
 8009ca8:	9a06      	ldr	r2, [sp, #24]
 8009caa:	441a      	add	r2, r3
 8009cac:	441e      	add	r6, r3
 8009cae:	9206      	str	r2, [sp, #24]
 8009cb0:	e78a      	b.n	8009bc8 <_dtoa_r+0x828>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	e7f4      	b.n	8009ca0 <_dtoa_r+0x900>
 8009cb6:	9b03      	ldr	r3, [sp, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	46b8      	mov	r8, r7
 8009cbc:	dc20      	bgt.n	8009d00 <_dtoa_r+0x960>
 8009cbe:	469b      	mov	fp, r3
 8009cc0:	9b07      	ldr	r3, [sp, #28]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	dd1e      	ble.n	8009d04 <_dtoa_r+0x964>
 8009cc6:	f1bb 0f00 	cmp.w	fp, #0
 8009cca:	f47f adb1 	bne.w	8009830 <_dtoa_r+0x490>
 8009cce:	4621      	mov	r1, r4
 8009cd0:	465b      	mov	r3, fp
 8009cd2:	2205      	movs	r2, #5
 8009cd4:	4648      	mov	r0, r9
 8009cd6:	f000 fa95 	bl	800a204 <__multadd>
 8009cda:	4601      	mov	r1, r0
 8009cdc:	4604      	mov	r4, r0
 8009cde:	9802      	ldr	r0, [sp, #8]
 8009ce0:	f000 fca0 	bl	800a624 <__mcmp>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	f77f ada3 	ble.w	8009830 <_dtoa_r+0x490>
 8009cea:	4656      	mov	r6, sl
 8009cec:	2331      	movs	r3, #49	@ 0x31
 8009cee:	f806 3b01 	strb.w	r3, [r6], #1
 8009cf2:	f108 0801 	add.w	r8, r8, #1
 8009cf6:	e59f      	b.n	8009838 <_dtoa_r+0x498>
 8009cf8:	9c03      	ldr	r4, [sp, #12]
 8009cfa:	46b8      	mov	r8, r7
 8009cfc:	4625      	mov	r5, r4
 8009cfe:	e7f4      	b.n	8009cea <_dtoa_r+0x94a>
 8009d00:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 8101 	beq.w	8009f0e <_dtoa_r+0xb6e>
 8009d0c:	2e00      	cmp	r6, #0
 8009d0e:	dd05      	ble.n	8009d1c <_dtoa_r+0x97c>
 8009d10:	4629      	mov	r1, r5
 8009d12:	4632      	mov	r2, r6
 8009d14:	4648      	mov	r0, r9
 8009d16:	f000 fc19 	bl	800a54c <__lshift>
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	9b08      	ldr	r3, [sp, #32]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d05c      	beq.n	8009ddc <_dtoa_r+0xa3c>
 8009d22:	6869      	ldr	r1, [r5, #4]
 8009d24:	4648      	mov	r0, r9
 8009d26:	f000 fa0b 	bl	800a140 <_Balloc>
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	b928      	cbnz	r0, 8009d3a <_dtoa_r+0x99a>
 8009d2e:	4b82      	ldr	r3, [pc, #520]	@ (8009f38 <_dtoa_r+0xb98>)
 8009d30:	4602      	mov	r2, r0
 8009d32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d36:	f7ff bb4a 	b.w	80093ce <_dtoa_r+0x2e>
 8009d3a:	692a      	ldr	r2, [r5, #16]
 8009d3c:	3202      	adds	r2, #2
 8009d3e:	0092      	lsls	r2, r2, #2
 8009d40:	f105 010c 	add.w	r1, r5, #12
 8009d44:	300c      	adds	r0, #12
 8009d46:	f000 ffa3 	bl	800ac90 <memcpy>
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4648      	mov	r0, r9
 8009d50:	f000 fbfc 	bl	800a54c <__lshift>
 8009d54:	f10a 0301 	add.w	r3, sl, #1
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	eb0a 030b 	add.w	r3, sl, fp
 8009d5e:	9308      	str	r3, [sp, #32]
 8009d60:	9b04      	ldr	r3, [sp, #16]
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	462f      	mov	r7, r5
 8009d68:	9306      	str	r3, [sp, #24]
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	9b00      	ldr	r3, [sp, #0]
 8009d6e:	9802      	ldr	r0, [sp, #8]
 8009d70:	4621      	mov	r1, r4
 8009d72:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009d76:	f7ff fa8a 	bl	800928e <quorem>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	3330      	adds	r3, #48	@ 0x30
 8009d7e:	9003      	str	r0, [sp, #12]
 8009d80:	4639      	mov	r1, r7
 8009d82:	9802      	ldr	r0, [sp, #8]
 8009d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d86:	f000 fc4d 	bl	800a624 <__mcmp>
 8009d8a:	462a      	mov	r2, r5
 8009d8c:	9004      	str	r0, [sp, #16]
 8009d8e:	4621      	mov	r1, r4
 8009d90:	4648      	mov	r0, r9
 8009d92:	f000 fc63 	bl	800a65c <__mdiff>
 8009d96:	68c2      	ldr	r2, [r0, #12]
 8009d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	bb02      	cbnz	r2, 8009de0 <_dtoa_r+0xa40>
 8009d9e:	4601      	mov	r1, r0
 8009da0:	9802      	ldr	r0, [sp, #8]
 8009da2:	f000 fc3f 	bl	800a624 <__mcmp>
 8009da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da8:	4602      	mov	r2, r0
 8009daa:	4631      	mov	r1, r6
 8009dac:	4648      	mov	r0, r9
 8009dae:	920c      	str	r2, [sp, #48]	@ 0x30
 8009db0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009db2:	f000 fa05 	bl	800a1c0 <_Bfree>
 8009db6:	9b07      	ldr	r3, [sp, #28]
 8009db8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009dba:	9e00      	ldr	r6, [sp, #0]
 8009dbc:	ea42 0103 	orr.w	r1, r2, r3
 8009dc0:	9b06      	ldr	r3, [sp, #24]
 8009dc2:	4319      	orrs	r1, r3
 8009dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc6:	d10d      	bne.n	8009de4 <_dtoa_r+0xa44>
 8009dc8:	2b39      	cmp	r3, #57	@ 0x39
 8009dca:	d027      	beq.n	8009e1c <_dtoa_r+0xa7c>
 8009dcc:	9a04      	ldr	r2, [sp, #16]
 8009dce:	2a00      	cmp	r2, #0
 8009dd0:	dd01      	ble.n	8009dd6 <_dtoa_r+0xa36>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	3331      	adds	r3, #49	@ 0x31
 8009dd6:	f88b 3000 	strb.w	r3, [fp]
 8009dda:	e52e      	b.n	800983a <_dtoa_r+0x49a>
 8009ddc:	4628      	mov	r0, r5
 8009dde:	e7b9      	b.n	8009d54 <_dtoa_r+0x9b4>
 8009de0:	2201      	movs	r2, #1
 8009de2:	e7e2      	b.n	8009daa <_dtoa_r+0xa0a>
 8009de4:	9904      	ldr	r1, [sp, #16]
 8009de6:	2900      	cmp	r1, #0
 8009de8:	db04      	blt.n	8009df4 <_dtoa_r+0xa54>
 8009dea:	9807      	ldr	r0, [sp, #28]
 8009dec:	4301      	orrs	r1, r0
 8009dee:	9806      	ldr	r0, [sp, #24]
 8009df0:	4301      	orrs	r1, r0
 8009df2:	d120      	bne.n	8009e36 <_dtoa_r+0xa96>
 8009df4:	2a00      	cmp	r2, #0
 8009df6:	ddee      	ble.n	8009dd6 <_dtoa_r+0xa36>
 8009df8:	9902      	ldr	r1, [sp, #8]
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	4648      	mov	r0, r9
 8009e00:	f000 fba4 	bl	800a54c <__lshift>
 8009e04:	4621      	mov	r1, r4
 8009e06:	9002      	str	r0, [sp, #8]
 8009e08:	f000 fc0c 	bl	800a624 <__mcmp>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	9b00      	ldr	r3, [sp, #0]
 8009e10:	dc02      	bgt.n	8009e18 <_dtoa_r+0xa78>
 8009e12:	d1e0      	bne.n	8009dd6 <_dtoa_r+0xa36>
 8009e14:	07da      	lsls	r2, r3, #31
 8009e16:	d5de      	bpl.n	8009dd6 <_dtoa_r+0xa36>
 8009e18:	2b39      	cmp	r3, #57	@ 0x39
 8009e1a:	d1da      	bne.n	8009dd2 <_dtoa_r+0xa32>
 8009e1c:	2339      	movs	r3, #57	@ 0x39
 8009e1e:	f88b 3000 	strb.w	r3, [fp]
 8009e22:	4633      	mov	r3, r6
 8009e24:	461e      	mov	r6, r3
 8009e26:	3b01      	subs	r3, #1
 8009e28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e2c:	2a39      	cmp	r2, #57	@ 0x39
 8009e2e:	d04e      	beq.n	8009ece <_dtoa_r+0xb2e>
 8009e30:	3201      	adds	r2, #1
 8009e32:	701a      	strb	r2, [r3, #0]
 8009e34:	e501      	b.n	800983a <_dtoa_r+0x49a>
 8009e36:	2a00      	cmp	r2, #0
 8009e38:	dd03      	ble.n	8009e42 <_dtoa_r+0xaa2>
 8009e3a:	2b39      	cmp	r3, #57	@ 0x39
 8009e3c:	d0ee      	beq.n	8009e1c <_dtoa_r+0xa7c>
 8009e3e:	3301      	adds	r3, #1
 8009e40:	e7c9      	b.n	8009dd6 <_dtoa_r+0xa36>
 8009e42:	9a00      	ldr	r2, [sp, #0]
 8009e44:	9908      	ldr	r1, [sp, #32]
 8009e46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e4a:	428a      	cmp	r2, r1
 8009e4c:	d028      	beq.n	8009ea0 <_dtoa_r+0xb00>
 8009e4e:	9902      	ldr	r1, [sp, #8]
 8009e50:	2300      	movs	r3, #0
 8009e52:	220a      	movs	r2, #10
 8009e54:	4648      	mov	r0, r9
 8009e56:	f000 f9d5 	bl	800a204 <__multadd>
 8009e5a:	42af      	cmp	r7, r5
 8009e5c:	9002      	str	r0, [sp, #8]
 8009e5e:	f04f 0300 	mov.w	r3, #0
 8009e62:	f04f 020a 	mov.w	r2, #10
 8009e66:	4639      	mov	r1, r7
 8009e68:	4648      	mov	r0, r9
 8009e6a:	d107      	bne.n	8009e7c <_dtoa_r+0xadc>
 8009e6c:	f000 f9ca 	bl	800a204 <__multadd>
 8009e70:	4607      	mov	r7, r0
 8009e72:	4605      	mov	r5, r0
 8009e74:	9b00      	ldr	r3, [sp, #0]
 8009e76:	3301      	adds	r3, #1
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	e777      	b.n	8009d6c <_dtoa_r+0x9cc>
 8009e7c:	f000 f9c2 	bl	800a204 <__multadd>
 8009e80:	4629      	mov	r1, r5
 8009e82:	4607      	mov	r7, r0
 8009e84:	2300      	movs	r3, #0
 8009e86:	220a      	movs	r2, #10
 8009e88:	4648      	mov	r0, r9
 8009e8a:	f000 f9bb 	bl	800a204 <__multadd>
 8009e8e:	4605      	mov	r5, r0
 8009e90:	e7f0      	b.n	8009e74 <_dtoa_r+0xad4>
 8009e92:	f1bb 0f00 	cmp.w	fp, #0
 8009e96:	bfcc      	ite	gt
 8009e98:	465e      	movgt	r6, fp
 8009e9a:	2601      	movle	r6, #1
 8009e9c:	4456      	add	r6, sl
 8009e9e:	2700      	movs	r7, #0
 8009ea0:	9902      	ldr	r1, [sp, #8]
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	4648      	mov	r0, r9
 8009ea8:	f000 fb50 	bl	800a54c <__lshift>
 8009eac:	4621      	mov	r1, r4
 8009eae:	9002      	str	r0, [sp, #8]
 8009eb0:	f000 fbb8 	bl	800a624 <__mcmp>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	dcb4      	bgt.n	8009e22 <_dtoa_r+0xa82>
 8009eb8:	d102      	bne.n	8009ec0 <_dtoa_r+0xb20>
 8009eba:	9b00      	ldr	r3, [sp, #0]
 8009ebc:	07db      	lsls	r3, r3, #31
 8009ebe:	d4b0      	bmi.n	8009e22 <_dtoa_r+0xa82>
 8009ec0:	4633      	mov	r3, r6
 8009ec2:	461e      	mov	r6, r3
 8009ec4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ec8:	2a30      	cmp	r2, #48	@ 0x30
 8009eca:	d0fa      	beq.n	8009ec2 <_dtoa_r+0xb22>
 8009ecc:	e4b5      	b.n	800983a <_dtoa_r+0x49a>
 8009ece:	459a      	cmp	sl, r3
 8009ed0:	d1a8      	bne.n	8009e24 <_dtoa_r+0xa84>
 8009ed2:	2331      	movs	r3, #49	@ 0x31
 8009ed4:	f108 0801 	add.w	r8, r8, #1
 8009ed8:	f88a 3000 	strb.w	r3, [sl]
 8009edc:	e4ad      	b.n	800983a <_dtoa_r+0x49a>
 8009ede:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ee0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009f3c <_dtoa_r+0xb9c>
 8009ee4:	b11b      	cbz	r3, 8009eee <_dtoa_r+0xb4e>
 8009ee6:	f10a 0308 	add.w	r3, sl, #8
 8009eea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009eec:	6013      	str	r3, [r2, #0]
 8009eee:	4650      	mov	r0, sl
 8009ef0:	b017      	add	sp, #92	@ 0x5c
 8009ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef6:	9b07      	ldr	r3, [sp, #28]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	f77f ae2e 	ble.w	8009b5a <_dtoa_r+0x7ba>
 8009efe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f00:	9308      	str	r3, [sp, #32]
 8009f02:	2001      	movs	r0, #1
 8009f04:	e64d      	b.n	8009ba2 <_dtoa_r+0x802>
 8009f06:	f1bb 0f00 	cmp.w	fp, #0
 8009f0a:	f77f aed9 	ble.w	8009cc0 <_dtoa_r+0x920>
 8009f0e:	4656      	mov	r6, sl
 8009f10:	9802      	ldr	r0, [sp, #8]
 8009f12:	4621      	mov	r1, r4
 8009f14:	f7ff f9bb 	bl	800928e <quorem>
 8009f18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009f1c:	f806 3b01 	strb.w	r3, [r6], #1
 8009f20:	eba6 020a 	sub.w	r2, r6, sl
 8009f24:	4593      	cmp	fp, r2
 8009f26:	ddb4      	ble.n	8009e92 <_dtoa_r+0xaf2>
 8009f28:	9902      	ldr	r1, [sp, #8]
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	220a      	movs	r2, #10
 8009f2e:	4648      	mov	r0, r9
 8009f30:	f000 f968 	bl	800a204 <__multadd>
 8009f34:	9002      	str	r0, [sp, #8]
 8009f36:	e7eb      	b.n	8009f10 <_dtoa_r+0xb70>
 8009f38:	0800c814 	.word	0x0800c814
 8009f3c:	0800c798 	.word	0x0800c798

08009f40 <_free_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4605      	mov	r5, r0
 8009f44:	2900      	cmp	r1, #0
 8009f46:	d041      	beq.n	8009fcc <_free_r+0x8c>
 8009f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f4c:	1f0c      	subs	r4, r1, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	bfb8      	it	lt
 8009f52:	18e4      	addlt	r4, r4, r3
 8009f54:	f000 f8e8 	bl	800a128 <__malloc_lock>
 8009f58:	4a1d      	ldr	r2, [pc, #116]	@ (8009fd0 <_free_r+0x90>)
 8009f5a:	6813      	ldr	r3, [r2, #0]
 8009f5c:	b933      	cbnz	r3, 8009f6c <_free_r+0x2c>
 8009f5e:	6063      	str	r3, [r4, #4]
 8009f60:	6014      	str	r4, [r2, #0]
 8009f62:	4628      	mov	r0, r5
 8009f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f68:	f000 b8e4 	b.w	800a134 <__malloc_unlock>
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	d908      	bls.n	8009f82 <_free_r+0x42>
 8009f70:	6820      	ldr	r0, [r4, #0]
 8009f72:	1821      	adds	r1, r4, r0
 8009f74:	428b      	cmp	r3, r1
 8009f76:	bf01      	itttt	eq
 8009f78:	6819      	ldreq	r1, [r3, #0]
 8009f7a:	685b      	ldreq	r3, [r3, #4]
 8009f7c:	1809      	addeq	r1, r1, r0
 8009f7e:	6021      	streq	r1, [r4, #0]
 8009f80:	e7ed      	b.n	8009f5e <_free_r+0x1e>
 8009f82:	461a      	mov	r2, r3
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	b10b      	cbz	r3, 8009f8c <_free_r+0x4c>
 8009f88:	42a3      	cmp	r3, r4
 8009f8a:	d9fa      	bls.n	8009f82 <_free_r+0x42>
 8009f8c:	6811      	ldr	r1, [r2, #0]
 8009f8e:	1850      	adds	r0, r2, r1
 8009f90:	42a0      	cmp	r0, r4
 8009f92:	d10b      	bne.n	8009fac <_free_r+0x6c>
 8009f94:	6820      	ldr	r0, [r4, #0]
 8009f96:	4401      	add	r1, r0
 8009f98:	1850      	adds	r0, r2, r1
 8009f9a:	4283      	cmp	r3, r0
 8009f9c:	6011      	str	r1, [r2, #0]
 8009f9e:	d1e0      	bne.n	8009f62 <_free_r+0x22>
 8009fa0:	6818      	ldr	r0, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	6053      	str	r3, [r2, #4]
 8009fa6:	4408      	add	r0, r1
 8009fa8:	6010      	str	r0, [r2, #0]
 8009faa:	e7da      	b.n	8009f62 <_free_r+0x22>
 8009fac:	d902      	bls.n	8009fb4 <_free_r+0x74>
 8009fae:	230c      	movs	r3, #12
 8009fb0:	602b      	str	r3, [r5, #0]
 8009fb2:	e7d6      	b.n	8009f62 <_free_r+0x22>
 8009fb4:	6820      	ldr	r0, [r4, #0]
 8009fb6:	1821      	adds	r1, r4, r0
 8009fb8:	428b      	cmp	r3, r1
 8009fba:	bf04      	itt	eq
 8009fbc:	6819      	ldreq	r1, [r3, #0]
 8009fbe:	685b      	ldreq	r3, [r3, #4]
 8009fc0:	6063      	str	r3, [r4, #4]
 8009fc2:	bf04      	itt	eq
 8009fc4:	1809      	addeq	r1, r1, r0
 8009fc6:	6021      	streq	r1, [r4, #0]
 8009fc8:	6054      	str	r4, [r2, #4]
 8009fca:	e7ca      	b.n	8009f62 <_free_r+0x22>
 8009fcc:	bd38      	pop	{r3, r4, r5, pc}
 8009fce:	bf00      	nop
 8009fd0:	2003dffc 	.word	0x2003dffc

08009fd4 <malloc>:
 8009fd4:	4b02      	ldr	r3, [pc, #8]	@ (8009fe0 <malloc+0xc>)
 8009fd6:	4601      	mov	r1, r0
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	f000 b825 	b.w	800a028 <_malloc_r>
 8009fde:	bf00      	nop
 8009fe0:	20000080 	.word	0x20000080

08009fe4 <sbrk_aligned>:
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	4e0f      	ldr	r6, [pc, #60]	@ (800a024 <sbrk_aligned+0x40>)
 8009fe8:	460c      	mov	r4, r1
 8009fea:	6831      	ldr	r1, [r6, #0]
 8009fec:	4605      	mov	r5, r0
 8009fee:	b911      	cbnz	r1, 8009ff6 <sbrk_aligned+0x12>
 8009ff0:	f000 fe3e 	bl	800ac70 <_sbrk_r>
 8009ff4:	6030      	str	r0, [r6, #0]
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f000 fe39 	bl	800ac70 <_sbrk_r>
 8009ffe:	1c43      	adds	r3, r0, #1
 800a000:	d103      	bne.n	800a00a <sbrk_aligned+0x26>
 800a002:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a006:	4620      	mov	r0, r4
 800a008:	bd70      	pop	{r4, r5, r6, pc}
 800a00a:	1cc4      	adds	r4, r0, #3
 800a00c:	f024 0403 	bic.w	r4, r4, #3
 800a010:	42a0      	cmp	r0, r4
 800a012:	d0f8      	beq.n	800a006 <sbrk_aligned+0x22>
 800a014:	1a21      	subs	r1, r4, r0
 800a016:	4628      	mov	r0, r5
 800a018:	f000 fe2a 	bl	800ac70 <_sbrk_r>
 800a01c:	3001      	adds	r0, #1
 800a01e:	d1f2      	bne.n	800a006 <sbrk_aligned+0x22>
 800a020:	e7ef      	b.n	800a002 <sbrk_aligned+0x1e>
 800a022:	bf00      	nop
 800a024:	2003dff8 	.word	0x2003dff8

0800a028 <_malloc_r>:
 800a028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a02c:	1ccd      	adds	r5, r1, #3
 800a02e:	f025 0503 	bic.w	r5, r5, #3
 800a032:	3508      	adds	r5, #8
 800a034:	2d0c      	cmp	r5, #12
 800a036:	bf38      	it	cc
 800a038:	250c      	movcc	r5, #12
 800a03a:	2d00      	cmp	r5, #0
 800a03c:	4606      	mov	r6, r0
 800a03e:	db01      	blt.n	800a044 <_malloc_r+0x1c>
 800a040:	42a9      	cmp	r1, r5
 800a042:	d904      	bls.n	800a04e <_malloc_r+0x26>
 800a044:	230c      	movs	r3, #12
 800a046:	6033      	str	r3, [r6, #0]
 800a048:	2000      	movs	r0, #0
 800a04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a04e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a124 <_malloc_r+0xfc>
 800a052:	f000 f869 	bl	800a128 <__malloc_lock>
 800a056:	f8d8 3000 	ldr.w	r3, [r8]
 800a05a:	461c      	mov	r4, r3
 800a05c:	bb44      	cbnz	r4, 800a0b0 <_malloc_r+0x88>
 800a05e:	4629      	mov	r1, r5
 800a060:	4630      	mov	r0, r6
 800a062:	f7ff ffbf 	bl	8009fe4 <sbrk_aligned>
 800a066:	1c43      	adds	r3, r0, #1
 800a068:	4604      	mov	r4, r0
 800a06a:	d158      	bne.n	800a11e <_malloc_r+0xf6>
 800a06c:	f8d8 4000 	ldr.w	r4, [r8]
 800a070:	4627      	mov	r7, r4
 800a072:	2f00      	cmp	r7, #0
 800a074:	d143      	bne.n	800a0fe <_malloc_r+0xd6>
 800a076:	2c00      	cmp	r4, #0
 800a078:	d04b      	beq.n	800a112 <_malloc_r+0xea>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	4639      	mov	r1, r7
 800a07e:	4630      	mov	r0, r6
 800a080:	eb04 0903 	add.w	r9, r4, r3
 800a084:	f000 fdf4 	bl	800ac70 <_sbrk_r>
 800a088:	4581      	cmp	r9, r0
 800a08a:	d142      	bne.n	800a112 <_malloc_r+0xea>
 800a08c:	6821      	ldr	r1, [r4, #0]
 800a08e:	1a6d      	subs	r5, r5, r1
 800a090:	4629      	mov	r1, r5
 800a092:	4630      	mov	r0, r6
 800a094:	f7ff ffa6 	bl	8009fe4 <sbrk_aligned>
 800a098:	3001      	adds	r0, #1
 800a09a:	d03a      	beq.n	800a112 <_malloc_r+0xea>
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	442b      	add	r3, r5
 800a0a0:	6023      	str	r3, [r4, #0]
 800a0a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a0a6:	685a      	ldr	r2, [r3, #4]
 800a0a8:	bb62      	cbnz	r2, 800a104 <_malloc_r+0xdc>
 800a0aa:	f8c8 7000 	str.w	r7, [r8]
 800a0ae:	e00f      	b.n	800a0d0 <_malloc_r+0xa8>
 800a0b0:	6822      	ldr	r2, [r4, #0]
 800a0b2:	1b52      	subs	r2, r2, r5
 800a0b4:	d420      	bmi.n	800a0f8 <_malloc_r+0xd0>
 800a0b6:	2a0b      	cmp	r2, #11
 800a0b8:	d917      	bls.n	800a0ea <_malloc_r+0xc2>
 800a0ba:	1961      	adds	r1, r4, r5
 800a0bc:	42a3      	cmp	r3, r4
 800a0be:	6025      	str	r5, [r4, #0]
 800a0c0:	bf18      	it	ne
 800a0c2:	6059      	strne	r1, [r3, #4]
 800a0c4:	6863      	ldr	r3, [r4, #4]
 800a0c6:	bf08      	it	eq
 800a0c8:	f8c8 1000 	streq.w	r1, [r8]
 800a0cc:	5162      	str	r2, [r4, r5]
 800a0ce:	604b      	str	r3, [r1, #4]
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f000 f82f 	bl	800a134 <__malloc_unlock>
 800a0d6:	f104 000b 	add.w	r0, r4, #11
 800a0da:	1d23      	adds	r3, r4, #4
 800a0dc:	f020 0007 	bic.w	r0, r0, #7
 800a0e0:	1ac2      	subs	r2, r0, r3
 800a0e2:	bf1c      	itt	ne
 800a0e4:	1a1b      	subne	r3, r3, r0
 800a0e6:	50a3      	strne	r3, [r4, r2]
 800a0e8:	e7af      	b.n	800a04a <_malloc_r+0x22>
 800a0ea:	6862      	ldr	r2, [r4, #4]
 800a0ec:	42a3      	cmp	r3, r4
 800a0ee:	bf0c      	ite	eq
 800a0f0:	f8c8 2000 	streq.w	r2, [r8]
 800a0f4:	605a      	strne	r2, [r3, #4]
 800a0f6:	e7eb      	b.n	800a0d0 <_malloc_r+0xa8>
 800a0f8:	4623      	mov	r3, r4
 800a0fa:	6864      	ldr	r4, [r4, #4]
 800a0fc:	e7ae      	b.n	800a05c <_malloc_r+0x34>
 800a0fe:	463c      	mov	r4, r7
 800a100:	687f      	ldr	r7, [r7, #4]
 800a102:	e7b6      	b.n	800a072 <_malloc_r+0x4a>
 800a104:	461a      	mov	r2, r3
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	42a3      	cmp	r3, r4
 800a10a:	d1fb      	bne.n	800a104 <_malloc_r+0xdc>
 800a10c:	2300      	movs	r3, #0
 800a10e:	6053      	str	r3, [r2, #4]
 800a110:	e7de      	b.n	800a0d0 <_malloc_r+0xa8>
 800a112:	230c      	movs	r3, #12
 800a114:	6033      	str	r3, [r6, #0]
 800a116:	4630      	mov	r0, r6
 800a118:	f000 f80c 	bl	800a134 <__malloc_unlock>
 800a11c:	e794      	b.n	800a048 <_malloc_r+0x20>
 800a11e:	6005      	str	r5, [r0, #0]
 800a120:	e7d6      	b.n	800a0d0 <_malloc_r+0xa8>
 800a122:	bf00      	nop
 800a124:	2003dffc 	.word	0x2003dffc

0800a128 <__malloc_lock>:
 800a128:	4801      	ldr	r0, [pc, #4]	@ (800a130 <__malloc_lock+0x8>)
 800a12a:	f7ff b8ae 	b.w	800928a <__retarget_lock_acquire_recursive>
 800a12e:	bf00      	nop
 800a130:	2003dff4 	.word	0x2003dff4

0800a134 <__malloc_unlock>:
 800a134:	4801      	ldr	r0, [pc, #4]	@ (800a13c <__malloc_unlock+0x8>)
 800a136:	f7ff b8a9 	b.w	800928c <__retarget_lock_release_recursive>
 800a13a:	bf00      	nop
 800a13c:	2003dff4 	.word	0x2003dff4

0800a140 <_Balloc>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	69c6      	ldr	r6, [r0, #28]
 800a144:	4604      	mov	r4, r0
 800a146:	460d      	mov	r5, r1
 800a148:	b976      	cbnz	r6, 800a168 <_Balloc+0x28>
 800a14a:	2010      	movs	r0, #16
 800a14c:	f7ff ff42 	bl	8009fd4 <malloc>
 800a150:	4602      	mov	r2, r0
 800a152:	61e0      	str	r0, [r4, #28]
 800a154:	b920      	cbnz	r0, 800a160 <_Balloc+0x20>
 800a156:	4b18      	ldr	r3, [pc, #96]	@ (800a1b8 <_Balloc+0x78>)
 800a158:	4818      	ldr	r0, [pc, #96]	@ (800a1bc <_Balloc+0x7c>)
 800a15a:	216b      	movs	r1, #107	@ 0x6b
 800a15c:	f000 fda6 	bl	800acac <__assert_func>
 800a160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a164:	6006      	str	r6, [r0, #0]
 800a166:	60c6      	str	r6, [r0, #12]
 800a168:	69e6      	ldr	r6, [r4, #28]
 800a16a:	68f3      	ldr	r3, [r6, #12]
 800a16c:	b183      	cbz	r3, 800a190 <_Balloc+0x50>
 800a16e:	69e3      	ldr	r3, [r4, #28]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a176:	b9b8      	cbnz	r0, 800a1a8 <_Balloc+0x68>
 800a178:	2101      	movs	r1, #1
 800a17a:	fa01 f605 	lsl.w	r6, r1, r5
 800a17e:	1d72      	adds	r2, r6, #5
 800a180:	0092      	lsls	r2, r2, #2
 800a182:	4620      	mov	r0, r4
 800a184:	f000 fdb0 	bl	800ace8 <_calloc_r>
 800a188:	b160      	cbz	r0, 800a1a4 <_Balloc+0x64>
 800a18a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a18e:	e00e      	b.n	800a1ae <_Balloc+0x6e>
 800a190:	2221      	movs	r2, #33	@ 0x21
 800a192:	2104      	movs	r1, #4
 800a194:	4620      	mov	r0, r4
 800a196:	f000 fda7 	bl	800ace8 <_calloc_r>
 800a19a:	69e3      	ldr	r3, [r4, #28]
 800a19c:	60f0      	str	r0, [r6, #12]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1e4      	bne.n	800a16e <_Balloc+0x2e>
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}
 800a1a8:	6802      	ldr	r2, [r0, #0]
 800a1aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1b4:	e7f7      	b.n	800a1a6 <_Balloc+0x66>
 800a1b6:	bf00      	nop
 800a1b8:	0800c7a5 	.word	0x0800c7a5
 800a1bc:	0800c825 	.word	0x0800c825

0800a1c0 <_Bfree>:
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	69c6      	ldr	r6, [r0, #28]
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	b976      	cbnz	r6, 800a1e8 <_Bfree+0x28>
 800a1ca:	2010      	movs	r0, #16
 800a1cc:	f7ff ff02 	bl	8009fd4 <malloc>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	61e8      	str	r0, [r5, #28]
 800a1d4:	b920      	cbnz	r0, 800a1e0 <_Bfree+0x20>
 800a1d6:	4b09      	ldr	r3, [pc, #36]	@ (800a1fc <_Bfree+0x3c>)
 800a1d8:	4809      	ldr	r0, [pc, #36]	@ (800a200 <_Bfree+0x40>)
 800a1da:	218f      	movs	r1, #143	@ 0x8f
 800a1dc:	f000 fd66 	bl	800acac <__assert_func>
 800a1e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1e4:	6006      	str	r6, [r0, #0]
 800a1e6:	60c6      	str	r6, [r0, #12]
 800a1e8:	b13c      	cbz	r4, 800a1fa <_Bfree+0x3a>
 800a1ea:	69eb      	ldr	r3, [r5, #28]
 800a1ec:	6862      	ldr	r2, [r4, #4]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1f4:	6021      	str	r1, [r4, #0]
 800a1f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1fa:	bd70      	pop	{r4, r5, r6, pc}
 800a1fc:	0800c7a5 	.word	0x0800c7a5
 800a200:	0800c825 	.word	0x0800c825

0800a204 <__multadd>:
 800a204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a208:	690d      	ldr	r5, [r1, #16]
 800a20a:	4607      	mov	r7, r0
 800a20c:	460c      	mov	r4, r1
 800a20e:	461e      	mov	r6, r3
 800a210:	f101 0c14 	add.w	ip, r1, #20
 800a214:	2000      	movs	r0, #0
 800a216:	f8dc 3000 	ldr.w	r3, [ip]
 800a21a:	b299      	uxth	r1, r3
 800a21c:	fb02 6101 	mla	r1, r2, r1, r6
 800a220:	0c1e      	lsrs	r6, r3, #16
 800a222:	0c0b      	lsrs	r3, r1, #16
 800a224:	fb02 3306 	mla	r3, r2, r6, r3
 800a228:	b289      	uxth	r1, r1
 800a22a:	3001      	adds	r0, #1
 800a22c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a230:	4285      	cmp	r5, r0
 800a232:	f84c 1b04 	str.w	r1, [ip], #4
 800a236:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a23a:	dcec      	bgt.n	800a216 <__multadd+0x12>
 800a23c:	b30e      	cbz	r6, 800a282 <__multadd+0x7e>
 800a23e:	68a3      	ldr	r3, [r4, #8]
 800a240:	42ab      	cmp	r3, r5
 800a242:	dc19      	bgt.n	800a278 <__multadd+0x74>
 800a244:	6861      	ldr	r1, [r4, #4]
 800a246:	4638      	mov	r0, r7
 800a248:	3101      	adds	r1, #1
 800a24a:	f7ff ff79 	bl	800a140 <_Balloc>
 800a24e:	4680      	mov	r8, r0
 800a250:	b928      	cbnz	r0, 800a25e <__multadd+0x5a>
 800a252:	4602      	mov	r2, r0
 800a254:	4b0c      	ldr	r3, [pc, #48]	@ (800a288 <__multadd+0x84>)
 800a256:	480d      	ldr	r0, [pc, #52]	@ (800a28c <__multadd+0x88>)
 800a258:	21ba      	movs	r1, #186	@ 0xba
 800a25a:	f000 fd27 	bl	800acac <__assert_func>
 800a25e:	6922      	ldr	r2, [r4, #16]
 800a260:	3202      	adds	r2, #2
 800a262:	f104 010c 	add.w	r1, r4, #12
 800a266:	0092      	lsls	r2, r2, #2
 800a268:	300c      	adds	r0, #12
 800a26a:	f000 fd11 	bl	800ac90 <memcpy>
 800a26e:	4621      	mov	r1, r4
 800a270:	4638      	mov	r0, r7
 800a272:	f7ff ffa5 	bl	800a1c0 <_Bfree>
 800a276:	4644      	mov	r4, r8
 800a278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a27c:	3501      	adds	r5, #1
 800a27e:	615e      	str	r6, [r3, #20]
 800a280:	6125      	str	r5, [r4, #16]
 800a282:	4620      	mov	r0, r4
 800a284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a288:	0800c814 	.word	0x0800c814
 800a28c:	0800c825 	.word	0x0800c825

0800a290 <__hi0bits>:
 800a290:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a294:	4603      	mov	r3, r0
 800a296:	bf36      	itet	cc
 800a298:	0403      	lslcc	r3, r0, #16
 800a29a:	2000      	movcs	r0, #0
 800a29c:	2010      	movcc	r0, #16
 800a29e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2a2:	bf3c      	itt	cc
 800a2a4:	021b      	lslcc	r3, r3, #8
 800a2a6:	3008      	addcc	r0, #8
 800a2a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2ac:	bf3c      	itt	cc
 800a2ae:	011b      	lslcc	r3, r3, #4
 800a2b0:	3004      	addcc	r0, #4
 800a2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2b6:	bf3c      	itt	cc
 800a2b8:	009b      	lslcc	r3, r3, #2
 800a2ba:	3002      	addcc	r0, #2
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	db05      	blt.n	800a2cc <__hi0bits+0x3c>
 800a2c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2c4:	f100 0001 	add.w	r0, r0, #1
 800a2c8:	bf08      	it	eq
 800a2ca:	2020      	moveq	r0, #32
 800a2cc:	4770      	bx	lr

0800a2ce <__lo0bits>:
 800a2ce:	6803      	ldr	r3, [r0, #0]
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	f013 0007 	ands.w	r0, r3, #7
 800a2d6:	d00b      	beq.n	800a2f0 <__lo0bits+0x22>
 800a2d8:	07d9      	lsls	r1, r3, #31
 800a2da:	d421      	bmi.n	800a320 <__lo0bits+0x52>
 800a2dc:	0798      	lsls	r0, r3, #30
 800a2de:	bf49      	itett	mi
 800a2e0:	085b      	lsrmi	r3, r3, #1
 800a2e2:	089b      	lsrpl	r3, r3, #2
 800a2e4:	2001      	movmi	r0, #1
 800a2e6:	6013      	strmi	r3, [r2, #0]
 800a2e8:	bf5c      	itt	pl
 800a2ea:	6013      	strpl	r3, [r2, #0]
 800a2ec:	2002      	movpl	r0, #2
 800a2ee:	4770      	bx	lr
 800a2f0:	b299      	uxth	r1, r3
 800a2f2:	b909      	cbnz	r1, 800a2f8 <__lo0bits+0x2a>
 800a2f4:	0c1b      	lsrs	r3, r3, #16
 800a2f6:	2010      	movs	r0, #16
 800a2f8:	b2d9      	uxtb	r1, r3
 800a2fa:	b909      	cbnz	r1, 800a300 <__lo0bits+0x32>
 800a2fc:	3008      	adds	r0, #8
 800a2fe:	0a1b      	lsrs	r3, r3, #8
 800a300:	0719      	lsls	r1, r3, #28
 800a302:	bf04      	itt	eq
 800a304:	091b      	lsreq	r3, r3, #4
 800a306:	3004      	addeq	r0, #4
 800a308:	0799      	lsls	r1, r3, #30
 800a30a:	bf04      	itt	eq
 800a30c:	089b      	lsreq	r3, r3, #2
 800a30e:	3002      	addeq	r0, #2
 800a310:	07d9      	lsls	r1, r3, #31
 800a312:	d403      	bmi.n	800a31c <__lo0bits+0x4e>
 800a314:	085b      	lsrs	r3, r3, #1
 800a316:	f100 0001 	add.w	r0, r0, #1
 800a31a:	d003      	beq.n	800a324 <__lo0bits+0x56>
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	4770      	bx	lr
 800a320:	2000      	movs	r0, #0
 800a322:	4770      	bx	lr
 800a324:	2020      	movs	r0, #32
 800a326:	4770      	bx	lr

0800a328 <__i2b>:
 800a328:	b510      	push	{r4, lr}
 800a32a:	460c      	mov	r4, r1
 800a32c:	2101      	movs	r1, #1
 800a32e:	f7ff ff07 	bl	800a140 <_Balloc>
 800a332:	4602      	mov	r2, r0
 800a334:	b928      	cbnz	r0, 800a342 <__i2b+0x1a>
 800a336:	4b05      	ldr	r3, [pc, #20]	@ (800a34c <__i2b+0x24>)
 800a338:	4805      	ldr	r0, [pc, #20]	@ (800a350 <__i2b+0x28>)
 800a33a:	f240 1145 	movw	r1, #325	@ 0x145
 800a33e:	f000 fcb5 	bl	800acac <__assert_func>
 800a342:	2301      	movs	r3, #1
 800a344:	6144      	str	r4, [r0, #20]
 800a346:	6103      	str	r3, [r0, #16]
 800a348:	bd10      	pop	{r4, pc}
 800a34a:	bf00      	nop
 800a34c:	0800c814 	.word	0x0800c814
 800a350:	0800c825 	.word	0x0800c825

0800a354 <__multiply>:
 800a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a358:	4617      	mov	r7, r2
 800a35a:	690a      	ldr	r2, [r1, #16]
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	429a      	cmp	r2, r3
 800a360:	bfa8      	it	ge
 800a362:	463b      	movge	r3, r7
 800a364:	4689      	mov	r9, r1
 800a366:	bfa4      	itt	ge
 800a368:	460f      	movge	r7, r1
 800a36a:	4699      	movge	r9, r3
 800a36c:	693d      	ldr	r5, [r7, #16]
 800a36e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	6879      	ldr	r1, [r7, #4]
 800a376:	eb05 060a 	add.w	r6, r5, sl
 800a37a:	42b3      	cmp	r3, r6
 800a37c:	b085      	sub	sp, #20
 800a37e:	bfb8      	it	lt
 800a380:	3101      	addlt	r1, #1
 800a382:	f7ff fedd 	bl	800a140 <_Balloc>
 800a386:	b930      	cbnz	r0, 800a396 <__multiply+0x42>
 800a388:	4602      	mov	r2, r0
 800a38a:	4b41      	ldr	r3, [pc, #260]	@ (800a490 <__multiply+0x13c>)
 800a38c:	4841      	ldr	r0, [pc, #260]	@ (800a494 <__multiply+0x140>)
 800a38e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a392:	f000 fc8b 	bl	800acac <__assert_func>
 800a396:	f100 0414 	add.w	r4, r0, #20
 800a39a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a39e:	4623      	mov	r3, r4
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	4573      	cmp	r3, lr
 800a3a4:	d320      	bcc.n	800a3e8 <__multiply+0x94>
 800a3a6:	f107 0814 	add.w	r8, r7, #20
 800a3aa:	f109 0114 	add.w	r1, r9, #20
 800a3ae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a3b2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a3b6:	9302      	str	r3, [sp, #8]
 800a3b8:	1beb      	subs	r3, r5, r7
 800a3ba:	3b15      	subs	r3, #21
 800a3bc:	f023 0303 	bic.w	r3, r3, #3
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	3715      	adds	r7, #21
 800a3c4:	42bd      	cmp	r5, r7
 800a3c6:	bf38      	it	cc
 800a3c8:	2304      	movcc	r3, #4
 800a3ca:	9301      	str	r3, [sp, #4]
 800a3cc:	9b02      	ldr	r3, [sp, #8]
 800a3ce:	9103      	str	r1, [sp, #12]
 800a3d0:	428b      	cmp	r3, r1
 800a3d2:	d80c      	bhi.n	800a3ee <__multiply+0x9a>
 800a3d4:	2e00      	cmp	r6, #0
 800a3d6:	dd03      	ble.n	800a3e0 <__multiply+0x8c>
 800a3d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d055      	beq.n	800a48c <__multiply+0x138>
 800a3e0:	6106      	str	r6, [r0, #16]
 800a3e2:	b005      	add	sp, #20
 800a3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e8:	f843 2b04 	str.w	r2, [r3], #4
 800a3ec:	e7d9      	b.n	800a3a2 <__multiply+0x4e>
 800a3ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800a3f2:	f1ba 0f00 	cmp.w	sl, #0
 800a3f6:	d01f      	beq.n	800a438 <__multiply+0xe4>
 800a3f8:	46c4      	mov	ip, r8
 800a3fa:	46a1      	mov	r9, r4
 800a3fc:	2700      	movs	r7, #0
 800a3fe:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a402:	f8d9 3000 	ldr.w	r3, [r9]
 800a406:	fa1f fb82 	uxth.w	fp, r2
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a410:	443b      	add	r3, r7
 800a412:	f8d9 7000 	ldr.w	r7, [r9]
 800a416:	0c12      	lsrs	r2, r2, #16
 800a418:	0c3f      	lsrs	r7, r7, #16
 800a41a:	fb0a 7202 	mla	r2, sl, r2, r7
 800a41e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a422:	b29b      	uxth	r3, r3
 800a424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a428:	4565      	cmp	r5, ip
 800a42a:	f849 3b04 	str.w	r3, [r9], #4
 800a42e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a432:	d8e4      	bhi.n	800a3fe <__multiply+0xaa>
 800a434:	9b01      	ldr	r3, [sp, #4]
 800a436:	50e7      	str	r7, [r4, r3]
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a43e:	3104      	adds	r1, #4
 800a440:	f1b9 0f00 	cmp.w	r9, #0
 800a444:	d020      	beq.n	800a488 <__multiply+0x134>
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	4647      	mov	r7, r8
 800a44a:	46a4      	mov	ip, r4
 800a44c:	f04f 0a00 	mov.w	sl, #0
 800a450:	f8b7 b000 	ldrh.w	fp, [r7]
 800a454:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a458:	fb09 220b 	mla	r2, r9, fp, r2
 800a45c:	4452      	add	r2, sl
 800a45e:	b29b      	uxth	r3, r3
 800a460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a464:	f84c 3b04 	str.w	r3, [ip], #4
 800a468:	f857 3b04 	ldr.w	r3, [r7], #4
 800a46c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a470:	f8bc 3000 	ldrh.w	r3, [ip]
 800a474:	fb09 330a 	mla	r3, r9, sl, r3
 800a478:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a47c:	42bd      	cmp	r5, r7
 800a47e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a482:	d8e5      	bhi.n	800a450 <__multiply+0xfc>
 800a484:	9a01      	ldr	r2, [sp, #4]
 800a486:	50a3      	str	r3, [r4, r2]
 800a488:	3404      	adds	r4, #4
 800a48a:	e79f      	b.n	800a3cc <__multiply+0x78>
 800a48c:	3e01      	subs	r6, #1
 800a48e:	e7a1      	b.n	800a3d4 <__multiply+0x80>
 800a490:	0800c814 	.word	0x0800c814
 800a494:	0800c825 	.word	0x0800c825

0800a498 <__pow5mult>:
 800a498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a49c:	4615      	mov	r5, r2
 800a49e:	f012 0203 	ands.w	r2, r2, #3
 800a4a2:	4607      	mov	r7, r0
 800a4a4:	460e      	mov	r6, r1
 800a4a6:	d007      	beq.n	800a4b8 <__pow5mult+0x20>
 800a4a8:	4c25      	ldr	r4, [pc, #148]	@ (800a540 <__pow5mult+0xa8>)
 800a4aa:	3a01      	subs	r2, #1
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4b2:	f7ff fea7 	bl	800a204 <__multadd>
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	10ad      	asrs	r5, r5, #2
 800a4ba:	d03d      	beq.n	800a538 <__pow5mult+0xa0>
 800a4bc:	69fc      	ldr	r4, [r7, #28]
 800a4be:	b97c      	cbnz	r4, 800a4e0 <__pow5mult+0x48>
 800a4c0:	2010      	movs	r0, #16
 800a4c2:	f7ff fd87 	bl	8009fd4 <malloc>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	61f8      	str	r0, [r7, #28]
 800a4ca:	b928      	cbnz	r0, 800a4d8 <__pow5mult+0x40>
 800a4cc:	4b1d      	ldr	r3, [pc, #116]	@ (800a544 <__pow5mult+0xac>)
 800a4ce:	481e      	ldr	r0, [pc, #120]	@ (800a548 <__pow5mult+0xb0>)
 800a4d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a4d4:	f000 fbea 	bl	800acac <__assert_func>
 800a4d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4dc:	6004      	str	r4, [r0, #0]
 800a4de:	60c4      	str	r4, [r0, #12]
 800a4e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a4e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4e8:	b94c      	cbnz	r4, 800a4fe <__pow5mult+0x66>
 800a4ea:	f240 2171 	movw	r1, #625	@ 0x271
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	f7ff ff1a 	bl	800a328 <__i2b>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	6003      	str	r3, [r0, #0]
 800a4fe:	f04f 0900 	mov.w	r9, #0
 800a502:	07eb      	lsls	r3, r5, #31
 800a504:	d50a      	bpl.n	800a51c <__pow5mult+0x84>
 800a506:	4631      	mov	r1, r6
 800a508:	4622      	mov	r2, r4
 800a50a:	4638      	mov	r0, r7
 800a50c:	f7ff ff22 	bl	800a354 <__multiply>
 800a510:	4631      	mov	r1, r6
 800a512:	4680      	mov	r8, r0
 800a514:	4638      	mov	r0, r7
 800a516:	f7ff fe53 	bl	800a1c0 <_Bfree>
 800a51a:	4646      	mov	r6, r8
 800a51c:	106d      	asrs	r5, r5, #1
 800a51e:	d00b      	beq.n	800a538 <__pow5mult+0xa0>
 800a520:	6820      	ldr	r0, [r4, #0]
 800a522:	b938      	cbnz	r0, 800a534 <__pow5mult+0x9c>
 800a524:	4622      	mov	r2, r4
 800a526:	4621      	mov	r1, r4
 800a528:	4638      	mov	r0, r7
 800a52a:	f7ff ff13 	bl	800a354 <__multiply>
 800a52e:	6020      	str	r0, [r4, #0]
 800a530:	f8c0 9000 	str.w	r9, [r0]
 800a534:	4604      	mov	r4, r0
 800a536:	e7e4      	b.n	800a502 <__pow5mult+0x6a>
 800a538:	4630      	mov	r0, r6
 800a53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a53e:	bf00      	nop
 800a540:	0800c8d8 	.word	0x0800c8d8
 800a544:	0800c7a5 	.word	0x0800c7a5
 800a548:	0800c825 	.word	0x0800c825

0800a54c <__lshift>:
 800a54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a550:	460c      	mov	r4, r1
 800a552:	6849      	ldr	r1, [r1, #4]
 800a554:	6923      	ldr	r3, [r4, #16]
 800a556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a55a:	68a3      	ldr	r3, [r4, #8]
 800a55c:	4607      	mov	r7, r0
 800a55e:	4691      	mov	r9, r2
 800a560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a564:	f108 0601 	add.w	r6, r8, #1
 800a568:	42b3      	cmp	r3, r6
 800a56a:	db0b      	blt.n	800a584 <__lshift+0x38>
 800a56c:	4638      	mov	r0, r7
 800a56e:	f7ff fde7 	bl	800a140 <_Balloc>
 800a572:	4605      	mov	r5, r0
 800a574:	b948      	cbnz	r0, 800a58a <__lshift+0x3e>
 800a576:	4602      	mov	r2, r0
 800a578:	4b28      	ldr	r3, [pc, #160]	@ (800a61c <__lshift+0xd0>)
 800a57a:	4829      	ldr	r0, [pc, #164]	@ (800a620 <__lshift+0xd4>)
 800a57c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a580:	f000 fb94 	bl	800acac <__assert_func>
 800a584:	3101      	adds	r1, #1
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	e7ee      	b.n	800a568 <__lshift+0x1c>
 800a58a:	2300      	movs	r3, #0
 800a58c:	f100 0114 	add.w	r1, r0, #20
 800a590:	f100 0210 	add.w	r2, r0, #16
 800a594:	4618      	mov	r0, r3
 800a596:	4553      	cmp	r3, sl
 800a598:	db33      	blt.n	800a602 <__lshift+0xb6>
 800a59a:	6920      	ldr	r0, [r4, #16]
 800a59c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5a0:	f104 0314 	add.w	r3, r4, #20
 800a5a4:	f019 091f 	ands.w	r9, r9, #31
 800a5a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5b0:	d02b      	beq.n	800a60a <__lshift+0xbe>
 800a5b2:	f1c9 0e20 	rsb	lr, r9, #32
 800a5b6:	468a      	mov	sl, r1
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	6818      	ldr	r0, [r3, #0]
 800a5bc:	fa00 f009 	lsl.w	r0, r0, r9
 800a5c0:	4310      	orrs	r0, r2
 800a5c2:	f84a 0b04 	str.w	r0, [sl], #4
 800a5c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ca:	459c      	cmp	ip, r3
 800a5cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5d0:	d8f3      	bhi.n	800a5ba <__lshift+0x6e>
 800a5d2:	ebac 0304 	sub.w	r3, ip, r4
 800a5d6:	3b15      	subs	r3, #21
 800a5d8:	f023 0303 	bic.w	r3, r3, #3
 800a5dc:	3304      	adds	r3, #4
 800a5de:	f104 0015 	add.w	r0, r4, #21
 800a5e2:	4560      	cmp	r0, ip
 800a5e4:	bf88      	it	hi
 800a5e6:	2304      	movhi	r3, #4
 800a5e8:	50ca      	str	r2, [r1, r3]
 800a5ea:	b10a      	cbz	r2, 800a5f0 <__lshift+0xa4>
 800a5ec:	f108 0602 	add.w	r6, r8, #2
 800a5f0:	3e01      	subs	r6, #1
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	612e      	str	r6, [r5, #16]
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	f7ff fde2 	bl	800a1c0 <_Bfree>
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a602:	f842 0f04 	str.w	r0, [r2, #4]!
 800a606:	3301      	adds	r3, #1
 800a608:	e7c5      	b.n	800a596 <__lshift+0x4a>
 800a60a:	3904      	subs	r1, #4
 800a60c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a610:	f841 2f04 	str.w	r2, [r1, #4]!
 800a614:	459c      	cmp	ip, r3
 800a616:	d8f9      	bhi.n	800a60c <__lshift+0xc0>
 800a618:	e7ea      	b.n	800a5f0 <__lshift+0xa4>
 800a61a:	bf00      	nop
 800a61c:	0800c814 	.word	0x0800c814
 800a620:	0800c825 	.word	0x0800c825

0800a624 <__mcmp>:
 800a624:	690a      	ldr	r2, [r1, #16]
 800a626:	4603      	mov	r3, r0
 800a628:	6900      	ldr	r0, [r0, #16]
 800a62a:	1a80      	subs	r0, r0, r2
 800a62c:	b530      	push	{r4, r5, lr}
 800a62e:	d10e      	bne.n	800a64e <__mcmp+0x2a>
 800a630:	3314      	adds	r3, #20
 800a632:	3114      	adds	r1, #20
 800a634:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a638:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a63c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a640:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a644:	4295      	cmp	r5, r2
 800a646:	d003      	beq.n	800a650 <__mcmp+0x2c>
 800a648:	d205      	bcs.n	800a656 <__mcmp+0x32>
 800a64a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a64e:	bd30      	pop	{r4, r5, pc}
 800a650:	42a3      	cmp	r3, r4
 800a652:	d3f3      	bcc.n	800a63c <__mcmp+0x18>
 800a654:	e7fb      	b.n	800a64e <__mcmp+0x2a>
 800a656:	2001      	movs	r0, #1
 800a658:	e7f9      	b.n	800a64e <__mcmp+0x2a>
	...

0800a65c <__mdiff>:
 800a65c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a660:	4689      	mov	r9, r1
 800a662:	4606      	mov	r6, r0
 800a664:	4611      	mov	r1, r2
 800a666:	4648      	mov	r0, r9
 800a668:	4614      	mov	r4, r2
 800a66a:	f7ff ffdb 	bl	800a624 <__mcmp>
 800a66e:	1e05      	subs	r5, r0, #0
 800a670:	d112      	bne.n	800a698 <__mdiff+0x3c>
 800a672:	4629      	mov	r1, r5
 800a674:	4630      	mov	r0, r6
 800a676:	f7ff fd63 	bl	800a140 <_Balloc>
 800a67a:	4602      	mov	r2, r0
 800a67c:	b928      	cbnz	r0, 800a68a <__mdiff+0x2e>
 800a67e:	4b3f      	ldr	r3, [pc, #252]	@ (800a77c <__mdiff+0x120>)
 800a680:	f240 2137 	movw	r1, #567	@ 0x237
 800a684:	483e      	ldr	r0, [pc, #248]	@ (800a780 <__mdiff+0x124>)
 800a686:	f000 fb11 	bl	800acac <__assert_func>
 800a68a:	2301      	movs	r3, #1
 800a68c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a690:	4610      	mov	r0, r2
 800a692:	b003      	add	sp, #12
 800a694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a698:	bfbc      	itt	lt
 800a69a:	464b      	movlt	r3, r9
 800a69c:	46a1      	movlt	r9, r4
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6a4:	bfba      	itte	lt
 800a6a6:	461c      	movlt	r4, r3
 800a6a8:	2501      	movlt	r5, #1
 800a6aa:	2500      	movge	r5, #0
 800a6ac:	f7ff fd48 	bl	800a140 <_Balloc>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	b918      	cbnz	r0, 800a6bc <__mdiff+0x60>
 800a6b4:	4b31      	ldr	r3, [pc, #196]	@ (800a77c <__mdiff+0x120>)
 800a6b6:	f240 2145 	movw	r1, #581	@ 0x245
 800a6ba:	e7e3      	b.n	800a684 <__mdiff+0x28>
 800a6bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6c0:	6926      	ldr	r6, [r4, #16]
 800a6c2:	60c5      	str	r5, [r0, #12]
 800a6c4:	f109 0310 	add.w	r3, r9, #16
 800a6c8:	f109 0514 	add.w	r5, r9, #20
 800a6cc:	f104 0e14 	add.w	lr, r4, #20
 800a6d0:	f100 0b14 	add.w	fp, r0, #20
 800a6d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a6d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	46d9      	mov	r9, fp
 800a6e0:	f04f 0c00 	mov.w	ip, #0
 800a6e4:	9b01      	ldr	r3, [sp, #4]
 800a6e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a6ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a6ee:	9301      	str	r3, [sp, #4]
 800a6f0:	fa1f f38a 	uxth.w	r3, sl
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	b283      	uxth	r3, r0
 800a6f8:	1acb      	subs	r3, r1, r3
 800a6fa:	0c00      	lsrs	r0, r0, #16
 800a6fc:	4463      	add	r3, ip
 800a6fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a702:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a706:	b29b      	uxth	r3, r3
 800a708:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a70c:	4576      	cmp	r6, lr
 800a70e:	f849 3b04 	str.w	r3, [r9], #4
 800a712:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a716:	d8e5      	bhi.n	800a6e4 <__mdiff+0x88>
 800a718:	1b33      	subs	r3, r6, r4
 800a71a:	3b15      	subs	r3, #21
 800a71c:	f023 0303 	bic.w	r3, r3, #3
 800a720:	3415      	adds	r4, #21
 800a722:	3304      	adds	r3, #4
 800a724:	42a6      	cmp	r6, r4
 800a726:	bf38      	it	cc
 800a728:	2304      	movcc	r3, #4
 800a72a:	441d      	add	r5, r3
 800a72c:	445b      	add	r3, fp
 800a72e:	461e      	mov	r6, r3
 800a730:	462c      	mov	r4, r5
 800a732:	4544      	cmp	r4, r8
 800a734:	d30e      	bcc.n	800a754 <__mdiff+0xf8>
 800a736:	f108 0103 	add.w	r1, r8, #3
 800a73a:	1b49      	subs	r1, r1, r5
 800a73c:	f021 0103 	bic.w	r1, r1, #3
 800a740:	3d03      	subs	r5, #3
 800a742:	45a8      	cmp	r8, r5
 800a744:	bf38      	it	cc
 800a746:	2100      	movcc	r1, #0
 800a748:	440b      	add	r3, r1
 800a74a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a74e:	b191      	cbz	r1, 800a776 <__mdiff+0x11a>
 800a750:	6117      	str	r7, [r2, #16]
 800a752:	e79d      	b.n	800a690 <__mdiff+0x34>
 800a754:	f854 1b04 	ldr.w	r1, [r4], #4
 800a758:	46e6      	mov	lr, ip
 800a75a:	0c08      	lsrs	r0, r1, #16
 800a75c:	fa1c fc81 	uxtah	ip, ip, r1
 800a760:	4471      	add	r1, lr
 800a762:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a766:	b289      	uxth	r1, r1
 800a768:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a76c:	f846 1b04 	str.w	r1, [r6], #4
 800a770:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a774:	e7dd      	b.n	800a732 <__mdiff+0xd6>
 800a776:	3f01      	subs	r7, #1
 800a778:	e7e7      	b.n	800a74a <__mdiff+0xee>
 800a77a:	bf00      	nop
 800a77c:	0800c814 	.word	0x0800c814
 800a780:	0800c825 	.word	0x0800c825

0800a784 <__d2b>:
 800a784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a788:	460f      	mov	r7, r1
 800a78a:	2101      	movs	r1, #1
 800a78c:	ec59 8b10 	vmov	r8, r9, d0
 800a790:	4616      	mov	r6, r2
 800a792:	f7ff fcd5 	bl	800a140 <_Balloc>
 800a796:	4604      	mov	r4, r0
 800a798:	b930      	cbnz	r0, 800a7a8 <__d2b+0x24>
 800a79a:	4602      	mov	r2, r0
 800a79c:	4b23      	ldr	r3, [pc, #140]	@ (800a82c <__d2b+0xa8>)
 800a79e:	4824      	ldr	r0, [pc, #144]	@ (800a830 <__d2b+0xac>)
 800a7a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7a4:	f000 fa82 	bl	800acac <__assert_func>
 800a7a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7b0:	b10d      	cbz	r5, 800a7b6 <__d2b+0x32>
 800a7b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7b6:	9301      	str	r3, [sp, #4]
 800a7b8:	f1b8 0300 	subs.w	r3, r8, #0
 800a7bc:	d023      	beq.n	800a806 <__d2b+0x82>
 800a7be:	4668      	mov	r0, sp
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	f7ff fd84 	bl	800a2ce <__lo0bits>
 800a7c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7ca:	b1d0      	cbz	r0, 800a802 <__d2b+0x7e>
 800a7cc:	f1c0 0320 	rsb	r3, r0, #32
 800a7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d4:	430b      	orrs	r3, r1
 800a7d6:	40c2      	lsrs	r2, r0
 800a7d8:	6163      	str	r3, [r4, #20]
 800a7da:	9201      	str	r2, [sp, #4]
 800a7dc:	9b01      	ldr	r3, [sp, #4]
 800a7de:	61a3      	str	r3, [r4, #24]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	bf0c      	ite	eq
 800a7e4:	2201      	moveq	r2, #1
 800a7e6:	2202      	movne	r2, #2
 800a7e8:	6122      	str	r2, [r4, #16]
 800a7ea:	b1a5      	cbz	r5, 800a816 <__d2b+0x92>
 800a7ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7f0:	4405      	add	r5, r0
 800a7f2:	603d      	str	r5, [r7, #0]
 800a7f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a7f8:	6030      	str	r0, [r6, #0]
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	b003      	add	sp, #12
 800a7fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a802:	6161      	str	r1, [r4, #20]
 800a804:	e7ea      	b.n	800a7dc <__d2b+0x58>
 800a806:	a801      	add	r0, sp, #4
 800a808:	f7ff fd61 	bl	800a2ce <__lo0bits>
 800a80c:	9b01      	ldr	r3, [sp, #4]
 800a80e:	6163      	str	r3, [r4, #20]
 800a810:	3020      	adds	r0, #32
 800a812:	2201      	movs	r2, #1
 800a814:	e7e8      	b.n	800a7e8 <__d2b+0x64>
 800a816:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a81a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a81e:	6038      	str	r0, [r7, #0]
 800a820:	6918      	ldr	r0, [r3, #16]
 800a822:	f7ff fd35 	bl	800a290 <__hi0bits>
 800a826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a82a:	e7e5      	b.n	800a7f8 <__d2b+0x74>
 800a82c:	0800c814 	.word	0x0800c814
 800a830:	0800c825 	.word	0x0800c825

0800a834 <__ssputs_r>:
 800a834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a838:	688e      	ldr	r6, [r1, #8]
 800a83a:	461f      	mov	r7, r3
 800a83c:	42be      	cmp	r6, r7
 800a83e:	680b      	ldr	r3, [r1, #0]
 800a840:	4682      	mov	sl, r0
 800a842:	460c      	mov	r4, r1
 800a844:	4690      	mov	r8, r2
 800a846:	d82d      	bhi.n	800a8a4 <__ssputs_r+0x70>
 800a848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a84c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a850:	d026      	beq.n	800a8a0 <__ssputs_r+0x6c>
 800a852:	6965      	ldr	r5, [r4, #20]
 800a854:	6909      	ldr	r1, [r1, #16]
 800a856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a85a:	eba3 0901 	sub.w	r9, r3, r1
 800a85e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a862:	1c7b      	adds	r3, r7, #1
 800a864:	444b      	add	r3, r9
 800a866:	106d      	asrs	r5, r5, #1
 800a868:	429d      	cmp	r5, r3
 800a86a:	bf38      	it	cc
 800a86c:	461d      	movcc	r5, r3
 800a86e:	0553      	lsls	r3, r2, #21
 800a870:	d527      	bpl.n	800a8c2 <__ssputs_r+0x8e>
 800a872:	4629      	mov	r1, r5
 800a874:	f7ff fbd8 	bl	800a028 <_malloc_r>
 800a878:	4606      	mov	r6, r0
 800a87a:	b360      	cbz	r0, 800a8d6 <__ssputs_r+0xa2>
 800a87c:	6921      	ldr	r1, [r4, #16]
 800a87e:	464a      	mov	r2, r9
 800a880:	f000 fa06 	bl	800ac90 <memcpy>
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a88a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a88e:	81a3      	strh	r3, [r4, #12]
 800a890:	6126      	str	r6, [r4, #16]
 800a892:	6165      	str	r5, [r4, #20]
 800a894:	444e      	add	r6, r9
 800a896:	eba5 0509 	sub.w	r5, r5, r9
 800a89a:	6026      	str	r6, [r4, #0]
 800a89c:	60a5      	str	r5, [r4, #8]
 800a89e:	463e      	mov	r6, r7
 800a8a0:	42be      	cmp	r6, r7
 800a8a2:	d900      	bls.n	800a8a6 <__ssputs_r+0x72>
 800a8a4:	463e      	mov	r6, r7
 800a8a6:	6820      	ldr	r0, [r4, #0]
 800a8a8:	4632      	mov	r2, r6
 800a8aa:	4641      	mov	r1, r8
 800a8ac:	f000 f9c6 	bl	800ac3c <memmove>
 800a8b0:	68a3      	ldr	r3, [r4, #8]
 800a8b2:	1b9b      	subs	r3, r3, r6
 800a8b4:	60a3      	str	r3, [r4, #8]
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	4433      	add	r3, r6
 800a8ba:	6023      	str	r3, [r4, #0]
 800a8bc:	2000      	movs	r0, #0
 800a8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c2:	462a      	mov	r2, r5
 800a8c4:	f000 fa36 	bl	800ad34 <_realloc_r>
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d1e0      	bne.n	800a890 <__ssputs_r+0x5c>
 800a8ce:	6921      	ldr	r1, [r4, #16]
 800a8d0:	4650      	mov	r0, sl
 800a8d2:	f7ff fb35 	bl	8009f40 <_free_r>
 800a8d6:	230c      	movs	r3, #12
 800a8d8:	f8ca 3000 	str.w	r3, [sl]
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e2:	81a3      	strh	r3, [r4, #12]
 800a8e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8e8:	e7e9      	b.n	800a8be <__ssputs_r+0x8a>
	...

0800a8ec <_svfiprintf_r>:
 800a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f0:	4698      	mov	r8, r3
 800a8f2:	898b      	ldrh	r3, [r1, #12]
 800a8f4:	061b      	lsls	r3, r3, #24
 800a8f6:	b09d      	sub	sp, #116	@ 0x74
 800a8f8:	4607      	mov	r7, r0
 800a8fa:	460d      	mov	r5, r1
 800a8fc:	4614      	mov	r4, r2
 800a8fe:	d510      	bpl.n	800a922 <_svfiprintf_r+0x36>
 800a900:	690b      	ldr	r3, [r1, #16]
 800a902:	b973      	cbnz	r3, 800a922 <_svfiprintf_r+0x36>
 800a904:	2140      	movs	r1, #64	@ 0x40
 800a906:	f7ff fb8f 	bl	800a028 <_malloc_r>
 800a90a:	6028      	str	r0, [r5, #0]
 800a90c:	6128      	str	r0, [r5, #16]
 800a90e:	b930      	cbnz	r0, 800a91e <_svfiprintf_r+0x32>
 800a910:	230c      	movs	r3, #12
 800a912:	603b      	str	r3, [r7, #0]
 800a914:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a918:	b01d      	add	sp, #116	@ 0x74
 800a91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91e:	2340      	movs	r3, #64	@ 0x40
 800a920:	616b      	str	r3, [r5, #20]
 800a922:	2300      	movs	r3, #0
 800a924:	9309      	str	r3, [sp, #36]	@ 0x24
 800a926:	2320      	movs	r3, #32
 800a928:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a92c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a930:	2330      	movs	r3, #48	@ 0x30
 800a932:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aad0 <_svfiprintf_r+0x1e4>
 800a936:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a93a:	f04f 0901 	mov.w	r9, #1
 800a93e:	4623      	mov	r3, r4
 800a940:	469a      	mov	sl, r3
 800a942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a946:	b10a      	cbz	r2, 800a94c <_svfiprintf_r+0x60>
 800a948:	2a25      	cmp	r2, #37	@ 0x25
 800a94a:	d1f9      	bne.n	800a940 <_svfiprintf_r+0x54>
 800a94c:	ebba 0b04 	subs.w	fp, sl, r4
 800a950:	d00b      	beq.n	800a96a <_svfiprintf_r+0x7e>
 800a952:	465b      	mov	r3, fp
 800a954:	4622      	mov	r2, r4
 800a956:	4629      	mov	r1, r5
 800a958:	4638      	mov	r0, r7
 800a95a:	f7ff ff6b 	bl	800a834 <__ssputs_r>
 800a95e:	3001      	adds	r0, #1
 800a960:	f000 80a7 	beq.w	800aab2 <_svfiprintf_r+0x1c6>
 800a964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a966:	445a      	add	r2, fp
 800a968:	9209      	str	r2, [sp, #36]	@ 0x24
 800a96a:	f89a 3000 	ldrb.w	r3, [sl]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f000 809f 	beq.w	800aab2 <_svfiprintf_r+0x1c6>
 800a974:	2300      	movs	r3, #0
 800a976:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a97a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a97e:	f10a 0a01 	add.w	sl, sl, #1
 800a982:	9304      	str	r3, [sp, #16]
 800a984:	9307      	str	r3, [sp, #28]
 800a986:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a98a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a98c:	4654      	mov	r4, sl
 800a98e:	2205      	movs	r2, #5
 800a990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a994:	484e      	ldr	r0, [pc, #312]	@ (800aad0 <_svfiprintf_r+0x1e4>)
 800a996:	f7f5 fc3b 	bl	8000210 <memchr>
 800a99a:	9a04      	ldr	r2, [sp, #16]
 800a99c:	b9d8      	cbnz	r0, 800a9d6 <_svfiprintf_r+0xea>
 800a99e:	06d0      	lsls	r0, r2, #27
 800a9a0:	bf44      	itt	mi
 800a9a2:	2320      	movmi	r3, #32
 800a9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9a8:	0711      	lsls	r1, r2, #28
 800a9aa:	bf44      	itt	mi
 800a9ac:	232b      	movmi	r3, #43	@ 0x2b
 800a9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9b8:	d015      	beq.n	800a9e6 <_svfiprintf_r+0xfa>
 800a9ba:	9a07      	ldr	r2, [sp, #28]
 800a9bc:	4654      	mov	r4, sl
 800a9be:	2000      	movs	r0, #0
 800a9c0:	f04f 0c0a 	mov.w	ip, #10
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ca:	3b30      	subs	r3, #48	@ 0x30
 800a9cc:	2b09      	cmp	r3, #9
 800a9ce:	d94b      	bls.n	800aa68 <_svfiprintf_r+0x17c>
 800a9d0:	b1b0      	cbz	r0, 800aa00 <_svfiprintf_r+0x114>
 800a9d2:	9207      	str	r2, [sp, #28]
 800a9d4:	e014      	b.n	800aa00 <_svfiprintf_r+0x114>
 800a9d6:	eba0 0308 	sub.w	r3, r0, r8
 800a9da:	fa09 f303 	lsl.w	r3, r9, r3
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	9304      	str	r3, [sp, #16]
 800a9e2:	46a2      	mov	sl, r4
 800a9e4:	e7d2      	b.n	800a98c <_svfiprintf_r+0xa0>
 800a9e6:	9b03      	ldr	r3, [sp, #12]
 800a9e8:	1d19      	adds	r1, r3, #4
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	9103      	str	r1, [sp, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	bfbb      	ittet	lt
 800a9f2:	425b      	neglt	r3, r3
 800a9f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a9f8:	9307      	strge	r3, [sp, #28]
 800a9fa:	9307      	strlt	r3, [sp, #28]
 800a9fc:	bfb8      	it	lt
 800a9fe:	9204      	strlt	r2, [sp, #16]
 800aa00:	7823      	ldrb	r3, [r4, #0]
 800aa02:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa04:	d10a      	bne.n	800aa1c <_svfiprintf_r+0x130>
 800aa06:	7863      	ldrb	r3, [r4, #1]
 800aa08:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa0a:	d132      	bne.n	800aa72 <_svfiprintf_r+0x186>
 800aa0c:	9b03      	ldr	r3, [sp, #12]
 800aa0e:	1d1a      	adds	r2, r3, #4
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	9203      	str	r2, [sp, #12]
 800aa14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa18:	3402      	adds	r4, #2
 800aa1a:	9305      	str	r3, [sp, #20]
 800aa1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aae0 <_svfiprintf_r+0x1f4>
 800aa20:	7821      	ldrb	r1, [r4, #0]
 800aa22:	2203      	movs	r2, #3
 800aa24:	4650      	mov	r0, sl
 800aa26:	f7f5 fbf3 	bl	8000210 <memchr>
 800aa2a:	b138      	cbz	r0, 800aa3c <_svfiprintf_r+0x150>
 800aa2c:	9b04      	ldr	r3, [sp, #16]
 800aa2e:	eba0 000a 	sub.w	r0, r0, sl
 800aa32:	2240      	movs	r2, #64	@ 0x40
 800aa34:	4082      	lsls	r2, r0
 800aa36:	4313      	orrs	r3, r2
 800aa38:	3401      	adds	r4, #1
 800aa3a:	9304      	str	r3, [sp, #16]
 800aa3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa40:	4824      	ldr	r0, [pc, #144]	@ (800aad4 <_svfiprintf_r+0x1e8>)
 800aa42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa46:	2206      	movs	r2, #6
 800aa48:	f7f5 fbe2 	bl	8000210 <memchr>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d036      	beq.n	800aabe <_svfiprintf_r+0x1d2>
 800aa50:	4b21      	ldr	r3, [pc, #132]	@ (800aad8 <_svfiprintf_r+0x1ec>)
 800aa52:	bb1b      	cbnz	r3, 800aa9c <_svfiprintf_r+0x1b0>
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	3307      	adds	r3, #7
 800aa58:	f023 0307 	bic.w	r3, r3, #7
 800aa5c:	3308      	adds	r3, #8
 800aa5e:	9303      	str	r3, [sp, #12]
 800aa60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa62:	4433      	add	r3, r6
 800aa64:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa66:	e76a      	b.n	800a93e <_svfiprintf_r+0x52>
 800aa68:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	2001      	movs	r0, #1
 800aa70:	e7a8      	b.n	800a9c4 <_svfiprintf_r+0xd8>
 800aa72:	2300      	movs	r3, #0
 800aa74:	3401      	adds	r4, #1
 800aa76:	9305      	str	r3, [sp, #20]
 800aa78:	4619      	mov	r1, r3
 800aa7a:	f04f 0c0a 	mov.w	ip, #10
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa84:	3a30      	subs	r2, #48	@ 0x30
 800aa86:	2a09      	cmp	r2, #9
 800aa88:	d903      	bls.n	800aa92 <_svfiprintf_r+0x1a6>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0c6      	beq.n	800aa1c <_svfiprintf_r+0x130>
 800aa8e:	9105      	str	r1, [sp, #20]
 800aa90:	e7c4      	b.n	800aa1c <_svfiprintf_r+0x130>
 800aa92:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa96:	4604      	mov	r4, r0
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e7f0      	b.n	800aa7e <_svfiprintf_r+0x192>
 800aa9c:	ab03      	add	r3, sp, #12
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	462a      	mov	r2, r5
 800aaa2:	4b0e      	ldr	r3, [pc, #56]	@ (800aadc <_svfiprintf_r+0x1f0>)
 800aaa4:	a904      	add	r1, sp, #16
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	f7fd fe94 	bl	80087d4 <_printf_float>
 800aaac:	1c42      	adds	r2, r0, #1
 800aaae:	4606      	mov	r6, r0
 800aab0:	d1d6      	bne.n	800aa60 <_svfiprintf_r+0x174>
 800aab2:	89ab      	ldrh	r3, [r5, #12]
 800aab4:	065b      	lsls	r3, r3, #25
 800aab6:	f53f af2d 	bmi.w	800a914 <_svfiprintf_r+0x28>
 800aaba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aabc:	e72c      	b.n	800a918 <_svfiprintf_r+0x2c>
 800aabe:	ab03      	add	r3, sp, #12
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	462a      	mov	r2, r5
 800aac4:	4b05      	ldr	r3, [pc, #20]	@ (800aadc <_svfiprintf_r+0x1f0>)
 800aac6:	a904      	add	r1, sp, #16
 800aac8:	4638      	mov	r0, r7
 800aaca:	f7fe f91b 	bl	8008d04 <_printf_i>
 800aace:	e7ed      	b.n	800aaac <_svfiprintf_r+0x1c0>
 800aad0:	0800c87e 	.word	0x0800c87e
 800aad4:	0800c888 	.word	0x0800c888
 800aad8:	080087d5 	.word	0x080087d5
 800aadc:	0800a835 	.word	0x0800a835
 800aae0:	0800c884 	.word	0x0800c884

0800aae4 <__sflush_r>:
 800aae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaec:	0716      	lsls	r6, r2, #28
 800aaee:	4605      	mov	r5, r0
 800aaf0:	460c      	mov	r4, r1
 800aaf2:	d454      	bmi.n	800ab9e <__sflush_r+0xba>
 800aaf4:	684b      	ldr	r3, [r1, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	dc02      	bgt.n	800ab00 <__sflush_r+0x1c>
 800aafa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	dd48      	ble.n	800ab92 <__sflush_r+0xae>
 800ab00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab02:	2e00      	cmp	r6, #0
 800ab04:	d045      	beq.n	800ab92 <__sflush_r+0xae>
 800ab06:	2300      	movs	r3, #0
 800ab08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab0c:	682f      	ldr	r7, [r5, #0]
 800ab0e:	6a21      	ldr	r1, [r4, #32]
 800ab10:	602b      	str	r3, [r5, #0]
 800ab12:	d030      	beq.n	800ab76 <__sflush_r+0x92>
 800ab14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab16:	89a3      	ldrh	r3, [r4, #12]
 800ab18:	0759      	lsls	r1, r3, #29
 800ab1a:	d505      	bpl.n	800ab28 <__sflush_r+0x44>
 800ab1c:	6863      	ldr	r3, [r4, #4]
 800ab1e:	1ad2      	subs	r2, r2, r3
 800ab20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab22:	b10b      	cbz	r3, 800ab28 <__sflush_r+0x44>
 800ab24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab26:	1ad2      	subs	r2, r2, r3
 800ab28:	2300      	movs	r3, #0
 800ab2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab2c:	6a21      	ldr	r1, [r4, #32]
 800ab2e:	4628      	mov	r0, r5
 800ab30:	47b0      	blx	r6
 800ab32:	1c43      	adds	r3, r0, #1
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	d106      	bne.n	800ab46 <__sflush_r+0x62>
 800ab38:	6829      	ldr	r1, [r5, #0]
 800ab3a:	291d      	cmp	r1, #29
 800ab3c:	d82b      	bhi.n	800ab96 <__sflush_r+0xb2>
 800ab3e:	4a2a      	ldr	r2, [pc, #168]	@ (800abe8 <__sflush_r+0x104>)
 800ab40:	40ca      	lsrs	r2, r1
 800ab42:	07d6      	lsls	r6, r2, #31
 800ab44:	d527      	bpl.n	800ab96 <__sflush_r+0xb2>
 800ab46:	2200      	movs	r2, #0
 800ab48:	6062      	str	r2, [r4, #4]
 800ab4a:	04d9      	lsls	r1, r3, #19
 800ab4c:	6922      	ldr	r2, [r4, #16]
 800ab4e:	6022      	str	r2, [r4, #0]
 800ab50:	d504      	bpl.n	800ab5c <__sflush_r+0x78>
 800ab52:	1c42      	adds	r2, r0, #1
 800ab54:	d101      	bne.n	800ab5a <__sflush_r+0x76>
 800ab56:	682b      	ldr	r3, [r5, #0]
 800ab58:	b903      	cbnz	r3, 800ab5c <__sflush_r+0x78>
 800ab5a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab5e:	602f      	str	r7, [r5, #0]
 800ab60:	b1b9      	cbz	r1, 800ab92 <__sflush_r+0xae>
 800ab62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab66:	4299      	cmp	r1, r3
 800ab68:	d002      	beq.n	800ab70 <__sflush_r+0x8c>
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	f7ff f9e8 	bl	8009f40 <_free_r>
 800ab70:	2300      	movs	r3, #0
 800ab72:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab74:	e00d      	b.n	800ab92 <__sflush_r+0xae>
 800ab76:	2301      	movs	r3, #1
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b0      	blx	r6
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	1c50      	adds	r0, r2, #1
 800ab80:	d1c9      	bne.n	800ab16 <__sflush_r+0x32>
 800ab82:	682b      	ldr	r3, [r5, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d0c6      	beq.n	800ab16 <__sflush_r+0x32>
 800ab88:	2b1d      	cmp	r3, #29
 800ab8a:	d001      	beq.n	800ab90 <__sflush_r+0xac>
 800ab8c:	2b16      	cmp	r3, #22
 800ab8e:	d11e      	bne.n	800abce <__sflush_r+0xea>
 800ab90:	602f      	str	r7, [r5, #0]
 800ab92:	2000      	movs	r0, #0
 800ab94:	e022      	b.n	800abdc <__sflush_r+0xf8>
 800ab96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab9a:	b21b      	sxth	r3, r3
 800ab9c:	e01b      	b.n	800abd6 <__sflush_r+0xf2>
 800ab9e:	690f      	ldr	r7, [r1, #16]
 800aba0:	2f00      	cmp	r7, #0
 800aba2:	d0f6      	beq.n	800ab92 <__sflush_r+0xae>
 800aba4:	0793      	lsls	r3, r2, #30
 800aba6:	680e      	ldr	r6, [r1, #0]
 800aba8:	bf08      	it	eq
 800abaa:	694b      	ldreq	r3, [r1, #20]
 800abac:	600f      	str	r7, [r1, #0]
 800abae:	bf18      	it	ne
 800abb0:	2300      	movne	r3, #0
 800abb2:	eba6 0807 	sub.w	r8, r6, r7
 800abb6:	608b      	str	r3, [r1, #8]
 800abb8:	f1b8 0f00 	cmp.w	r8, #0
 800abbc:	dde9      	ble.n	800ab92 <__sflush_r+0xae>
 800abbe:	6a21      	ldr	r1, [r4, #32]
 800abc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800abc2:	4643      	mov	r3, r8
 800abc4:	463a      	mov	r2, r7
 800abc6:	4628      	mov	r0, r5
 800abc8:	47b0      	blx	r6
 800abca:	2800      	cmp	r0, #0
 800abcc:	dc08      	bgt.n	800abe0 <__sflush_r+0xfc>
 800abce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abd6:	81a3      	strh	r3, [r4, #12]
 800abd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe0:	4407      	add	r7, r0
 800abe2:	eba8 0800 	sub.w	r8, r8, r0
 800abe6:	e7e7      	b.n	800abb8 <__sflush_r+0xd4>
 800abe8:	20400001 	.word	0x20400001

0800abec <_fflush_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	690b      	ldr	r3, [r1, #16]
 800abf0:	4605      	mov	r5, r0
 800abf2:	460c      	mov	r4, r1
 800abf4:	b913      	cbnz	r3, 800abfc <_fflush_r+0x10>
 800abf6:	2500      	movs	r5, #0
 800abf8:	4628      	mov	r0, r5
 800abfa:	bd38      	pop	{r3, r4, r5, pc}
 800abfc:	b118      	cbz	r0, 800ac06 <_fflush_r+0x1a>
 800abfe:	6a03      	ldr	r3, [r0, #32]
 800ac00:	b90b      	cbnz	r3, 800ac06 <_fflush_r+0x1a>
 800ac02:	f7fe fa29 	bl	8009058 <__sinit>
 800ac06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d0f3      	beq.n	800abf6 <_fflush_r+0xa>
 800ac0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac10:	07d0      	lsls	r0, r2, #31
 800ac12:	d404      	bmi.n	800ac1e <_fflush_r+0x32>
 800ac14:	0599      	lsls	r1, r3, #22
 800ac16:	d402      	bmi.n	800ac1e <_fflush_r+0x32>
 800ac18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac1a:	f7fe fb36 	bl	800928a <__retarget_lock_acquire_recursive>
 800ac1e:	4628      	mov	r0, r5
 800ac20:	4621      	mov	r1, r4
 800ac22:	f7ff ff5f 	bl	800aae4 <__sflush_r>
 800ac26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac28:	07da      	lsls	r2, r3, #31
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	d4e4      	bmi.n	800abf8 <_fflush_r+0xc>
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	059b      	lsls	r3, r3, #22
 800ac32:	d4e1      	bmi.n	800abf8 <_fflush_r+0xc>
 800ac34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac36:	f7fe fb29 	bl	800928c <__retarget_lock_release_recursive>
 800ac3a:	e7dd      	b.n	800abf8 <_fflush_r+0xc>

0800ac3c <memmove>:
 800ac3c:	4288      	cmp	r0, r1
 800ac3e:	b510      	push	{r4, lr}
 800ac40:	eb01 0402 	add.w	r4, r1, r2
 800ac44:	d902      	bls.n	800ac4c <memmove+0x10>
 800ac46:	4284      	cmp	r4, r0
 800ac48:	4623      	mov	r3, r4
 800ac4a:	d807      	bhi.n	800ac5c <memmove+0x20>
 800ac4c:	1e43      	subs	r3, r0, #1
 800ac4e:	42a1      	cmp	r1, r4
 800ac50:	d008      	beq.n	800ac64 <memmove+0x28>
 800ac52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac5a:	e7f8      	b.n	800ac4e <memmove+0x12>
 800ac5c:	4402      	add	r2, r0
 800ac5e:	4601      	mov	r1, r0
 800ac60:	428a      	cmp	r2, r1
 800ac62:	d100      	bne.n	800ac66 <memmove+0x2a>
 800ac64:	bd10      	pop	{r4, pc}
 800ac66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac6e:	e7f7      	b.n	800ac60 <memmove+0x24>

0800ac70 <_sbrk_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4d06      	ldr	r5, [pc, #24]	@ (800ac8c <_sbrk_r+0x1c>)
 800ac74:	2300      	movs	r3, #0
 800ac76:	4604      	mov	r4, r0
 800ac78:	4608      	mov	r0, r1
 800ac7a:	602b      	str	r3, [r5, #0]
 800ac7c:	f7f8 fa52 	bl	8003124 <_sbrk>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	d102      	bne.n	800ac8a <_sbrk_r+0x1a>
 800ac84:	682b      	ldr	r3, [r5, #0]
 800ac86:	b103      	cbz	r3, 800ac8a <_sbrk_r+0x1a>
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	2003dff0 	.word	0x2003dff0

0800ac90 <memcpy>:
 800ac90:	440a      	add	r2, r1
 800ac92:	4291      	cmp	r1, r2
 800ac94:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ac98:	d100      	bne.n	800ac9c <memcpy+0xc>
 800ac9a:	4770      	bx	lr
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aca6:	4291      	cmp	r1, r2
 800aca8:	d1f9      	bne.n	800ac9e <memcpy+0xe>
 800acaa:	bd10      	pop	{r4, pc}

0800acac <__assert_func>:
 800acac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acae:	4614      	mov	r4, r2
 800acb0:	461a      	mov	r2, r3
 800acb2:	4b09      	ldr	r3, [pc, #36]	@ (800acd8 <__assert_func+0x2c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4605      	mov	r5, r0
 800acb8:	68d8      	ldr	r0, [r3, #12]
 800acba:	b14c      	cbz	r4, 800acd0 <__assert_func+0x24>
 800acbc:	4b07      	ldr	r3, [pc, #28]	@ (800acdc <__assert_func+0x30>)
 800acbe:	9100      	str	r1, [sp, #0]
 800acc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800acc4:	4906      	ldr	r1, [pc, #24]	@ (800ace0 <__assert_func+0x34>)
 800acc6:	462b      	mov	r3, r5
 800acc8:	f000 f870 	bl	800adac <fiprintf>
 800accc:	f000 f880 	bl	800add0 <abort>
 800acd0:	4b04      	ldr	r3, [pc, #16]	@ (800ace4 <__assert_func+0x38>)
 800acd2:	461c      	mov	r4, r3
 800acd4:	e7f3      	b.n	800acbe <__assert_func+0x12>
 800acd6:	bf00      	nop
 800acd8:	20000080 	.word	0x20000080
 800acdc:	0800c899 	.word	0x0800c899
 800ace0:	0800c8a6 	.word	0x0800c8a6
 800ace4:	0800c8d4 	.word	0x0800c8d4

0800ace8 <_calloc_r>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	fba1 5402 	umull	r5, r4, r1, r2
 800acee:	b934      	cbnz	r4, 800acfe <_calloc_r+0x16>
 800acf0:	4629      	mov	r1, r5
 800acf2:	f7ff f999 	bl	800a028 <_malloc_r>
 800acf6:	4606      	mov	r6, r0
 800acf8:	b928      	cbnz	r0, 800ad06 <_calloc_r+0x1e>
 800acfa:	4630      	mov	r0, r6
 800acfc:	bd70      	pop	{r4, r5, r6, pc}
 800acfe:	220c      	movs	r2, #12
 800ad00:	6002      	str	r2, [r0, #0]
 800ad02:	2600      	movs	r6, #0
 800ad04:	e7f9      	b.n	800acfa <_calloc_r+0x12>
 800ad06:	462a      	mov	r2, r5
 800ad08:	4621      	mov	r1, r4
 800ad0a:	f7fe fa40 	bl	800918e <memset>
 800ad0e:	e7f4      	b.n	800acfa <_calloc_r+0x12>

0800ad10 <__ascii_mbtowc>:
 800ad10:	b082      	sub	sp, #8
 800ad12:	b901      	cbnz	r1, 800ad16 <__ascii_mbtowc+0x6>
 800ad14:	a901      	add	r1, sp, #4
 800ad16:	b142      	cbz	r2, 800ad2a <__ascii_mbtowc+0x1a>
 800ad18:	b14b      	cbz	r3, 800ad2e <__ascii_mbtowc+0x1e>
 800ad1a:	7813      	ldrb	r3, [r2, #0]
 800ad1c:	600b      	str	r3, [r1, #0]
 800ad1e:	7812      	ldrb	r2, [r2, #0]
 800ad20:	1e10      	subs	r0, r2, #0
 800ad22:	bf18      	it	ne
 800ad24:	2001      	movne	r0, #1
 800ad26:	b002      	add	sp, #8
 800ad28:	4770      	bx	lr
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	e7fb      	b.n	800ad26 <__ascii_mbtowc+0x16>
 800ad2e:	f06f 0001 	mvn.w	r0, #1
 800ad32:	e7f8      	b.n	800ad26 <__ascii_mbtowc+0x16>

0800ad34 <_realloc_r>:
 800ad34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad38:	4607      	mov	r7, r0
 800ad3a:	4614      	mov	r4, r2
 800ad3c:	460d      	mov	r5, r1
 800ad3e:	b921      	cbnz	r1, 800ad4a <_realloc_r+0x16>
 800ad40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad44:	4611      	mov	r1, r2
 800ad46:	f7ff b96f 	b.w	800a028 <_malloc_r>
 800ad4a:	b92a      	cbnz	r2, 800ad58 <_realloc_r+0x24>
 800ad4c:	f7ff f8f8 	bl	8009f40 <_free_r>
 800ad50:	4625      	mov	r5, r4
 800ad52:	4628      	mov	r0, r5
 800ad54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad58:	f000 f841 	bl	800adde <_malloc_usable_size_r>
 800ad5c:	4284      	cmp	r4, r0
 800ad5e:	4606      	mov	r6, r0
 800ad60:	d802      	bhi.n	800ad68 <_realloc_r+0x34>
 800ad62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad66:	d8f4      	bhi.n	800ad52 <_realloc_r+0x1e>
 800ad68:	4621      	mov	r1, r4
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	f7ff f95c 	bl	800a028 <_malloc_r>
 800ad70:	4680      	mov	r8, r0
 800ad72:	b908      	cbnz	r0, 800ad78 <_realloc_r+0x44>
 800ad74:	4645      	mov	r5, r8
 800ad76:	e7ec      	b.n	800ad52 <_realloc_r+0x1e>
 800ad78:	42b4      	cmp	r4, r6
 800ad7a:	4622      	mov	r2, r4
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	bf28      	it	cs
 800ad80:	4632      	movcs	r2, r6
 800ad82:	f7ff ff85 	bl	800ac90 <memcpy>
 800ad86:	4629      	mov	r1, r5
 800ad88:	4638      	mov	r0, r7
 800ad8a:	f7ff f8d9 	bl	8009f40 <_free_r>
 800ad8e:	e7f1      	b.n	800ad74 <_realloc_r+0x40>

0800ad90 <__ascii_wctomb>:
 800ad90:	4603      	mov	r3, r0
 800ad92:	4608      	mov	r0, r1
 800ad94:	b141      	cbz	r1, 800ada8 <__ascii_wctomb+0x18>
 800ad96:	2aff      	cmp	r2, #255	@ 0xff
 800ad98:	d904      	bls.n	800ada4 <__ascii_wctomb+0x14>
 800ad9a:	228a      	movs	r2, #138	@ 0x8a
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ada2:	4770      	bx	lr
 800ada4:	700a      	strb	r2, [r1, #0]
 800ada6:	2001      	movs	r0, #1
 800ada8:	4770      	bx	lr
	...

0800adac <fiprintf>:
 800adac:	b40e      	push	{r1, r2, r3}
 800adae:	b503      	push	{r0, r1, lr}
 800adb0:	4601      	mov	r1, r0
 800adb2:	ab03      	add	r3, sp, #12
 800adb4:	4805      	ldr	r0, [pc, #20]	@ (800adcc <fiprintf+0x20>)
 800adb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adba:	6800      	ldr	r0, [r0, #0]
 800adbc:	9301      	str	r3, [sp, #4]
 800adbe:	f000 f83f 	bl	800ae40 <_vfiprintf_r>
 800adc2:	b002      	add	sp, #8
 800adc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adc8:	b003      	add	sp, #12
 800adca:	4770      	bx	lr
 800adcc:	20000080 	.word	0x20000080

0800add0 <abort>:
 800add0:	b508      	push	{r3, lr}
 800add2:	2006      	movs	r0, #6
 800add4:	f000 fa08 	bl	800b1e8 <raise>
 800add8:	2001      	movs	r0, #1
 800adda:	f7f8 f92b 	bl	8003034 <_exit>

0800adde <_malloc_usable_size_r>:
 800adde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ade2:	1f18      	subs	r0, r3, #4
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bfbc      	itt	lt
 800ade8:	580b      	ldrlt	r3, [r1, r0]
 800adea:	18c0      	addlt	r0, r0, r3
 800adec:	4770      	bx	lr

0800adee <__sfputc_r>:
 800adee:	6893      	ldr	r3, [r2, #8]
 800adf0:	3b01      	subs	r3, #1
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	b410      	push	{r4}
 800adf6:	6093      	str	r3, [r2, #8]
 800adf8:	da08      	bge.n	800ae0c <__sfputc_r+0x1e>
 800adfa:	6994      	ldr	r4, [r2, #24]
 800adfc:	42a3      	cmp	r3, r4
 800adfe:	db01      	blt.n	800ae04 <__sfputc_r+0x16>
 800ae00:	290a      	cmp	r1, #10
 800ae02:	d103      	bne.n	800ae0c <__sfputc_r+0x1e>
 800ae04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae08:	f000 b932 	b.w	800b070 <__swbuf_r>
 800ae0c:	6813      	ldr	r3, [r2, #0]
 800ae0e:	1c58      	adds	r0, r3, #1
 800ae10:	6010      	str	r0, [r2, #0]
 800ae12:	7019      	strb	r1, [r3, #0]
 800ae14:	4608      	mov	r0, r1
 800ae16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <__sfputs_r>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	4606      	mov	r6, r0
 800ae20:	460f      	mov	r7, r1
 800ae22:	4614      	mov	r4, r2
 800ae24:	18d5      	adds	r5, r2, r3
 800ae26:	42ac      	cmp	r4, r5
 800ae28:	d101      	bne.n	800ae2e <__sfputs_r+0x12>
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	e007      	b.n	800ae3e <__sfputs_r+0x22>
 800ae2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae32:	463a      	mov	r2, r7
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7ff ffda 	bl	800adee <__sfputc_r>
 800ae3a:	1c43      	adds	r3, r0, #1
 800ae3c:	d1f3      	bne.n	800ae26 <__sfputs_r+0xa>
 800ae3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae40 <_vfiprintf_r>:
 800ae40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae44:	460d      	mov	r5, r1
 800ae46:	b09d      	sub	sp, #116	@ 0x74
 800ae48:	4614      	mov	r4, r2
 800ae4a:	4698      	mov	r8, r3
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	b118      	cbz	r0, 800ae58 <_vfiprintf_r+0x18>
 800ae50:	6a03      	ldr	r3, [r0, #32]
 800ae52:	b90b      	cbnz	r3, 800ae58 <_vfiprintf_r+0x18>
 800ae54:	f7fe f900 	bl	8009058 <__sinit>
 800ae58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae5a:	07d9      	lsls	r1, r3, #31
 800ae5c:	d405      	bmi.n	800ae6a <_vfiprintf_r+0x2a>
 800ae5e:	89ab      	ldrh	r3, [r5, #12]
 800ae60:	059a      	lsls	r2, r3, #22
 800ae62:	d402      	bmi.n	800ae6a <_vfiprintf_r+0x2a>
 800ae64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae66:	f7fe fa10 	bl	800928a <__retarget_lock_acquire_recursive>
 800ae6a:	89ab      	ldrh	r3, [r5, #12]
 800ae6c:	071b      	lsls	r3, r3, #28
 800ae6e:	d501      	bpl.n	800ae74 <_vfiprintf_r+0x34>
 800ae70:	692b      	ldr	r3, [r5, #16]
 800ae72:	b99b      	cbnz	r3, 800ae9c <_vfiprintf_r+0x5c>
 800ae74:	4629      	mov	r1, r5
 800ae76:	4630      	mov	r0, r6
 800ae78:	f000 f938 	bl	800b0ec <__swsetup_r>
 800ae7c:	b170      	cbz	r0, 800ae9c <_vfiprintf_r+0x5c>
 800ae7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae80:	07dc      	lsls	r4, r3, #31
 800ae82:	d504      	bpl.n	800ae8e <_vfiprintf_r+0x4e>
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae88:	b01d      	add	sp, #116	@ 0x74
 800ae8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8e:	89ab      	ldrh	r3, [r5, #12]
 800ae90:	0598      	lsls	r0, r3, #22
 800ae92:	d4f7      	bmi.n	800ae84 <_vfiprintf_r+0x44>
 800ae94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae96:	f7fe f9f9 	bl	800928c <__retarget_lock_release_recursive>
 800ae9a:	e7f3      	b.n	800ae84 <_vfiprintf_r+0x44>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aea0:	2320      	movs	r3, #32
 800aea2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aea6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeaa:	2330      	movs	r3, #48	@ 0x30
 800aeac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b05c <_vfiprintf_r+0x21c>
 800aeb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aeb4:	f04f 0901 	mov.w	r9, #1
 800aeb8:	4623      	mov	r3, r4
 800aeba:	469a      	mov	sl, r3
 800aebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aec0:	b10a      	cbz	r2, 800aec6 <_vfiprintf_r+0x86>
 800aec2:	2a25      	cmp	r2, #37	@ 0x25
 800aec4:	d1f9      	bne.n	800aeba <_vfiprintf_r+0x7a>
 800aec6:	ebba 0b04 	subs.w	fp, sl, r4
 800aeca:	d00b      	beq.n	800aee4 <_vfiprintf_r+0xa4>
 800aecc:	465b      	mov	r3, fp
 800aece:	4622      	mov	r2, r4
 800aed0:	4629      	mov	r1, r5
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7ff ffa2 	bl	800ae1c <__sfputs_r>
 800aed8:	3001      	adds	r0, #1
 800aeda:	f000 80a7 	beq.w	800b02c <_vfiprintf_r+0x1ec>
 800aede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aee0:	445a      	add	r2, fp
 800aee2:	9209      	str	r2, [sp, #36]	@ 0x24
 800aee4:	f89a 3000 	ldrb.w	r3, [sl]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f000 809f 	beq.w	800b02c <_vfiprintf_r+0x1ec>
 800aeee:	2300      	movs	r3, #0
 800aef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aef8:	f10a 0a01 	add.w	sl, sl, #1
 800aefc:	9304      	str	r3, [sp, #16]
 800aefe:	9307      	str	r3, [sp, #28]
 800af00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af04:	931a      	str	r3, [sp, #104]	@ 0x68
 800af06:	4654      	mov	r4, sl
 800af08:	2205      	movs	r2, #5
 800af0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af0e:	4853      	ldr	r0, [pc, #332]	@ (800b05c <_vfiprintf_r+0x21c>)
 800af10:	f7f5 f97e 	bl	8000210 <memchr>
 800af14:	9a04      	ldr	r2, [sp, #16]
 800af16:	b9d8      	cbnz	r0, 800af50 <_vfiprintf_r+0x110>
 800af18:	06d1      	lsls	r1, r2, #27
 800af1a:	bf44      	itt	mi
 800af1c:	2320      	movmi	r3, #32
 800af1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af22:	0713      	lsls	r3, r2, #28
 800af24:	bf44      	itt	mi
 800af26:	232b      	movmi	r3, #43	@ 0x2b
 800af28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af2c:	f89a 3000 	ldrb.w	r3, [sl]
 800af30:	2b2a      	cmp	r3, #42	@ 0x2a
 800af32:	d015      	beq.n	800af60 <_vfiprintf_r+0x120>
 800af34:	9a07      	ldr	r2, [sp, #28]
 800af36:	4654      	mov	r4, sl
 800af38:	2000      	movs	r0, #0
 800af3a:	f04f 0c0a 	mov.w	ip, #10
 800af3e:	4621      	mov	r1, r4
 800af40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af44:	3b30      	subs	r3, #48	@ 0x30
 800af46:	2b09      	cmp	r3, #9
 800af48:	d94b      	bls.n	800afe2 <_vfiprintf_r+0x1a2>
 800af4a:	b1b0      	cbz	r0, 800af7a <_vfiprintf_r+0x13a>
 800af4c:	9207      	str	r2, [sp, #28]
 800af4e:	e014      	b.n	800af7a <_vfiprintf_r+0x13a>
 800af50:	eba0 0308 	sub.w	r3, r0, r8
 800af54:	fa09 f303 	lsl.w	r3, r9, r3
 800af58:	4313      	orrs	r3, r2
 800af5a:	9304      	str	r3, [sp, #16]
 800af5c:	46a2      	mov	sl, r4
 800af5e:	e7d2      	b.n	800af06 <_vfiprintf_r+0xc6>
 800af60:	9b03      	ldr	r3, [sp, #12]
 800af62:	1d19      	adds	r1, r3, #4
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	9103      	str	r1, [sp, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	bfbb      	ittet	lt
 800af6c:	425b      	neglt	r3, r3
 800af6e:	f042 0202 	orrlt.w	r2, r2, #2
 800af72:	9307      	strge	r3, [sp, #28]
 800af74:	9307      	strlt	r3, [sp, #28]
 800af76:	bfb8      	it	lt
 800af78:	9204      	strlt	r2, [sp, #16]
 800af7a:	7823      	ldrb	r3, [r4, #0]
 800af7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800af7e:	d10a      	bne.n	800af96 <_vfiprintf_r+0x156>
 800af80:	7863      	ldrb	r3, [r4, #1]
 800af82:	2b2a      	cmp	r3, #42	@ 0x2a
 800af84:	d132      	bne.n	800afec <_vfiprintf_r+0x1ac>
 800af86:	9b03      	ldr	r3, [sp, #12]
 800af88:	1d1a      	adds	r2, r3, #4
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	9203      	str	r2, [sp, #12]
 800af8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af92:	3402      	adds	r4, #2
 800af94:	9305      	str	r3, [sp, #20]
 800af96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b06c <_vfiprintf_r+0x22c>
 800af9a:	7821      	ldrb	r1, [r4, #0]
 800af9c:	2203      	movs	r2, #3
 800af9e:	4650      	mov	r0, sl
 800afa0:	f7f5 f936 	bl	8000210 <memchr>
 800afa4:	b138      	cbz	r0, 800afb6 <_vfiprintf_r+0x176>
 800afa6:	9b04      	ldr	r3, [sp, #16]
 800afa8:	eba0 000a 	sub.w	r0, r0, sl
 800afac:	2240      	movs	r2, #64	@ 0x40
 800afae:	4082      	lsls	r2, r0
 800afb0:	4313      	orrs	r3, r2
 800afb2:	3401      	adds	r4, #1
 800afb4:	9304      	str	r3, [sp, #16]
 800afb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afba:	4829      	ldr	r0, [pc, #164]	@ (800b060 <_vfiprintf_r+0x220>)
 800afbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afc0:	2206      	movs	r2, #6
 800afc2:	f7f5 f925 	bl	8000210 <memchr>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d03f      	beq.n	800b04a <_vfiprintf_r+0x20a>
 800afca:	4b26      	ldr	r3, [pc, #152]	@ (800b064 <_vfiprintf_r+0x224>)
 800afcc:	bb1b      	cbnz	r3, 800b016 <_vfiprintf_r+0x1d6>
 800afce:	9b03      	ldr	r3, [sp, #12]
 800afd0:	3307      	adds	r3, #7
 800afd2:	f023 0307 	bic.w	r3, r3, #7
 800afd6:	3308      	adds	r3, #8
 800afd8:	9303      	str	r3, [sp, #12]
 800afda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afdc:	443b      	add	r3, r7
 800afde:	9309      	str	r3, [sp, #36]	@ 0x24
 800afe0:	e76a      	b.n	800aeb8 <_vfiprintf_r+0x78>
 800afe2:	fb0c 3202 	mla	r2, ip, r2, r3
 800afe6:	460c      	mov	r4, r1
 800afe8:	2001      	movs	r0, #1
 800afea:	e7a8      	b.n	800af3e <_vfiprintf_r+0xfe>
 800afec:	2300      	movs	r3, #0
 800afee:	3401      	adds	r4, #1
 800aff0:	9305      	str	r3, [sp, #20]
 800aff2:	4619      	mov	r1, r3
 800aff4:	f04f 0c0a 	mov.w	ip, #10
 800aff8:	4620      	mov	r0, r4
 800affa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800affe:	3a30      	subs	r2, #48	@ 0x30
 800b000:	2a09      	cmp	r2, #9
 800b002:	d903      	bls.n	800b00c <_vfiprintf_r+0x1cc>
 800b004:	2b00      	cmp	r3, #0
 800b006:	d0c6      	beq.n	800af96 <_vfiprintf_r+0x156>
 800b008:	9105      	str	r1, [sp, #20]
 800b00a:	e7c4      	b.n	800af96 <_vfiprintf_r+0x156>
 800b00c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b010:	4604      	mov	r4, r0
 800b012:	2301      	movs	r3, #1
 800b014:	e7f0      	b.n	800aff8 <_vfiprintf_r+0x1b8>
 800b016:	ab03      	add	r3, sp, #12
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	462a      	mov	r2, r5
 800b01c:	4b12      	ldr	r3, [pc, #72]	@ (800b068 <_vfiprintf_r+0x228>)
 800b01e:	a904      	add	r1, sp, #16
 800b020:	4630      	mov	r0, r6
 800b022:	f7fd fbd7 	bl	80087d4 <_printf_float>
 800b026:	4607      	mov	r7, r0
 800b028:	1c78      	adds	r0, r7, #1
 800b02a:	d1d6      	bne.n	800afda <_vfiprintf_r+0x19a>
 800b02c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b02e:	07d9      	lsls	r1, r3, #31
 800b030:	d405      	bmi.n	800b03e <_vfiprintf_r+0x1fe>
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	059a      	lsls	r2, r3, #22
 800b036:	d402      	bmi.n	800b03e <_vfiprintf_r+0x1fe>
 800b038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b03a:	f7fe f927 	bl	800928c <__retarget_lock_release_recursive>
 800b03e:	89ab      	ldrh	r3, [r5, #12]
 800b040:	065b      	lsls	r3, r3, #25
 800b042:	f53f af1f 	bmi.w	800ae84 <_vfiprintf_r+0x44>
 800b046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b048:	e71e      	b.n	800ae88 <_vfiprintf_r+0x48>
 800b04a:	ab03      	add	r3, sp, #12
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	462a      	mov	r2, r5
 800b050:	4b05      	ldr	r3, [pc, #20]	@ (800b068 <_vfiprintf_r+0x228>)
 800b052:	a904      	add	r1, sp, #16
 800b054:	4630      	mov	r0, r6
 800b056:	f7fd fe55 	bl	8008d04 <_printf_i>
 800b05a:	e7e4      	b.n	800b026 <_vfiprintf_r+0x1e6>
 800b05c:	0800c87e 	.word	0x0800c87e
 800b060:	0800c888 	.word	0x0800c888
 800b064:	080087d5 	.word	0x080087d5
 800b068:	0800ae1d 	.word	0x0800ae1d
 800b06c:	0800c884 	.word	0x0800c884

0800b070 <__swbuf_r>:
 800b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b072:	460e      	mov	r6, r1
 800b074:	4614      	mov	r4, r2
 800b076:	4605      	mov	r5, r0
 800b078:	b118      	cbz	r0, 800b082 <__swbuf_r+0x12>
 800b07a:	6a03      	ldr	r3, [r0, #32]
 800b07c:	b90b      	cbnz	r3, 800b082 <__swbuf_r+0x12>
 800b07e:	f7fd ffeb 	bl	8009058 <__sinit>
 800b082:	69a3      	ldr	r3, [r4, #24]
 800b084:	60a3      	str	r3, [r4, #8]
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	071a      	lsls	r2, r3, #28
 800b08a:	d501      	bpl.n	800b090 <__swbuf_r+0x20>
 800b08c:	6923      	ldr	r3, [r4, #16]
 800b08e:	b943      	cbnz	r3, 800b0a2 <__swbuf_r+0x32>
 800b090:	4621      	mov	r1, r4
 800b092:	4628      	mov	r0, r5
 800b094:	f000 f82a 	bl	800b0ec <__swsetup_r>
 800b098:	b118      	cbz	r0, 800b0a2 <__swbuf_r+0x32>
 800b09a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b09e:	4638      	mov	r0, r7
 800b0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	6922      	ldr	r2, [r4, #16]
 800b0a6:	1a98      	subs	r0, r3, r2
 800b0a8:	6963      	ldr	r3, [r4, #20]
 800b0aa:	b2f6      	uxtb	r6, r6
 800b0ac:	4283      	cmp	r3, r0
 800b0ae:	4637      	mov	r7, r6
 800b0b0:	dc05      	bgt.n	800b0be <__swbuf_r+0x4e>
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	f7ff fd99 	bl	800abec <_fflush_r>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d1ed      	bne.n	800b09a <__swbuf_r+0x2a>
 800b0be:	68a3      	ldr	r3, [r4, #8]
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	60a3      	str	r3, [r4, #8]
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	1c5a      	adds	r2, r3, #1
 800b0c8:	6022      	str	r2, [r4, #0]
 800b0ca:	701e      	strb	r6, [r3, #0]
 800b0cc:	6962      	ldr	r2, [r4, #20]
 800b0ce:	1c43      	adds	r3, r0, #1
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d004      	beq.n	800b0de <__swbuf_r+0x6e>
 800b0d4:	89a3      	ldrh	r3, [r4, #12]
 800b0d6:	07db      	lsls	r3, r3, #31
 800b0d8:	d5e1      	bpl.n	800b09e <__swbuf_r+0x2e>
 800b0da:	2e0a      	cmp	r6, #10
 800b0dc:	d1df      	bne.n	800b09e <__swbuf_r+0x2e>
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	f7ff fd83 	bl	800abec <_fflush_r>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d0d9      	beq.n	800b09e <__swbuf_r+0x2e>
 800b0ea:	e7d6      	b.n	800b09a <__swbuf_r+0x2a>

0800b0ec <__swsetup_r>:
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	4b29      	ldr	r3, [pc, #164]	@ (800b194 <__swsetup_r+0xa8>)
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	6818      	ldr	r0, [r3, #0]
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	b118      	cbz	r0, 800b100 <__swsetup_r+0x14>
 800b0f8:	6a03      	ldr	r3, [r0, #32]
 800b0fa:	b90b      	cbnz	r3, 800b100 <__swsetup_r+0x14>
 800b0fc:	f7fd ffac 	bl	8009058 <__sinit>
 800b100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b104:	0719      	lsls	r1, r3, #28
 800b106:	d422      	bmi.n	800b14e <__swsetup_r+0x62>
 800b108:	06da      	lsls	r2, r3, #27
 800b10a:	d407      	bmi.n	800b11c <__swsetup_r+0x30>
 800b10c:	2209      	movs	r2, #9
 800b10e:	602a      	str	r2, [r5, #0]
 800b110:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b114:	81a3      	strh	r3, [r4, #12]
 800b116:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b11a:	e033      	b.n	800b184 <__swsetup_r+0x98>
 800b11c:	0758      	lsls	r0, r3, #29
 800b11e:	d512      	bpl.n	800b146 <__swsetup_r+0x5a>
 800b120:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b122:	b141      	cbz	r1, 800b136 <__swsetup_r+0x4a>
 800b124:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b128:	4299      	cmp	r1, r3
 800b12a:	d002      	beq.n	800b132 <__swsetup_r+0x46>
 800b12c:	4628      	mov	r0, r5
 800b12e:	f7fe ff07 	bl	8009f40 <_free_r>
 800b132:	2300      	movs	r3, #0
 800b134:	6363      	str	r3, [r4, #52]	@ 0x34
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	2300      	movs	r3, #0
 800b140:	6063      	str	r3, [r4, #4]
 800b142:	6923      	ldr	r3, [r4, #16]
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	89a3      	ldrh	r3, [r4, #12]
 800b148:	f043 0308 	orr.w	r3, r3, #8
 800b14c:	81a3      	strh	r3, [r4, #12]
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	b94b      	cbnz	r3, 800b166 <__swsetup_r+0x7a>
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b15c:	d003      	beq.n	800b166 <__swsetup_r+0x7a>
 800b15e:	4621      	mov	r1, r4
 800b160:	4628      	mov	r0, r5
 800b162:	f000 f883 	bl	800b26c <__smakebuf_r>
 800b166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b16a:	f013 0201 	ands.w	r2, r3, #1
 800b16e:	d00a      	beq.n	800b186 <__swsetup_r+0x9a>
 800b170:	2200      	movs	r2, #0
 800b172:	60a2      	str	r2, [r4, #8]
 800b174:	6962      	ldr	r2, [r4, #20]
 800b176:	4252      	negs	r2, r2
 800b178:	61a2      	str	r2, [r4, #24]
 800b17a:	6922      	ldr	r2, [r4, #16]
 800b17c:	b942      	cbnz	r2, 800b190 <__swsetup_r+0xa4>
 800b17e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b182:	d1c5      	bne.n	800b110 <__swsetup_r+0x24>
 800b184:	bd38      	pop	{r3, r4, r5, pc}
 800b186:	0799      	lsls	r1, r3, #30
 800b188:	bf58      	it	pl
 800b18a:	6962      	ldrpl	r2, [r4, #20]
 800b18c:	60a2      	str	r2, [r4, #8]
 800b18e:	e7f4      	b.n	800b17a <__swsetup_r+0x8e>
 800b190:	2000      	movs	r0, #0
 800b192:	e7f7      	b.n	800b184 <__swsetup_r+0x98>
 800b194:	20000080 	.word	0x20000080

0800b198 <_raise_r>:
 800b198:	291f      	cmp	r1, #31
 800b19a:	b538      	push	{r3, r4, r5, lr}
 800b19c:	4605      	mov	r5, r0
 800b19e:	460c      	mov	r4, r1
 800b1a0:	d904      	bls.n	800b1ac <_raise_r+0x14>
 800b1a2:	2316      	movs	r3, #22
 800b1a4:	6003      	str	r3, [r0, #0]
 800b1a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1aa:	bd38      	pop	{r3, r4, r5, pc}
 800b1ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1ae:	b112      	cbz	r2, 800b1b6 <_raise_r+0x1e>
 800b1b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1b4:	b94b      	cbnz	r3, 800b1ca <_raise_r+0x32>
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	f000 f830 	bl	800b21c <_getpid_r>
 800b1bc:	4622      	mov	r2, r4
 800b1be:	4601      	mov	r1, r0
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1c6:	f000 b817 	b.w	800b1f8 <_kill_r>
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d00a      	beq.n	800b1e4 <_raise_r+0x4c>
 800b1ce:	1c59      	adds	r1, r3, #1
 800b1d0:	d103      	bne.n	800b1da <_raise_r+0x42>
 800b1d2:	2316      	movs	r3, #22
 800b1d4:	6003      	str	r3, [r0, #0]
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	e7e7      	b.n	800b1aa <_raise_r+0x12>
 800b1da:	2100      	movs	r1, #0
 800b1dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	4798      	blx	r3
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	e7e0      	b.n	800b1aa <_raise_r+0x12>

0800b1e8 <raise>:
 800b1e8:	4b02      	ldr	r3, [pc, #8]	@ (800b1f4 <raise+0xc>)
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	6818      	ldr	r0, [r3, #0]
 800b1ee:	f7ff bfd3 	b.w	800b198 <_raise_r>
 800b1f2:	bf00      	nop
 800b1f4:	20000080 	.word	0x20000080

0800b1f8 <_kill_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4d07      	ldr	r5, [pc, #28]	@ (800b218 <_kill_r+0x20>)
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	4604      	mov	r4, r0
 800b200:	4608      	mov	r0, r1
 800b202:	4611      	mov	r1, r2
 800b204:	602b      	str	r3, [r5, #0]
 800b206:	f7f7 ff05 	bl	8003014 <_kill>
 800b20a:	1c43      	adds	r3, r0, #1
 800b20c:	d102      	bne.n	800b214 <_kill_r+0x1c>
 800b20e:	682b      	ldr	r3, [r5, #0]
 800b210:	b103      	cbz	r3, 800b214 <_kill_r+0x1c>
 800b212:	6023      	str	r3, [r4, #0]
 800b214:	bd38      	pop	{r3, r4, r5, pc}
 800b216:	bf00      	nop
 800b218:	2003dff0 	.word	0x2003dff0

0800b21c <_getpid_r>:
 800b21c:	f7f7 bef2 	b.w	8003004 <_getpid>

0800b220 <__swhatbuf_r>:
 800b220:	b570      	push	{r4, r5, r6, lr}
 800b222:	460c      	mov	r4, r1
 800b224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b228:	2900      	cmp	r1, #0
 800b22a:	b096      	sub	sp, #88	@ 0x58
 800b22c:	4615      	mov	r5, r2
 800b22e:	461e      	mov	r6, r3
 800b230:	da0d      	bge.n	800b24e <__swhatbuf_r+0x2e>
 800b232:	89a3      	ldrh	r3, [r4, #12]
 800b234:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b238:	f04f 0100 	mov.w	r1, #0
 800b23c:	bf14      	ite	ne
 800b23e:	2340      	movne	r3, #64	@ 0x40
 800b240:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b244:	2000      	movs	r0, #0
 800b246:	6031      	str	r1, [r6, #0]
 800b248:	602b      	str	r3, [r5, #0]
 800b24a:	b016      	add	sp, #88	@ 0x58
 800b24c:	bd70      	pop	{r4, r5, r6, pc}
 800b24e:	466a      	mov	r2, sp
 800b250:	f000 f848 	bl	800b2e4 <_fstat_r>
 800b254:	2800      	cmp	r0, #0
 800b256:	dbec      	blt.n	800b232 <__swhatbuf_r+0x12>
 800b258:	9901      	ldr	r1, [sp, #4]
 800b25a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b25e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b262:	4259      	negs	r1, r3
 800b264:	4159      	adcs	r1, r3
 800b266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b26a:	e7eb      	b.n	800b244 <__swhatbuf_r+0x24>

0800b26c <__smakebuf_r>:
 800b26c:	898b      	ldrh	r3, [r1, #12]
 800b26e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b270:	079d      	lsls	r5, r3, #30
 800b272:	4606      	mov	r6, r0
 800b274:	460c      	mov	r4, r1
 800b276:	d507      	bpl.n	800b288 <__smakebuf_r+0x1c>
 800b278:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	6123      	str	r3, [r4, #16]
 800b280:	2301      	movs	r3, #1
 800b282:	6163      	str	r3, [r4, #20]
 800b284:	b003      	add	sp, #12
 800b286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b288:	ab01      	add	r3, sp, #4
 800b28a:	466a      	mov	r2, sp
 800b28c:	f7ff ffc8 	bl	800b220 <__swhatbuf_r>
 800b290:	9f00      	ldr	r7, [sp, #0]
 800b292:	4605      	mov	r5, r0
 800b294:	4639      	mov	r1, r7
 800b296:	4630      	mov	r0, r6
 800b298:	f7fe fec6 	bl	800a028 <_malloc_r>
 800b29c:	b948      	cbnz	r0, 800b2b2 <__smakebuf_r+0x46>
 800b29e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a2:	059a      	lsls	r2, r3, #22
 800b2a4:	d4ee      	bmi.n	800b284 <__smakebuf_r+0x18>
 800b2a6:	f023 0303 	bic.w	r3, r3, #3
 800b2aa:	f043 0302 	orr.w	r3, r3, #2
 800b2ae:	81a3      	strh	r3, [r4, #12]
 800b2b0:	e7e2      	b.n	800b278 <__smakebuf_r+0xc>
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	6020      	str	r0, [r4, #0]
 800b2b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2ba:	81a3      	strh	r3, [r4, #12]
 800b2bc:	9b01      	ldr	r3, [sp, #4]
 800b2be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b2c2:	b15b      	cbz	r3, 800b2dc <__smakebuf_r+0x70>
 800b2c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	f000 f81d 	bl	800b308 <_isatty_r>
 800b2ce:	b128      	cbz	r0, 800b2dc <__smakebuf_r+0x70>
 800b2d0:	89a3      	ldrh	r3, [r4, #12]
 800b2d2:	f023 0303 	bic.w	r3, r3, #3
 800b2d6:	f043 0301 	orr.w	r3, r3, #1
 800b2da:	81a3      	strh	r3, [r4, #12]
 800b2dc:	89a3      	ldrh	r3, [r4, #12]
 800b2de:	431d      	orrs	r5, r3
 800b2e0:	81a5      	strh	r5, [r4, #12]
 800b2e2:	e7cf      	b.n	800b284 <__smakebuf_r+0x18>

0800b2e4 <_fstat_r>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	4d07      	ldr	r5, [pc, #28]	@ (800b304 <_fstat_r+0x20>)
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	4608      	mov	r0, r1
 800b2ee:	4611      	mov	r1, r2
 800b2f0:	602b      	str	r3, [r5, #0]
 800b2f2:	f7f7 feef 	bl	80030d4 <_fstat>
 800b2f6:	1c43      	adds	r3, r0, #1
 800b2f8:	d102      	bne.n	800b300 <_fstat_r+0x1c>
 800b2fa:	682b      	ldr	r3, [r5, #0]
 800b2fc:	b103      	cbz	r3, 800b300 <_fstat_r+0x1c>
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	bd38      	pop	{r3, r4, r5, pc}
 800b302:	bf00      	nop
 800b304:	2003dff0 	.word	0x2003dff0

0800b308 <_isatty_r>:
 800b308:	b538      	push	{r3, r4, r5, lr}
 800b30a:	4d06      	ldr	r5, [pc, #24]	@ (800b324 <_isatty_r+0x1c>)
 800b30c:	2300      	movs	r3, #0
 800b30e:	4604      	mov	r4, r0
 800b310:	4608      	mov	r0, r1
 800b312:	602b      	str	r3, [r5, #0]
 800b314:	f7f7 feee 	bl	80030f4 <_isatty>
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	d102      	bne.n	800b322 <_isatty_r+0x1a>
 800b31c:	682b      	ldr	r3, [r5, #0]
 800b31e:	b103      	cbz	r3, 800b322 <_isatty_r+0x1a>
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	bd38      	pop	{r3, r4, r5, pc}
 800b324:	2003dff0 	.word	0x2003dff0

0800b328 <cos>:
 800b328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b32a:	ec53 2b10 	vmov	r2, r3, d0
 800b32e:	4826      	ldr	r0, [pc, #152]	@ (800b3c8 <cos+0xa0>)
 800b330:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b334:	4281      	cmp	r1, r0
 800b336:	d806      	bhi.n	800b346 <cos+0x1e>
 800b338:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b3c0 <cos+0x98>
 800b33c:	b005      	add	sp, #20
 800b33e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b342:	f000 b899 	b.w	800b478 <__kernel_cos>
 800b346:	4821      	ldr	r0, [pc, #132]	@ (800b3cc <cos+0xa4>)
 800b348:	4281      	cmp	r1, r0
 800b34a:	d908      	bls.n	800b35e <cos+0x36>
 800b34c:	4610      	mov	r0, r2
 800b34e:	4619      	mov	r1, r3
 800b350:	f7f4 ffba 	bl	80002c8 <__aeabi_dsub>
 800b354:	ec41 0b10 	vmov	d0, r0, r1
 800b358:	b005      	add	sp, #20
 800b35a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b35e:	4668      	mov	r0, sp
 800b360:	f000 fa0e 	bl	800b780 <__ieee754_rem_pio2>
 800b364:	f000 0003 	and.w	r0, r0, #3
 800b368:	2801      	cmp	r0, #1
 800b36a:	d00b      	beq.n	800b384 <cos+0x5c>
 800b36c:	2802      	cmp	r0, #2
 800b36e:	d015      	beq.n	800b39c <cos+0x74>
 800b370:	b9d8      	cbnz	r0, 800b3aa <cos+0x82>
 800b372:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b376:	ed9d 0b00 	vldr	d0, [sp]
 800b37a:	f000 f87d 	bl	800b478 <__kernel_cos>
 800b37e:	ec51 0b10 	vmov	r0, r1, d0
 800b382:	e7e7      	b.n	800b354 <cos+0x2c>
 800b384:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b388:	ed9d 0b00 	vldr	d0, [sp]
 800b38c:	f000 f93c 	bl	800b608 <__kernel_sin>
 800b390:	ec53 2b10 	vmov	r2, r3, d0
 800b394:	4610      	mov	r0, r2
 800b396:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b39a:	e7db      	b.n	800b354 <cos+0x2c>
 800b39c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3a0:	ed9d 0b00 	vldr	d0, [sp]
 800b3a4:	f000 f868 	bl	800b478 <__kernel_cos>
 800b3a8:	e7f2      	b.n	800b390 <cos+0x68>
 800b3aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3ae:	ed9d 0b00 	vldr	d0, [sp]
 800b3b2:	2001      	movs	r0, #1
 800b3b4:	f000 f928 	bl	800b608 <__kernel_sin>
 800b3b8:	e7e1      	b.n	800b37e <cos+0x56>
 800b3ba:	bf00      	nop
 800b3bc:	f3af 8000 	nop.w
	...
 800b3c8:	3fe921fb 	.word	0x3fe921fb
 800b3cc:	7fefffff 	.word	0x7fefffff

0800b3d0 <sin>:
 800b3d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3d2:	ec53 2b10 	vmov	r2, r3, d0
 800b3d6:	4826      	ldr	r0, [pc, #152]	@ (800b470 <sin+0xa0>)
 800b3d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b3dc:	4281      	cmp	r1, r0
 800b3de:	d807      	bhi.n	800b3f0 <sin+0x20>
 800b3e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b468 <sin+0x98>
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	b005      	add	sp, #20
 800b3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3ec:	f000 b90c 	b.w	800b608 <__kernel_sin>
 800b3f0:	4820      	ldr	r0, [pc, #128]	@ (800b474 <sin+0xa4>)
 800b3f2:	4281      	cmp	r1, r0
 800b3f4:	d908      	bls.n	800b408 <sin+0x38>
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	f7f4 ff65 	bl	80002c8 <__aeabi_dsub>
 800b3fe:	ec41 0b10 	vmov	d0, r0, r1
 800b402:	b005      	add	sp, #20
 800b404:	f85d fb04 	ldr.w	pc, [sp], #4
 800b408:	4668      	mov	r0, sp
 800b40a:	f000 f9b9 	bl	800b780 <__ieee754_rem_pio2>
 800b40e:	f000 0003 	and.w	r0, r0, #3
 800b412:	2801      	cmp	r0, #1
 800b414:	d00c      	beq.n	800b430 <sin+0x60>
 800b416:	2802      	cmp	r0, #2
 800b418:	d011      	beq.n	800b43e <sin+0x6e>
 800b41a:	b9e8      	cbnz	r0, 800b458 <sin+0x88>
 800b41c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b420:	ed9d 0b00 	vldr	d0, [sp]
 800b424:	2001      	movs	r0, #1
 800b426:	f000 f8ef 	bl	800b608 <__kernel_sin>
 800b42a:	ec51 0b10 	vmov	r0, r1, d0
 800b42e:	e7e6      	b.n	800b3fe <sin+0x2e>
 800b430:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b434:	ed9d 0b00 	vldr	d0, [sp]
 800b438:	f000 f81e 	bl	800b478 <__kernel_cos>
 800b43c:	e7f5      	b.n	800b42a <sin+0x5a>
 800b43e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b442:	ed9d 0b00 	vldr	d0, [sp]
 800b446:	2001      	movs	r0, #1
 800b448:	f000 f8de 	bl	800b608 <__kernel_sin>
 800b44c:	ec53 2b10 	vmov	r2, r3, d0
 800b450:	4610      	mov	r0, r2
 800b452:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b456:	e7d2      	b.n	800b3fe <sin+0x2e>
 800b458:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b45c:	ed9d 0b00 	vldr	d0, [sp]
 800b460:	f000 f80a 	bl	800b478 <__kernel_cos>
 800b464:	e7f2      	b.n	800b44c <sin+0x7c>
 800b466:	bf00      	nop
	...
 800b470:	3fe921fb 	.word	0x3fe921fb
 800b474:	7fefffff 	.word	0x7fefffff

0800b478 <__kernel_cos>:
 800b478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47c:	ec57 6b10 	vmov	r6, r7, d0
 800b480:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b484:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b488:	ed8d 1b00 	vstr	d1, [sp]
 800b48c:	d206      	bcs.n	800b49c <__kernel_cos+0x24>
 800b48e:	4630      	mov	r0, r6
 800b490:	4639      	mov	r1, r7
 800b492:	f7f5 fb81 	bl	8000b98 <__aeabi_d2iz>
 800b496:	2800      	cmp	r0, #0
 800b498:	f000 8088 	beq.w	800b5ac <__kernel_cos+0x134>
 800b49c:	4632      	mov	r2, r6
 800b49e:	463b      	mov	r3, r7
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	f7f5 f8c8 	bl	8000638 <__aeabi_dmul>
 800b4a8:	4b51      	ldr	r3, [pc, #324]	@ (800b5f0 <__kernel_cos+0x178>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	4604      	mov	r4, r0
 800b4ae:	460d      	mov	r5, r1
 800b4b0:	f7f5 f8c2 	bl	8000638 <__aeabi_dmul>
 800b4b4:	a340      	add	r3, pc, #256	@ (adr r3, 800b5b8 <__kernel_cos+0x140>)
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	4682      	mov	sl, r0
 800b4bc:	468b      	mov	fp, r1
 800b4be:	4620      	mov	r0, r4
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	f7f5 f8b9 	bl	8000638 <__aeabi_dmul>
 800b4c6:	a33e      	add	r3, pc, #248	@ (adr r3, 800b5c0 <__kernel_cos+0x148>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f7f4 fefe 	bl	80002cc <__adddf3>
 800b4d0:	4622      	mov	r2, r4
 800b4d2:	462b      	mov	r3, r5
 800b4d4:	f7f5 f8b0 	bl	8000638 <__aeabi_dmul>
 800b4d8:	a33b      	add	r3, pc, #236	@ (adr r3, 800b5c8 <__kernel_cos+0x150>)
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	f7f4 fef3 	bl	80002c8 <__aeabi_dsub>
 800b4e2:	4622      	mov	r2, r4
 800b4e4:	462b      	mov	r3, r5
 800b4e6:	f7f5 f8a7 	bl	8000638 <__aeabi_dmul>
 800b4ea:	a339      	add	r3, pc, #228	@ (adr r3, 800b5d0 <__kernel_cos+0x158>)
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	f7f4 feec 	bl	80002cc <__adddf3>
 800b4f4:	4622      	mov	r2, r4
 800b4f6:	462b      	mov	r3, r5
 800b4f8:	f7f5 f89e 	bl	8000638 <__aeabi_dmul>
 800b4fc:	a336      	add	r3, pc, #216	@ (adr r3, 800b5d8 <__kernel_cos+0x160>)
 800b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b502:	f7f4 fee1 	bl	80002c8 <__aeabi_dsub>
 800b506:	4622      	mov	r2, r4
 800b508:	462b      	mov	r3, r5
 800b50a:	f7f5 f895 	bl	8000638 <__aeabi_dmul>
 800b50e:	a334      	add	r3, pc, #208	@ (adr r3, 800b5e0 <__kernel_cos+0x168>)
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	f7f4 feda 	bl	80002cc <__adddf3>
 800b518:	4622      	mov	r2, r4
 800b51a:	462b      	mov	r3, r5
 800b51c:	f7f5 f88c 	bl	8000638 <__aeabi_dmul>
 800b520:	4622      	mov	r2, r4
 800b522:	462b      	mov	r3, r5
 800b524:	f7f5 f888 	bl	8000638 <__aeabi_dmul>
 800b528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b52c:	4604      	mov	r4, r0
 800b52e:	460d      	mov	r5, r1
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f5 f880 	bl	8000638 <__aeabi_dmul>
 800b538:	460b      	mov	r3, r1
 800b53a:	4602      	mov	r2, r0
 800b53c:	4629      	mov	r1, r5
 800b53e:	4620      	mov	r0, r4
 800b540:	f7f4 fec2 	bl	80002c8 <__aeabi_dsub>
 800b544:	4b2b      	ldr	r3, [pc, #172]	@ (800b5f4 <__kernel_cos+0x17c>)
 800b546:	4598      	cmp	r8, r3
 800b548:	4606      	mov	r6, r0
 800b54a:	460f      	mov	r7, r1
 800b54c:	d810      	bhi.n	800b570 <__kernel_cos+0xf8>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4650      	mov	r0, sl
 800b554:	4659      	mov	r1, fp
 800b556:	f7f4 feb7 	bl	80002c8 <__aeabi_dsub>
 800b55a:	460b      	mov	r3, r1
 800b55c:	4926      	ldr	r1, [pc, #152]	@ (800b5f8 <__kernel_cos+0x180>)
 800b55e:	4602      	mov	r2, r0
 800b560:	2000      	movs	r0, #0
 800b562:	f7f4 feb1 	bl	80002c8 <__aeabi_dsub>
 800b566:	ec41 0b10 	vmov	d0, r0, r1
 800b56a:	b003      	add	sp, #12
 800b56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b570:	4b22      	ldr	r3, [pc, #136]	@ (800b5fc <__kernel_cos+0x184>)
 800b572:	4921      	ldr	r1, [pc, #132]	@ (800b5f8 <__kernel_cos+0x180>)
 800b574:	4598      	cmp	r8, r3
 800b576:	bf8c      	ite	hi
 800b578:	4d21      	ldrhi	r5, [pc, #132]	@ (800b600 <__kernel_cos+0x188>)
 800b57a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b57e:	2400      	movs	r4, #0
 800b580:	4622      	mov	r2, r4
 800b582:	462b      	mov	r3, r5
 800b584:	2000      	movs	r0, #0
 800b586:	f7f4 fe9f 	bl	80002c8 <__aeabi_dsub>
 800b58a:	4622      	mov	r2, r4
 800b58c:	4680      	mov	r8, r0
 800b58e:	4689      	mov	r9, r1
 800b590:	462b      	mov	r3, r5
 800b592:	4650      	mov	r0, sl
 800b594:	4659      	mov	r1, fp
 800b596:	f7f4 fe97 	bl	80002c8 <__aeabi_dsub>
 800b59a:	4632      	mov	r2, r6
 800b59c:	463b      	mov	r3, r7
 800b59e:	f7f4 fe93 	bl	80002c8 <__aeabi_dsub>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	e7da      	b.n	800b562 <__kernel_cos+0xea>
 800b5ac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b5e8 <__kernel_cos+0x170>
 800b5b0:	e7db      	b.n	800b56a <__kernel_cos+0xf2>
 800b5b2:	bf00      	nop
 800b5b4:	f3af 8000 	nop.w
 800b5b8:	be8838d4 	.word	0xbe8838d4
 800b5bc:	bda8fae9 	.word	0xbda8fae9
 800b5c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b5c4:	3e21ee9e 	.word	0x3e21ee9e
 800b5c8:	809c52ad 	.word	0x809c52ad
 800b5cc:	3e927e4f 	.word	0x3e927e4f
 800b5d0:	19cb1590 	.word	0x19cb1590
 800b5d4:	3efa01a0 	.word	0x3efa01a0
 800b5d8:	16c15177 	.word	0x16c15177
 800b5dc:	3f56c16c 	.word	0x3f56c16c
 800b5e0:	5555554c 	.word	0x5555554c
 800b5e4:	3fa55555 	.word	0x3fa55555
 800b5e8:	00000000 	.word	0x00000000
 800b5ec:	3ff00000 	.word	0x3ff00000
 800b5f0:	3fe00000 	.word	0x3fe00000
 800b5f4:	3fd33332 	.word	0x3fd33332
 800b5f8:	3ff00000 	.word	0x3ff00000
 800b5fc:	3fe90000 	.word	0x3fe90000
 800b600:	3fd20000 	.word	0x3fd20000
 800b604:	00000000 	.word	0x00000000

0800b608 <__kernel_sin>:
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	ec55 4b10 	vmov	r4, r5, d0
 800b610:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b614:	b085      	sub	sp, #20
 800b616:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b61a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b61e:	4680      	mov	r8, r0
 800b620:	d205      	bcs.n	800b62e <__kernel_sin+0x26>
 800b622:	4620      	mov	r0, r4
 800b624:	4629      	mov	r1, r5
 800b626:	f7f5 fab7 	bl	8000b98 <__aeabi_d2iz>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	d052      	beq.n	800b6d4 <__kernel_sin+0xcc>
 800b62e:	4622      	mov	r2, r4
 800b630:	462b      	mov	r3, r5
 800b632:	4620      	mov	r0, r4
 800b634:	4629      	mov	r1, r5
 800b636:	f7f4 ffff 	bl	8000638 <__aeabi_dmul>
 800b63a:	4682      	mov	sl, r0
 800b63c:	468b      	mov	fp, r1
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	4620      	mov	r0, r4
 800b644:	4629      	mov	r1, r5
 800b646:	f7f4 fff7 	bl	8000638 <__aeabi_dmul>
 800b64a:	a342      	add	r3, pc, #264	@ (adr r3, 800b754 <__kernel_sin+0x14c>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	e9cd 0100 	strd	r0, r1, [sp]
 800b654:	4650      	mov	r0, sl
 800b656:	4659      	mov	r1, fp
 800b658:	f7f4 ffee 	bl	8000638 <__aeabi_dmul>
 800b65c:	a33f      	add	r3, pc, #252	@ (adr r3, 800b75c <__kernel_sin+0x154>)
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f7f4 fe31 	bl	80002c8 <__aeabi_dsub>
 800b666:	4652      	mov	r2, sl
 800b668:	465b      	mov	r3, fp
 800b66a:	f7f4 ffe5 	bl	8000638 <__aeabi_dmul>
 800b66e:	a33d      	add	r3, pc, #244	@ (adr r3, 800b764 <__kernel_sin+0x15c>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f7f4 fe2a 	bl	80002cc <__adddf3>
 800b678:	4652      	mov	r2, sl
 800b67a:	465b      	mov	r3, fp
 800b67c:	f7f4 ffdc 	bl	8000638 <__aeabi_dmul>
 800b680:	a33a      	add	r3, pc, #232	@ (adr r3, 800b76c <__kernel_sin+0x164>)
 800b682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b686:	f7f4 fe1f 	bl	80002c8 <__aeabi_dsub>
 800b68a:	4652      	mov	r2, sl
 800b68c:	465b      	mov	r3, fp
 800b68e:	f7f4 ffd3 	bl	8000638 <__aeabi_dmul>
 800b692:	a338      	add	r3, pc, #224	@ (adr r3, 800b774 <__kernel_sin+0x16c>)
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	f7f4 fe18 	bl	80002cc <__adddf3>
 800b69c:	4606      	mov	r6, r0
 800b69e:	460f      	mov	r7, r1
 800b6a0:	f1b8 0f00 	cmp.w	r8, #0
 800b6a4:	d11b      	bne.n	800b6de <__kernel_sin+0xd6>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4650      	mov	r0, sl
 800b6ac:	4659      	mov	r1, fp
 800b6ae:	f7f4 ffc3 	bl	8000638 <__aeabi_dmul>
 800b6b2:	a325      	add	r3, pc, #148	@ (adr r3, 800b748 <__kernel_sin+0x140>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f7f4 fe06 	bl	80002c8 <__aeabi_dsub>
 800b6bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6c0:	f7f4 ffba 	bl	8000638 <__aeabi_dmul>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	f7f4 fdfe 	bl	80002cc <__adddf3>
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	ec45 4b10 	vmov	d0, r4, r5
 800b6d8:	b005      	add	sp, #20
 800b6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6e2:	4b1b      	ldr	r3, [pc, #108]	@ (800b750 <__kernel_sin+0x148>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f7f4 ffa7 	bl	8000638 <__aeabi_dmul>
 800b6ea:	4632      	mov	r2, r6
 800b6ec:	4680      	mov	r8, r0
 800b6ee:	4689      	mov	r9, r1
 800b6f0:	463b      	mov	r3, r7
 800b6f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6f6:	f7f4 ff9f 	bl	8000638 <__aeabi_dmul>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4640      	mov	r0, r8
 800b700:	4649      	mov	r1, r9
 800b702:	f7f4 fde1 	bl	80002c8 <__aeabi_dsub>
 800b706:	4652      	mov	r2, sl
 800b708:	465b      	mov	r3, fp
 800b70a:	f7f4 ff95 	bl	8000638 <__aeabi_dmul>
 800b70e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b712:	f7f4 fdd9 	bl	80002c8 <__aeabi_dsub>
 800b716:	a30c      	add	r3, pc, #48	@ (adr r3, 800b748 <__kernel_sin+0x140>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	4606      	mov	r6, r0
 800b71e:	460f      	mov	r7, r1
 800b720:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b724:	f7f4 ff88 	bl	8000638 <__aeabi_dmul>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	4630      	mov	r0, r6
 800b72e:	4639      	mov	r1, r7
 800b730:	f7f4 fdcc 	bl	80002cc <__adddf3>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4620      	mov	r0, r4
 800b73a:	4629      	mov	r1, r5
 800b73c:	f7f4 fdc4 	bl	80002c8 <__aeabi_dsub>
 800b740:	e7c6      	b.n	800b6d0 <__kernel_sin+0xc8>
 800b742:	bf00      	nop
 800b744:	f3af 8000 	nop.w
 800b748:	55555549 	.word	0x55555549
 800b74c:	3fc55555 	.word	0x3fc55555
 800b750:	3fe00000 	.word	0x3fe00000
 800b754:	5acfd57c 	.word	0x5acfd57c
 800b758:	3de5d93a 	.word	0x3de5d93a
 800b75c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b760:	3e5ae5e6 	.word	0x3e5ae5e6
 800b764:	57b1fe7d 	.word	0x57b1fe7d
 800b768:	3ec71de3 	.word	0x3ec71de3
 800b76c:	19c161d5 	.word	0x19c161d5
 800b770:	3f2a01a0 	.word	0x3f2a01a0
 800b774:	1110f8a6 	.word	0x1110f8a6
 800b778:	3f811111 	.word	0x3f811111
 800b77c:	00000000 	.word	0x00000000

0800b780 <__ieee754_rem_pio2>:
 800b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	ec57 6b10 	vmov	r6, r7, d0
 800b788:	4bc5      	ldr	r3, [pc, #788]	@ (800baa0 <__ieee754_rem_pio2+0x320>)
 800b78a:	b08d      	sub	sp, #52	@ 0x34
 800b78c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b790:	4598      	cmp	r8, r3
 800b792:	4604      	mov	r4, r0
 800b794:	9704      	str	r7, [sp, #16]
 800b796:	d807      	bhi.n	800b7a8 <__ieee754_rem_pio2+0x28>
 800b798:	2200      	movs	r2, #0
 800b79a:	2300      	movs	r3, #0
 800b79c:	ed80 0b00 	vstr	d0, [r0]
 800b7a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b7a4:	2500      	movs	r5, #0
 800b7a6:	e028      	b.n	800b7fa <__ieee754_rem_pio2+0x7a>
 800b7a8:	4bbe      	ldr	r3, [pc, #760]	@ (800baa4 <__ieee754_rem_pio2+0x324>)
 800b7aa:	4598      	cmp	r8, r3
 800b7ac:	d878      	bhi.n	800b8a0 <__ieee754_rem_pio2+0x120>
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	4dbd      	ldr	r5, [pc, #756]	@ (800baa8 <__ieee754_rem_pio2+0x328>)
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ba68 <__ieee754_rem_pio2+0x2e8>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	4639      	mov	r1, r7
 800b7be:	dd38      	ble.n	800b832 <__ieee754_rem_pio2+0xb2>
 800b7c0:	f7f4 fd82 	bl	80002c8 <__aeabi_dsub>
 800b7c4:	45a8      	cmp	r8, r5
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	460f      	mov	r7, r1
 800b7ca:	d01a      	beq.n	800b802 <__ieee754_rem_pio2+0x82>
 800b7cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ba70 <__ieee754_rem_pio2+0x2f0>)
 800b7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d2:	f7f4 fd79 	bl	80002c8 <__aeabi_dsub>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4680      	mov	r8, r0
 800b7dc:	4689      	mov	r9, r1
 800b7de:	4630      	mov	r0, r6
 800b7e0:	4639      	mov	r1, r7
 800b7e2:	f7f4 fd71 	bl	80002c8 <__aeabi_dsub>
 800b7e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ba70 <__ieee754_rem_pio2+0x2f0>)
 800b7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ec:	f7f4 fd6c 	bl	80002c8 <__aeabi_dsub>
 800b7f0:	e9c4 8900 	strd	r8, r9, [r4]
 800b7f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b7f8:	2501      	movs	r5, #1
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	b00d      	add	sp, #52	@ 0x34
 800b7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b802:	a39d      	add	r3, pc, #628	@ (adr r3, 800ba78 <__ieee754_rem_pio2+0x2f8>)
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f7f4 fd5e 	bl	80002c8 <__aeabi_dsub>
 800b80c:	a39c      	add	r3, pc, #624	@ (adr r3, 800ba80 <__ieee754_rem_pio2+0x300>)
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	4606      	mov	r6, r0
 800b814:	460f      	mov	r7, r1
 800b816:	f7f4 fd57 	bl	80002c8 <__aeabi_dsub>
 800b81a:	4602      	mov	r2, r0
 800b81c:	460b      	mov	r3, r1
 800b81e:	4680      	mov	r8, r0
 800b820:	4689      	mov	r9, r1
 800b822:	4630      	mov	r0, r6
 800b824:	4639      	mov	r1, r7
 800b826:	f7f4 fd4f 	bl	80002c8 <__aeabi_dsub>
 800b82a:	a395      	add	r3, pc, #596	@ (adr r3, 800ba80 <__ieee754_rem_pio2+0x300>)
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	e7dc      	b.n	800b7ec <__ieee754_rem_pio2+0x6c>
 800b832:	f7f4 fd4b 	bl	80002cc <__adddf3>
 800b836:	45a8      	cmp	r8, r5
 800b838:	4606      	mov	r6, r0
 800b83a:	460f      	mov	r7, r1
 800b83c:	d018      	beq.n	800b870 <__ieee754_rem_pio2+0xf0>
 800b83e:	a38c      	add	r3, pc, #560	@ (adr r3, 800ba70 <__ieee754_rem_pio2+0x2f0>)
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	f7f4 fd42 	bl	80002cc <__adddf3>
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	4680      	mov	r8, r0
 800b84e:	4689      	mov	r9, r1
 800b850:	4630      	mov	r0, r6
 800b852:	4639      	mov	r1, r7
 800b854:	f7f4 fd38 	bl	80002c8 <__aeabi_dsub>
 800b858:	a385      	add	r3, pc, #532	@ (adr r3, 800ba70 <__ieee754_rem_pio2+0x2f0>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	f7f4 fd35 	bl	80002cc <__adddf3>
 800b862:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b866:	e9c4 8900 	strd	r8, r9, [r4]
 800b86a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b86e:	e7c4      	b.n	800b7fa <__ieee754_rem_pio2+0x7a>
 800b870:	a381      	add	r3, pc, #516	@ (adr r3, 800ba78 <__ieee754_rem_pio2+0x2f8>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	f7f4 fd29 	bl	80002cc <__adddf3>
 800b87a:	a381      	add	r3, pc, #516	@ (adr r3, 800ba80 <__ieee754_rem_pio2+0x300>)
 800b87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b880:	4606      	mov	r6, r0
 800b882:	460f      	mov	r7, r1
 800b884:	f7f4 fd22 	bl	80002cc <__adddf3>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4680      	mov	r8, r0
 800b88e:	4689      	mov	r9, r1
 800b890:	4630      	mov	r0, r6
 800b892:	4639      	mov	r1, r7
 800b894:	f7f4 fd18 	bl	80002c8 <__aeabi_dsub>
 800b898:	a379      	add	r3, pc, #484	@ (adr r3, 800ba80 <__ieee754_rem_pio2+0x300>)
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	e7de      	b.n	800b85e <__ieee754_rem_pio2+0xde>
 800b8a0:	4b82      	ldr	r3, [pc, #520]	@ (800baac <__ieee754_rem_pio2+0x32c>)
 800b8a2:	4598      	cmp	r8, r3
 800b8a4:	f200 80d1 	bhi.w	800ba4a <__ieee754_rem_pio2+0x2ca>
 800b8a8:	f000 f966 	bl	800bb78 <fabs>
 800b8ac:	ec57 6b10 	vmov	r6, r7, d0
 800b8b0:	a375      	add	r3, pc, #468	@ (adr r3, 800ba88 <__ieee754_rem_pio2+0x308>)
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	4639      	mov	r1, r7
 800b8ba:	f7f4 febd 	bl	8000638 <__aeabi_dmul>
 800b8be:	4b7c      	ldr	r3, [pc, #496]	@ (800bab0 <__ieee754_rem_pio2+0x330>)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f7f4 fd03 	bl	80002cc <__adddf3>
 800b8c6:	f7f5 f967 	bl	8000b98 <__aeabi_d2iz>
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	f7f4 fe4a 	bl	8000564 <__aeabi_i2d>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8d8:	a363      	add	r3, pc, #396	@ (adr r3, 800ba68 <__ieee754_rem_pio2+0x2e8>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	f7f4 feab 	bl	8000638 <__aeabi_dmul>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	4639      	mov	r1, r7
 800b8ea:	f7f4 fced 	bl	80002c8 <__aeabi_dsub>
 800b8ee:	a360      	add	r3, pc, #384	@ (adr r3, 800ba70 <__ieee754_rem_pio2+0x2f0>)
 800b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f4:	4682      	mov	sl, r0
 800b8f6:	468b      	mov	fp, r1
 800b8f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8fc:	f7f4 fe9c 	bl	8000638 <__aeabi_dmul>
 800b900:	2d1f      	cmp	r5, #31
 800b902:	4606      	mov	r6, r0
 800b904:	460f      	mov	r7, r1
 800b906:	dc0c      	bgt.n	800b922 <__ieee754_rem_pio2+0x1a2>
 800b908:	4b6a      	ldr	r3, [pc, #424]	@ (800bab4 <__ieee754_rem_pio2+0x334>)
 800b90a:	1e6a      	subs	r2, r5, #1
 800b90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b910:	4543      	cmp	r3, r8
 800b912:	d006      	beq.n	800b922 <__ieee754_rem_pio2+0x1a2>
 800b914:	4632      	mov	r2, r6
 800b916:	463b      	mov	r3, r7
 800b918:	4650      	mov	r0, sl
 800b91a:	4659      	mov	r1, fp
 800b91c:	f7f4 fcd4 	bl	80002c8 <__aeabi_dsub>
 800b920:	e00e      	b.n	800b940 <__ieee754_rem_pio2+0x1c0>
 800b922:	463b      	mov	r3, r7
 800b924:	4632      	mov	r2, r6
 800b926:	4650      	mov	r0, sl
 800b928:	4659      	mov	r1, fp
 800b92a:	f7f4 fccd 	bl	80002c8 <__aeabi_dsub>
 800b92e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b932:	9305      	str	r3, [sp, #20]
 800b934:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b938:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b93c:	2b10      	cmp	r3, #16
 800b93e:	dc02      	bgt.n	800b946 <__ieee754_rem_pio2+0x1c6>
 800b940:	e9c4 0100 	strd	r0, r1, [r4]
 800b944:	e039      	b.n	800b9ba <__ieee754_rem_pio2+0x23a>
 800b946:	a34c      	add	r3, pc, #304	@ (adr r3, 800ba78 <__ieee754_rem_pio2+0x2f8>)
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b950:	f7f4 fe72 	bl	8000638 <__aeabi_dmul>
 800b954:	4606      	mov	r6, r0
 800b956:	460f      	mov	r7, r1
 800b958:	4602      	mov	r2, r0
 800b95a:	460b      	mov	r3, r1
 800b95c:	4650      	mov	r0, sl
 800b95e:	4659      	mov	r1, fp
 800b960:	f7f4 fcb2 	bl	80002c8 <__aeabi_dsub>
 800b964:	4602      	mov	r2, r0
 800b966:	460b      	mov	r3, r1
 800b968:	4680      	mov	r8, r0
 800b96a:	4689      	mov	r9, r1
 800b96c:	4650      	mov	r0, sl
 800b96e:	4659      	mov	r1, fp
 800b970:	f7f4 fcaa 	bl	80002c8 <__aeabi_dsub>
 800b974:	4632      	mov	r2, r6
 800b976:	463b      	mov	r3, r7
 800b978:	f7f4 fca6 	bl	80002c8 <__aeabi_dsub>
 800b97c:	a340      	add	r3, pc, #256	@ (adr r3, 800ba80 <__ieee754_rem_pio2+0x300>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	4606      	mov	r6, r0
 800b984:	460f      	mov	r7, r1
 800b986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b98a:	f7f4 fe55 	bl	8000638 <__aeabi_dmul>
 800b98e:	4632      	mov	r2, r6
 800b990:	463b      	mov	r3, r7
 800b992:	f7f4 fc99 	bl	80002c8 <__aeabi_dsub>
 800b996:	4602      	mov	r2, r0
 800b998:	460b      	mov	r3, r1
 800b99a:	4606      	mov	r6, r0
 800b99c:	460f      	mov	r7, r1
 800b99e:	4640      	mov	r0, r8
 800b9a0:	4649      	mov	r1, r9
 800b9a2:	f7f4 fc91 	bl	80002c8 <__aeabi_dsub>
 800b9a6:	9a05      	ldr	r2, [sp, #20]
 800b9a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	2b31      	cmp	r3, #49	@ 0x31
 800b9b0:	dc20      	bgt.n	800b9f4 <__ieee754_rem_pio2+0x274>
 800b9b2:	e9c4 0100 	strd	r0, r1, [r4]
 800b9b6:	46c2      	mov	sl, r8
 800b9b8:	46cb      	mov	fp, r9
 800b9ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b9be:	4650      	mov	r0, sl
 800b9c0:	4642      	mov	r2, r8
 800b9c2:	464b      	mov	r3, r9
 800b9c4:	4659      	mov	r1, fp
 800b9c6:	f7f4 fc7f 	bl	80002c8 <__aeabi_dsub>
 800b9ca:	463b      	mov	r3, r7
 800b9cc:	4632      	mov	r2, r6
 800b9ce:	f7f4 fc7b 	bl	80002c8 <__aeabi_dsub>
 800b9d2:	9b04      	ldr	r3, [sp, #16]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b9da:	f6bf af0e 	bge.w	800b7fa <__ieee754_rem_pio2+0x7a>
 800b9de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b9e2:	6063      	str	r3, [r4, #4]
 800b9e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b9e8:	f8c4 8000 	str.w	r8, [r4]
 800b9ec:	60a0      	str	r0, [r4, #8]
 800b9ee:	60e3      	str	r3, [r4, #12]
 800b9f0:	426d      	negs	r5, r5
 800b9f2:	e702      	b.n	800b7fa <__ieee754_rem_pio2+0x7a>
 800b9f4:	a326      	add	r3, pc, #152	@ (adr r3, 800ba90 <__ieee754_rem_pio2+0x310>)
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9fe:	f7f4 fe1b 	bl	8000638 <__aeabi_dmul>
 800ba02:	4606      	mov	r6, r0
 800ba04:	460f      	mov	r7, r1
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	4649      	mov	r1, r9
 800ba0e:	f7f4 fc5b 	bl	80002c8 <__aeabi_dsub>
 800ba12:	4602      	mov	r2, r0
 800ba14:	460b      	mov	r3, r1
 800ba16:	4682      	mov	sl, r0
 800ba18:	468b      	mov	fp, r1
 800ba1a:	4640      	mov	r0, r8
 800ba1c:	4649      	mov	r1, r9
 800ba1e:	f7f4 fc53 	bl	80002c8 <__aeabi_dsub>
 800ba22:	4632      	mov	r2, r6
 800ba24:	463b      	mov	r3, r7
 800ba26:	f7f4 fc4f 	bl	80002c8 <__aeabi_dsub>
 800ba2a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ba98 <__ieee754_rem_pio2+0x318>)
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	4606      	mov	r6, r0
 800ba32:	460f      	mov	r7, r1
 800ba34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba38:	f7f4 fdfe 	bl	8000638 <__aeabi_dmul>
 800ba3c:	4632      	mov	r2, r6
 800ba3e:	463b      	mov	r3, r7
 800ba40:	f7f4 fc42 	bl	80002c8 <__aeabi_dsub>
 800ba44:	4606      	mov	r6, r0
 800ba46:	460f      	mov	r7, r1
 800ba48:	e764      	b.n	800b914 <__ieee754_rem_pio2+0x194>
 800ba4a:	4b1b      	ldr	r3, [pc, #108]	@ (800bab8 <__ieee754_rem_pio2+0x338>)
 800ba4c:	4598      	cmp	r8, r3
 800ba4e:	d935      	bls.n	800babc <__ieee754_rem_pio2+0x33c>
 800ba50:	4632      	mov	r2, r6
 800ba52:	463b      	mov	r3, r7
 800ba54:	4630      	mov	r0, r6
 800ba56:	4639      	mov	r1, r7
 800ba58:	f7f4 fc36 	bl	80002c8 <__aeabi_dsub>
 800ba5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba60:	e9c4 0100 	strd	r0, r1, [r4]
 800ba64:	e69e      	b.n	800b7a4 <__ieee754_rem_pio2+0x24>
 800ba66:	bf00      	nop
 800ba68:	54400000 	.word	0x54400000
 800ba6c:	3ff921fb 	.word	0x3ff921fb
 800ba70:	1a626331 	.word	0x1a626331
 800ba74:	3dd0b461 	.word	0x3dd0b461
 800ba78:	1a600000 	.word	0x1a600000
 800ba7c:	3dd0b461 	.word	0x3dd0b461
 800ba80:	2e037073 	.word	0x2e037073
 800ba84:	3ba3198a 	.word	0x3ba3198a
 800ba88:	6dc9c883 	.word	0x6dc9c883
 800ba8c:	3fe45f30 	.word	0x3fe45f30
 800ba90:	2e000000 	.word	0x2e000000
 800ba94:	3ba3198a 	.word	0x3ba3198a
 800ba98:	252049c1 	.word	0x252049c1
 800ba9c:	397b839a 	.word	0x397b839a
 800baa0:	3fe921fb 	.word	0x3fe921fb
 800baa4:	4002d97b 	.word	0x4002d97b
 800baa8:	3ff921fb 	.word	0x3ff921fb
 800baac:	413921fb 	.word	0x413921fb
 800bab0:	3fe00000 	.word	0x3fe00000
 800bab4:	0800cadc 	.word	0x0800cadc
 800bab8:	7fefffff 	.word	0x7fefffff
 800babc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800bac0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800bac4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800bac8:	4630      	mov	r0, r6
 800baca:	460f      	mov	r7, r1
 800bacc:	f7f5 f864 	bl	8000b98 <__aeabi_d2iz>
 800bad0:	f7f4 fd48 	bl	8000564 <__aeabi_i2d>
 800bad4:	4602      	mov	r2, r0
 800bad6:	460b      	mov	r3, r1
 800bad8:	4630      	mov	r0, r6
 800bada:	4639      	mov	r1, r7
 800badc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bae0:	f7f4 fbf2 	bl	80002c8 <__aeabi_dsub>
 800bae4:	4b22      	ldr	r3, [pc, #136]	@ (800bb70 <__ieee754_rem_pio2+0x3f0>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	f7f4 fda6 	bl	8000638 <__aeabi_dmul>
 800baec:	460f      	mov	r7, r1
 800baee:	4606      	mov	r6, r0
 800baf0:	f7f5 f852 	bl	8000b98 <__aeabi_d2iz>
 800baf4:	f7f4 fd36 	bl	8000564 <__aeabi_i2d>
 800baf8:	4602      	mov	r2, r0
 800bafa:	460b      	mov	r3, r1
 800bafc:	4630      	mov	r0, r6
 800bafe:	4639      	mov	r1, r7
 800bb00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bb04:	f7f4 fbe0 	bl	80002c8 <__aeabi_dsub>
 800bb08:	4b19      	ldr	r3, [pc, #100]	@ (800bb70 <__ieee754_rem_pio2+0x3f0>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f7f4 fd94 	bl	8000638 <__aeabi_dmul>
 800bb10:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800bb14:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800bb18:	f04f 0803 	mov.w	r8, #3
 800bb1c:	2600      	movs	r6, #0
 800bb1e:	2700      	movs	r7, #0
 800bb20:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bb24:	4632      	mov	r2, r6
 800bb26:	463b      	mov	r3, r7
 800bb28:	46c2      	mov	sl, r8
 800bb2a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800bb2e:	f7f4 ffeb 	bl	8000b08 <__aeabi_dcmpeq>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d1f4      	bne.n	800bb20 <__ieee754_rem_pio2+0x3a0>
 800bb36:	4b0f      	ldr	r3, [pc, #60]	@ (800bb74 <__ieee754_rem_pio2+0x3f4>)
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	462a      	mov	r2, r5
 800bb40:	4653      	mov	r3, sl
 800bb42:	4621      	mov	r1, r4
 800bb44:	a806      	add	r0, sp, #24
 800bb46:	f000 f81f 	bl	800bb88 <__kernel_rem_pio2>
 800bb4a:	9b04      	ldr	r3, [sp, #16]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	4605      	mov	r5, r0
 800bb50:	f6bf ae53 	bge.w	800b7fa <__ieee754_rem_pio2+0x7a>
 800bb54:	e9d4 2100 	ldrd	r2, r1, [r4]
 800bb58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb5c:	e9c4 2300 	strd	r2, r3, [r4]
 800bb60:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800bb64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bb6c:	e740      	b.n	800b9f0 <__ieee754_rem_pio2+0x270>
 800bb6e:	bf00      	nop
 800bb70:	41700000 	.word	0x41700000
 800bb74:	0800cb5c 	.word	0x0800cb5c

0800bb78 <fabs>:
 800bb78:	ec51 0b10 	vmov	r0, r1, d0
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bb82:	ec43 2b10 	vmov	d0, r2, r3
 800bb86:	4770      	bx	lr

0800bb88 <__kernel_rem_pio2>:
 800bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	ed2d 8b02 	vpush	{d8}
 800bb90:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800bb94:	f112 0f14 	cmn.w	r2, #20
 800bb98:	9306      	str	r3, [sp, #24]
 800bb9a:	9104      	str	r1, [sp, #16]
 800bb9c:	4bc2      	ldr	r3, [pc, #776]	@ (800bea8 <__kernel_rem_pio2+0x320>)
 800bb9e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800bba0:	9008      	str	r0, [sp, #32]
 800bba2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	9b06      	ldr	r3, [sp, #24]
 800bbaa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bbae:	bfa8      	it	ge
 800bbb0:	1ed4      	subge	r4, r2, #3
 800bbb2:	9305      	str	r3, [sp, #20]
 800bbb4:	bfb2      	itee	lt
 800bbb6:	2400      	movlt	r4, #0
 800bbb8:	2318      	movge	r3, #24
 800bbba:	fb94 f4f3 	sdivge	r4, r4, r3
 800bbbe:	f06f 0317 	mvn.w	r3, #23
 800bbc2:	fb04 3303 	mla	r3, r4, r3, r3
 800bbc6:	eb03 0b02 	add.w	fp, r3, r2
 800bbca:	9b00      	ldr	r3, [sp, #0]
 800bbcc:	9a05      	ldr	r2, [sp, #20]
 800bbce:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800be98 <__kernel_rem_pio2+0x310>
 800bbd2:	eb03 0802 	add.w	r8, r3, r2
 800bbd6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bbd8:	1aa7      	subs	r7, r4, r2
 800bbda:	ae20      	add	r6, sp, #128	@ 0x80
 800bbdc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bbe0:	2500      	movs	r5, #0
 800bbe2:	4545      	cmp	r5, r8
 800bbe4:	dd12      	ble.n	800bc0c <__kernel_rem_pio2+0x84>
 800bbe6:	9b06      	ldr	r3, [sp, #24]
 800bbe8:	aa20      	add	r2, sp, #128	@ 0x80
 800bbea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bbee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800bbf2:	2700      	movs	r7, #0
 800bbf4:	9b00      	ldr	r3, [sp, #0]
 800bbf6:	429f      	cmp	r7, r3
 800bbf8:	dc2e      	bgt.n	800bc58 <__kernel_rem_pio2+0xd0>
 800bbfa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800be98 <__kernel_rem_pio2+0x310>
 800bbfe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc02:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc06:	46a8      	mov	r8, r5
 800bc08:	2600      	movs	r6, #0
 800bc0a:	e01b      	b.n	800bc44 <__kernel_rem_pio2+0xbc>
 800bc0c:	42ef      	cmn	r7, r5
 800bc0e:	d407      	bmi.n	800bc20 <__kernel_rem_pio2+0x98>
 800bc10:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bc14:	f7f4 fca6 	bl	8000564 <__aeabi_i2d>
 800bc18:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bc1c:	3501      	adds	r5, #1
 800bc1e:	e7e0      	b.n	800bbe2 <__kernel_rem_pio2+0x5a>
 800bc20:	ec51 0b18 	vmov	r0, r1, d8
 800bc24:	e7f8      	b.n	800bc18 <__kernel_rem_pio2+0x90>
 800bc26:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800bc2a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bc2e:	f7f4 fd03 	bl	8000638 <__aeabi_dmul>
 800bc32:	4602      	mov	r2, r0
 800bc34:	460b      	mov	r3, r1
 800bc36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc3a:	f7f4 fb47 	bl	80002cc <__adddf3>
 800bc3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc42:	3601      	adds	r6, #1
 800bc44:	9b05      	ldr	r3, [sp, #20]
 800bc46:	429e      	cmp	r6, r3
 800bc48:	dded      	ble.n	800bc26 <__kernel_rem_pio2+0x9e>
 800bc4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc4e:	3701      	adds	r7, #1
 800bc50:	ecaa 7b02 	vstmia	sl!, {d7}
 800bc54:	3508      	adds	r5, #8
 800bc56:	e7cd      	b.n	800bbf4 <__kernel_rem_pio2+0x6c>
 800bc58:	9b00      	ldr	r3, [sp, #0]
 800bc5a:	f8dd 8000 	ldr.w	r8, [sp]
 800bc5e:	aa0c      	add	r2, sp, #48	@ 0x30
 800bc60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc64:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc66:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bc68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bc6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc6e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800bc72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc74:	ab98      	add	r3, sp, #608	@ 0x260
 800bc76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bc7a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800bc7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc82:	ac0c      	add	r4, sp, #48	@ 0x30
 800bc84:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bc86:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800bc8a:	46a1      	mov	r9, r4
 800bc8c:	46c2      	mov	sl, r8
 800bc8e:	f1ba 0f00 	cmp.w	sl, #0
 800bc92:	dc77      	bgt.n	800bd84 <__kernel_rem_pio2+0x1fc>
 800bc94:	4658      	mov	r0, fp
 800bc96:	ed9d 0b02 	vldr	d0, [sp, #8]
 800bc9a:	f000 fac5 	bl	800c228 <scalbn>
 800bc9e:	ec57 6b10 	vmov	r6, r7, d0
 800bca2:	2200      	movs	r2, #0
 800bca4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800bca8:	4630      	mov	r0, r6
 800bcaa:	4639      	mov	r1, r7
 800bcac:	f7f4 fcc4 	bl	8000638 <__aeabi_dmul>
 800bcb0:	ec41 0b10 	vmov	d0, r0, r1
 800bcb4:	f000 fb34 	bl	800c320 <floor>
 800bcb8:	4b7c      	ldr	r3, [pc, #496]	@ (800beac <__kernel_rem_pio2+0x324>)
 800bcba:	ec51 0b10 	vmov	r0, r1, d0
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f7f4 fcba 	bl	8000638 <__aeabi_dmul>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	4630      	mov	r0, r6
 800bcca:	4639      	mov	r1, r7
 800bccc:	f7f4 fafc 	bl	80002c8 <__aeabi_dsub>
 800bcd0:	460f      	mov	r7, r1
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	f7f4 ff60 	bl	8000b98 <__aeabi_d2iz>
 800bcd8:	9002      	str	r0, [sp, #8]
 800bcda:	f7f4 fc43 	bl	8000564 <__aeabi_i2d>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	4630      	mov	r0, r6
 800bce4:	4639      	mov	r1, r7
 800bce6:	f7f4 faef 	bl	80002c8 <__aeabi_dsub>
 800bcea:	f1bb 0f00 	cmp.w	fp, #0
 800bcee:	4606      	mov	r6, r0
 800bcf0:	460f      	mov	r7, r1
 800bcf2:	dd6c      	ble.n	800bdce <__kernel_rem_pio2+0x246>
 800bcf4:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800bcf8:	ab0c      	add	r3, sp, #48	@ 0x30
 800bcfa:	9d02      	ldr	r5, [sp, #8]
 800bcfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd00:	f1cb 0018 	rsb	r0, fp, #24
 800bd04:	fa43 f200 	asr.w	r2, r3, r0
 800bd08:	4415      	add	r5, r2
 800bd0a:	4082      	lsls	r2, r0
 800bd0c:	1a9b      	subs	r3, r3, r2
 800bd0e:	aa0c      	add	r2, sp, #48	@ 0x30
 800bd10:	9502      	str	r5, [sp, #8]
 800bd12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bd16:	f1cb 0217 	rsb	r2, fp, #23
 800bd1a:	fa43 f902 	asr.w	r9, r3, r2
 800bd1e:	f1b9 0f00 	cmp.w	r9, #0
 800bd22:	dd64      	ble.n	800bdee <__kernel_rem_pio2+0x266>
 800bd24:	9b02      	ldr	r3, [sp, #8]
 800bd26:	2200      	movs	r2, #0
 800bd28:	3301      	adds	r3, #1
 800bd2a:	9302      	str	r3, [sp, #8]
 800bd2c:	4615      	mov	r5, r2
 800bd2e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800bd32:	4590      	cmp	r8, r2
 800bd34:	f300 80a1 	bgt.w	800be7a <__kernel_rem_pio2+0x2f2>
 800bd38:	f1bb 0f00 	cmp.w	fp, #0
 800bd3c:	dd07      	ble.n	800bd4e <__kernel_rem_pio2+0x1c6>
 800bd3e:	f1bb 0f01 	cmp.w	fp, #1
 800bd42:	f000 80c1 	beq.w	800bec8 <__kernel_rem_pio2+0x340>
 800bd46:	f1bb 0f02 	cmp.w	fp, #2
 800bd4a:	f000 80c8 	beq.w	800bede <__kernel_rem_pio2+0x356>
 800bd4e:	f1b9 0f02 	cmp.w	r9, #2
 800bd52:	d14c      	bne.n	800bdee <__kernel_rem_pio2+0x266>
 800bd54:	4632      	mov	r2, r6
 800bd56:	463b      	mov	r3, r7
 800bd58:	4955      	ldr	r1, [pc, #340]	@ (800beb0 <__kernel_rem_pio2+0x328>)
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	f7f4 fab4 	bl	80002c8 <__aeabi_dsub>
 800bd60:	4606      	mov	r6, r0
 800bd62:	460f      	mov	r7, r1
 800bd64:	2d00      	cmp	r5, #0
 800bd66:	d042      	beq.n	800bdee <__kernel_rem_pio2+0x266>
 800bd68:	4658      	mov	r0, fp
 800bd6a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800bea0 <__kernel_rem_pio2+0x318>
 800bd6e:	f000 fa5b 	bl	800c228 <scalbn>
 800bd72:	4630      	mov	r0, r6
 800bd74:	4639      	mov	r1, r7
 800bd76:	ec53 2b10 	vmov	r2, r3, d0
 800bd7a:	f7f4 faa5 	bl	80002c8 <__aeabi_dsub>
 800bd7e:	4606      	mov	r6, r0
 800bd80:	460f      	mov	r7, r1
 800bd82:	e034      	b.n	800bdee <__kernel_rem_pio2+0x266>
 800bd84:	4b4b      	ldr	r3, [pc, #300]	@ (800beb4 <__kernel_rem_pio2+0x32c>)
 800bd86:	2200      	movs	r2, #0
 800bd88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd8c:	f7f4 fc54 	bl	8000638 <__aeabi_dmul>
 800bd90:	f7f4 ff02 	bl	8000b98 <__aeabi_d2iz>
 800bd94:	f7f4 fbe6 	bl	8000564 <__aeabi_i2d>
 800bd98:	4b47      	ldr	r3, [pc, #284]	@ (800beb8 <__kernel_rem_pio2+0x330>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	460f      	mov	r7, r1
 800bda0:	f7f4 fc4a 	bl	8000638 <__aeabi_dmul>
 800bda4:	4602      	mov	r2, r0
 800bda6:	460b      	mov	r3, r1
 800bda8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdac:	f7f4 fa8c 	bl	80002c8 <__aeabi_dsub>
 800bdb0:	f7f4 fef2 	bl	8000b98 <__aeabi_d2iz>
 800bdb4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bdb8:	f849 0b04 	str.w	r0, [r9], #4
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	f7f4 fa84 	bl	80002cc <__adddf3>
 800bdc4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800bdc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdcc:	e75f      	b.n	800bc8e <__kernel_rem_pio2+0x106>
 800bdce:	d107      	bne.n	800bde0 <__kernel_rem_pio2+0x258>
 800bdd0:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800bdd4:	aa0c      	add	r2, sp, #48	@ 0x30
 800bdd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdda:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800bdde:	e79e      	b.n	800bd1e <__kernel_rem_pio2+0x196>
 800bde0:	4b36      	ldr	r3, [pc, #216]	@ (800bebc <__kernel_rem_pio2+0x334>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	f7f4 feae 	bl	8000b44 <__aeabi_dcmpge>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	d143      	bne.n	800be74 <__kernel_rem_pio2+0x2ec>
 800bdec:	4681      	mov	r9, r0
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	4639      	mov	r1, r7
 800bdf6:	f7f4 fe87 	bl	8000b08 <__aeabi_dcmpeq>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	f000 80c1 	beq.w	800bf82 <__kernel_rem_pio2+0x3fa>
 800be00:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800be04:	2200      	movs	r2, #0
 800be06:	9900      	ldr	r1, [sp, #0]
 800be08:	428b      	cmp	r3, r1
 800be0a:	da70      	bge.n	800beee <__kernel_rem_pio2+0x366>
 800be0c:	2a00      	cmp	r2, #0
 800be0e:	f000 808b 	beq.w	800bf28 <__kernel_rem_pio2+0x3a0>
 800be12:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800be16:	ab0c      	add	r3, sp, #48	@ 0x30
 800be18:	f1ab 0b18 	sub.w	fp, fp, #24
 800be1c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d0f6      	beq.n	800be12 <__kernel_rem_pio2+0x28a>
 800be24:	4658      	mov	r0, fp
 800be26:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800bea0 <__kernel_rem_pio2+0x318>
 800be2a:	f000 f9fd 	bl	800c228 <scalbn>
 800be2e:	f108 0301 	add.w	r3, r8, #1
 800be32:	00da      	lsls	r2, r3, #3
 800be34:	9205      	str	r2, [sp, #20]
 800be36:	ec55 4b10 	vmov	r4, r5, d0
 800be3a:	aa70      	add	r2, sp, #448	@ 0x1c0
 800be3c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800beb4 <__kernel_rem_pio2+0x32c>
 800be40:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800be44:	4646      	mov	r6, r8
 800be46:	f04f 0a00 	mov.w	sl, #0
 800be4a:	2e00      	cmp	r6, #0
 800be4c:	f280 80d1 	bge.w	800bff2 <__kernel_rem_pio2+0x46a>
 800be50:	4644      	mov	r4, r8
 800be52:	2c00      	cmp	r4, #0
 800be54:	f2c0 80ff 	blt.w	800c056 <__kernel_rem_pio2+0x4ce>
 800be58:	4b19      	ldr	r3, [pc, #100]	@ (800bec0 <__kernel_rem_pio2+0x338>)
 800be5a:	461f      	mov	r7, r3
 800be5c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800be5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be62:	9306      	str	r3, [sp, #24]
 800be64:	f04f 0a00 	mov.w	sl, #0
 800be68:	f04f 0b00 	mov.w	fp, #0
 800be6c:	2600      	movs	r6, #0
 800be6e:	eba8 0504 	sub.w	r5, r8, r4
 800be72:	e0e4      	b.n	800c03e <__kernel_rem_pio2+0x4b6>
 800be74:	f04f 0902 	mov.w	r9, #2
 800be78:	e754      	b.n	800bd24 <__kernel_rem_pio2+0x19c>
 800be7a:	f854 3b04 	ldr.w	r3, [r4], #4
 800be7e:	bb0d      	cbnz	r5, 800bec4 <__kernel_rem_pio2+0x33c>
 800be80:	b123      	cbz	r3, 800be8c <__kernel_rem_pio2+0x304>
 800be82:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800be86:	f844 3c04 	str.w	r3, [r4, #-4]
 800be8a:	2301      	movs	r3, #1
 800be8c:	3201      	adds	r2, #1
 800be8e:	461d      	mov	r5, r3
 800be90:	e74f      	b.n	800bd32 <__kernel_rem_pio2+0x1aa>
 800be92:	bf00      	nop
 800be94:	f3af 8000 	nop.w
	...
 800bea4:	3ff00000 	.word	0x3ff00000
 800bea8:	0800cca8 	.word	0x0800cca8
 800beac:	40200000 	.word	0x40200000
 800beb0:	3ff00000 	.word	0x3ff00000
 800beb4:	3e700000 	.word	0x3e700000
 800beb8:	41700000 	.word	0x41700000
 800bebc:	3fe00000 	.word	0x3fe00000
 800bec0:	0800cc68 	.word	0x0800cc68
 800bec4:	1acb      	subs	r3, r1, r3
 800bec6:	e7de      	b.n	800be86 <__kernel_rem_pio2+0x2fe>
 800bec8:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800becc:	ab0c      	add	r3, sp, #48	@ 0x30
 800bece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bed2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bed6:	a90c      	add	r1, sp, #48	@ 0x30
 800bed8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bedc:	e737      	b.n	800bd4e <__kernel_rem_pio2+0x1c6>
 800bede:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800bee2:	ab0c      	add	r3, sp, #48	@ 0x30
 800bee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800beec:	e7f3      	b.n	800bed6 <__kernel_rem_pio2+0x34e>
 800beee:	a90c      	add	r1, sp, #48	@ 0x30
 800bef0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bef4:	3b01      	subs	r3, #1
 800bef6:	430a      	orrs	r2, r1
 800bef8:	e785      	b.n	800be06 <__kernel_rem_pio2+0x27e>
 800befa:	3401      	adds	r4, #1
 800befc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bf00:	2a00      	cmp	r2, #0
 800bf02:	d0fa      	beq.n	800befa <__kernel_rem_pio2+0x372>
 800bf04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bf0a:	eb0d 0503 	add.w	r5, sp, r3
 800bf0e:	9b06      	ldr	r3, [sp, #24]
 800bf10:	aa20      	add	r2, sp, #128	@ 0x80
 800bf12:	4443      	add	r3, r8
 800bf14:	f108 0701 	add.w	r7, r8, #1
 800bf18:	3d98      	subs	r5, #152	@ 0x98
 800bf1a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800bf1e:	4444      	add	r4, r8
 800bf20:	42bc      	cmp	r4, r7
 800bf22:	da04      	bge.n	800bf2e <__kernel_rem_pio2+0x3a6>
 800bf24:	46a0      	mov	r8, r4
 800bf26:	e6a2      	b.n	800bc6e <__kernel_rem_pio2+0xe6>
 800bf28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf2a:	2401      	movs	r4, #1
 800bf2c:	e7e6      	b.n	800befc <__kernel_rem_pio2+0x374>
 800bf2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf30:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bf34:	f7f4 fb16 	bl	8000564 <__aeabi_i2d>
 800bf38:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800c1f8 <__kernel_rem_pio2+0x670>
 800bf3c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bf40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf48:	46b2      	mov	sl, r6
 800bf4a:	f04f 0800 	mov.w	r8, #0
 800bf4e:	9b05      	ldr	r3, [sp, #20]
 800bf50:	4598      	cmp	r8, r3
 800bf52:	dd05      	ble.n	800bf60 <__kernel_rem_pio2+0x3d8>
 800bf54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf58:	3701      	adds	r7, #1
 800bf5a:	eca5 7b02 	vstmia	r5!, {d7}
 800bf5e:	e7df      	b.n	800bf20 <__kernel_rem_pio2+0x398>
 800bf60:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800bf64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bf68:	f7f4 fb66 	bl	8000638 <__aeabi_dmul>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf74:	f7f4 f9aa 	bl	80002cc <__adddf3>
 800bf78:	f108 0801 	add.w	r8, r8, #1
 800bf7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf80:	e7e5      	b.n	800bf4e <__kernel_rem_pio2+0x3c6>
 800bf82:	f1cb 0000 	rsb	r0, fp, #0
 800bf86:	ec47 6b10 	vmov	d0, r6, r7
 800bf8a:	f000 f94d 	bl	800c228 <scalbn>
 800bf8e:	ec55 4b10 	vmov	r4, r5, d0
 800bf92:	4b9b      	ldr	r3, [pc, #620]	@ (800c200 <__kernel_rem_pio2+0x678>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	4620      	mov	r0, r4
 800bf98:	4629      	mov	r1, r5
 800bf9a:	f7f4 fdd3 	bl	8000b44 <__aeabi_dcmpge>
 800bf9e:	b300      	cbz	r0, 800bfe2 <__kernel_rem_pio2+0x45a>
 800bfa0:	4b98      	ldr	r3, [pc, #608]	@ (800c204 <__kernel_rem_pio2+0x67c>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	f7f4 fb46 	bl	8000638 <__aeabi_dmul>
 800bfac:	f7f4 fdf4 	bl	8000b98 <__aeabi_d2iz>
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	f7f4 fad7 	bl	8000564 <__aeabi_i2d>
 800bfb6:	4b92      	ldr	r3, [pc, #584]	@ (800c200 <__kernel_rem_pio2+0x678>)
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f7f4 fb3d 	bl	8000638 <__aeabi_dmul>
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f7f4 f97f 	bl	80002c8 <__aeabi_dsub>
 800bfca:	f7f4 fde5 	bl	8000b98 <__aeabi_d2iz>
 800bfce:	ab0c      	add	r3, sp, #48	@ 0x30
 800bfd0:	f10b 0b18 	add.w	fp, fp, #24
 800bfd4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800bfd8:	f108 0801 	add.w	r8, r8, #1
 800bfdc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800bfe0:	e720      	b.n	800be24 <__kernel_rem_pio2+0x29c>
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	4629      	mov	r1, r5
 800bfe6:	f7f4 fdd7 	bl	8000b98 <__aeabi_d2iz>
 800bfea:	ab0c      	add	r3, sp, #48	@ 0x30
 800bfec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800bff0:	e718      	b.n	800be24 <__kernel_rem_pio2+0x29c>
 800bff2:	ab0c      	add	r3, sp, #48	@ 0x30
 800bff4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bff8:	f7f4 fab4 	bl	8000564 <__aeabi_i2d>
 800bffc:	4622      	mov	r2, r4
 800bffe:	462b      	mov	r3, r5
 800c000:	f7f4 fb1a 	bl	8000638 <__aeabi_dmul>
 800c004:	4652      	mov	r2, sl
 800c006:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c00a:	465b      	mov	r3, fp
 800c00c:	4620      	mov	r0, r4
 800c00e:	4629      	mov	r1, r5
 800c010:	f7f4 fb12 	bl	8000638 <__aeabi_dmul>
 800c014:	3e01      	subs	r6, #1
 800c016:	4604      	mov	r4, r0
 800c018:	460d      	mov	r5, r1
 800c01a:	e716      	b.n	800be4a <__kernel_rem_pio2+0x2c2>
 800c01c:	9906      	ldr	r1, [sp, #24]
 800c01e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c022:	9106      	str	r1, [sp, #24]
 800c024:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c028:	f7f4 fb06 	bl	8000638 <__aeabi_dmul>
 800c02c:	4602      	mov	r2, r0
 800c02e:	460b      	mov	r3, r1
 800c030:	4650      	mov	r0, sl
 800c032:	4659      	mov	r1, fp
 800c034:	f7f4 f94a 	bl	80002cc <__adddf3>
 800c038:	3601      	adds	r6, #1
 800c03a:	4682      	mov	sl, r0
 800c03c:	468b      	mov	fp, r1
 800c03e:	9b00      	ldr	r3, [sp, #0]
 800c040:	429e      	cmp	r6, r3
 800c042:	dc01      	bgt.n	800c048 <__kernel_rem_pio2+0x4c0>
 800c044:	42ae      	cmp	r6, r5
 800c046:	dde9      	ble.n	800c01c <__kernel_rem_pio2+0x494>
 800c048:	ab48      	add	r3, sp, #288	@ 0x120
 800c04a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c04e:	e9c5 ab00 	strd	sl, fp, [r5]
 800c052:	3c01      	subs	r4, #1
 800c054:	e6fd      	b.n	800be52 <__kernel_rem_pio2+0x2ca>
 800c056:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c058:	2b02      	cmp	r3, #2
 800c05a:	dc0b      	bgt.n	800c074 <__kernel_rem_pio2+0x4ec>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	dc35      	bgt.n	800c0cc <__kernel_rem_pio2+0x544>
 800c060:	d059      	beq.n	800c116 <__kernel_rem_pio2+0x58e>
 800c062:	9b02      	ldr	r3, [sp, #8]
 800c064:	f003 0007 	and.w	r0, r3, #7
 800c068:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c06c:	ecbd 8b02 	vpop	{d8}
 800c070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c074:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c076:	2b03      	cmp	r3, #3
 800c078:	d1f3      	bne.n	800c062 <__kernel_rem_pio2+0x4da>
 800c07a:	9b05      	ldr	r3, [sp, #20]
 800c07c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c080:	eb0d 0403 	add.w	r4, sp, r3
 800c084:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c088:	4625      	mov	r5, r4
 800c08a:	46c2      	mov	sl, r8
 800c08c:	f1ba 0f00 	cmp.w	sl, #0
 800c090:	dc69      	bgt.n	800c166 <__kernel_rem_pio2+0x5de>
 800c092:	4645      	mov	r5, r8
 800c094:	2d01      	cmp	r5, #1
 800c096:	f300 8087 	bgt.w	800c1a8 <__kernel_rem_pio2+0x620>
 800c09a:	9c05      	ldr	r4, [sp, #20]
 800c09c:	ab48      	add	r3, sp, #288	@ 0x120
 800c09e:	441c      	add	r4, r3
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	f1b8 0f01 	cmp.w	r8, #1
 800c0a8:	f300 809c 	bgt.w	800c1e4 <__kernel_rem_pio2+0x65c>
 800c0ac:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800c0b0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800c0b4:	f1b9 0f00 	cmp.w	r9, #0
 800c0b8:	f040 80a6 	bne.w	800c208 <__kernel_rem_pio2+0x680>
 800c0bc:	9b04      	ldr	r3, [sp, #16]
 800c0be:	e9c3 5600 	strd	r5, r6, [r3]
 800c0c2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c0c6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c0ca:	e7ca      	b.n	800c062 <__kernel_rem_pio2+0x4da>
 800c0cc:	9d05      	ldr	r5, [sp, #20]
 800c0ce:	ab48      	add	r3, sp, #288	@ 0x120
 800c0d0:	441d      	add	r5, r3
 800c0d2:	4644      	mov	r4, r8
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	2c00      	cmp	r4, #0
 800c0da:	da35      	bge.n	800c148 <__kernel_rem_pio2+0x5c0>
 800c0dc:	f1b9 0f00 	cmp.w	r9, #0
 800c0e0:	d038      	beq.n	800c154 <__kernel_rem_pio2+0x5cc>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0e8:	9c04      	ldr	r4, [sp, #16]
 800c0ea:	e9c4 2300 	strd	r2, r3, [r4]
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c0f6:	f7f4 f8e7 	bl	80002c8 <__aeabi_dsub>
 800c0fa:	ad4a      	add	r5, sp, #296	@ 0x128
 800c0fc:	2401      	movs	r4, #1
 800c0fe:	45a0      	cmp	r8, r4
 800c100:	da2b      	bge.n	800c15a <__kernel_rem_pio2+0x5d2>
 800c102:	f1b9 0f00 	cmp.w	r9, #0
 800c106:	d002      	beq.n	800c10e <__kernel_rem_pio2+0x586>
 800c108:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c10c:	4619      	mov	r1, r3
 800c10e:	9b04      	ldr	r3, [sp, #16]
 800c110:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c114:	e7a5      	b.n	800c062 <__kernel_rem_pio2+0x4da>
 800c116:	9c05      	ldr	r4, [sp, #20]
 800c118:	ab48      	add	r3, sp, #288	@ 0x120
 800c11a:	441c      	add	r4, r3
 800c11c:	2000      	movs	r0, #0
 800c11e:	2100      	movs	r1, #0
 800c120:	f1b8 0f00 	cmp.w	r8, #0
 800c124:	da09      	bge.n	800c13a <__kernel_rem_pio2+0x5b2>
 800c126:	f1b9 0f00 	cmp.w	r9, #0
 800c12a:	d002      	beq.n	800c132 <__kernel_rem_pio2+0x5aa>
 800c12c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c130:	4619      	mov	r1, r3
 800c132:	9b04      	ldr	r3, [sp, #16]
 800c134:	e9c3 0100 	strd	r0, r1, [r3]
 800c138:	e793      	b.n	800c062 <__kernel_rem_pio2+0x4da>
 800c13a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c13e:	f7f4 f8c5 	bl	80002cc <__adddf3>
 800c142:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c146:	e7eb      	b.n	800c120 <__kernel_rem_pio2+0x598>
 800c148:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c14c:	f7f4 f8be 	bl	80002cc <__adddf3>
 800c150:	3c01      	subs	r4, #1
 800c152:	e7c1      	b.n	800c0d8 <__kernel_rem_pio2+0x550>
 800c154:	4602      	mov	r2, r0
 800c156:	460b      	mov	r3, r1
 800c158:	e7c6      	b.n	800c0e8 <__kernel_rem_pio2+0x560>
 800c15a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c15e:	f7f4 f8b5 	bl	80002cc <__adddf3>
 800c162:	3401      	adds	r4, #1
 800c164:	e7cb      	b.n	800c0fe <__kernel_rem_pio2+0x576>
 800c166:	ed35 7b02 	vldmdb	r5!, {d7}
 800c16a:	ed8d 7b00 	vstr	d7, [sp]
 800c16e:	ed95 7b02 	vldr	d7, [r5, #8]
 800c172:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c176:	ec53 2b17 	vmov	r2, r3, d7
 800c17a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c17e:	f7f4 f8a5 	bl	80002cc <__adddf3>
 800c182:	4602      	mov	r2, r0
 800c184:	460b      	mov	r3, r1
 800c186:	4606      	mov	r6, r0
 800c188:	460f      	mov	r7, r1
 800c18a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c18e:	f7f4 f89b 	bl	80002c8 <__aeabi_dsub>
 800c192:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c196:	f7f4 f899 	bl	80002cc <__adddf3>
 800c19a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c19e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c1a2:	e9c5 6700 	strd	r6, r7, [r5]
 800c1a6:	e771      	b.n	800c08c <__kernel_rem_pio2+0x504>
 800c1a8:	ed34 7b02 	vldmdb	r4!, {d7}
 800c1ac:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c1b0:	ec51 0b17 	vmov	r0, r1, d7
 800c1b4:	4652      	mov	r2, sl
 800c1b6:	465b      	mov	r3, fp
 800c1b8:	ed8d 7b00 	vstr	d7, [sp]
 800c1bc:	f7f4 f886 	bl	80002cc <__adddf3>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	4606      	mov	r6, r0
 800c1c6:	460f      	mov	r7, r1
 800c1c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1cc:	f7f4 f87c 	bl	80002c8 <__aeabi_dsub>
 800c1d0:	4652      	mov	r2, sl
 800c1d2:	465b      	mov	r3, fp
 800c1d4:	f7f4 f87a 	bl	80002cc <__adddf3>
 800c1d8:	3d01      	subs	r5, #1
 800c1da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c1de:	e9c4 6700 	strd	r6, r7, [r4]
 800c1e2:	e757      	b.n	800c094 <__kernel_rem_pio2+0x50c>
 800c1e4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c1e8:	f7f4 f870 	bl	80002cc <__adddf3>
 800c1ec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c1f0:	e758      	b.n	800c0a4 <__kernel_rem_pio2+0x51c>
 800c1f2:	bf00      	nop
 800c1f4:	f3af 8000 	nop.w
	...
 800c200:	41700000 	.word	0x41700000
 800c204:	3e700000 	.word	0x3e700000
 800c208:	9b04      	ldr	r3, [sp, #16]
 800c20a:	9a04      	ldr	r2, [sp, #16]
 800c20c:	601d      	str	r5, [r3, #0]
 800c20e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800c212:	605c      	str	r4, [r3, #4]
 800c214:	609f      	str	r7, [r3, #8]
 800c216:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800c21a:	60d3      	str	r3, [r2, #12]
 800c21c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c220:	6110      	str	r0, [r2, #16]
 800c222:	6153      	str	r3, [r2, #20]
 800c224:	e71d      	b.n	800c062 <__kernel_rem_pio2+0x4da>
 800c226:	bf00      	nop

0800c228 <scalbn>:
 800c228:	b570      	push	{r4, r5, r6, lr}
 800c22a:	ec55 4b10 	vmov	r4, r5, d0
 800c22e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c232:	4606      	mov	r6, r0
 800c234:	462b      	mov	r3, r5
 800c236:	b991      	cbnz	r1, 800c25e <scalbn+0x36>
 800c238:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c23c:	4323      	orrs	r3, r4
 800c23e:	d03b      	beq.n	800c2b8 <scalbn+0x90>
 800c240:	4b33      	ldr	r3, [pc, #204]	@ (800c310 <scalbn+0xe8>)
 800c242:	4620      	mov	r0, r4
 800c244:	4629      	mov	r1, r5
 800c246:	2200      	movs	r2, #0
 800c248:	f7f4 f9f6 	bl	8000638 <__aeabi_dmul>
 800c24c:	4b31      	ldr	r3, [pc, #196]	@ (800c314 <scalbn+0xec>)
 800c24e:	429e      	cmp	r6, r3
 800c250:	4604      	mov	r4, r0
 800c252:	460d      	mov	r5, r1
 800c254:	da0f      	bge.n	800c276 <scalbn+0x4e>
 800c256:	a326      	add	r3, pc, #152	@ (adr r3, 800c2f0 <scalbn+0xc8>)
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	e01e      	b.n	800c29c <scalbn+0x74>
 800c25e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c262:	4291      	cmp	r1, r2
 800c264:	d10b      	bne.n	800c27e <scalbn+0x56>
 800c266:	4622      	mov	r2, r4
 800c268:	4620      	mov	r0, r4
 800c26a:	4629      	mov	r1, r5
 800c26c:	f7f4 f82e 	bl	80002cc <__adddf3>
 800c270:	4604      	mov	r4, r0
 800c272:	460d      	mov	r5, r1
 800c274:	e020      	b.n	800c2b8 <scalbn+0x90>
 800c276:	460b      	mov	r3, r1
 800c278:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c27c:	3936      	subs	r1, #54	@ 0x36
 800c27e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c282:	4296      	cmp	r6, r2
 800c284:	dd0d      	ble.n	800c2a2 <scalbn+0x7a>
 800c286:	2d00      	cmp	r5, #0
 800c288:	a11b      	add	r1, pc, #108	@ (adr r1, 800c2f8 <scalbn+0xd0>)
 800c28a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c28e:	da02      	bge.n	800c296 <scalbn+0x6e>
 800c290:	a11b      	add	r1, pc, #108	@ (adr r1, 800c300 <scalbn+0xd8>)
 800c292:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c296:	a318      	add	r3, pc, #96	@ (adr r3, 800c2f8 <scalbn+0xd0>)
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	f7f4 f9cc 	bl	8000638 <__aeabi_dmul>
 800c2a0:	e7e6      	b.n	800c270 <scalbn+0x48>
 800c2a2:	1872      	adds	r2, r6, r1
 800c2a4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c2a8:	428a      	cmp	r2, r1
 800c2aa:	dcec      	bgt.n	800c286 <scalbn+0x5e>
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	dd06      	ble.n	800c2be <scalbn+0x96>
 800c2b0:	f36f 531e 	bfc	r3, #20, #11
 800c2b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c2b8:	ec45 4b10 	vmov	d0, r4, r5
 800c2bc:	bd70      	pop	{r4, r5, r6, pc}
 800c2be:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c2c2:	da08      	bge.n	800c2d6 <scalbn+0xae>
 800c2c4:	2d00      	cmp	r5, #0
 800c2c6:	a10a      	add	r1, pc, #40	@ (adr r1, 800c2f0 <scalbn+0xc8>)
 800c2c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2cc:	dac3      	bge.n	800c256 <scalbn+0x2e>
 800c2ce:	a10e      	add	r1, pc, #56	@ (adr r1, 800c308 <scalbn+0xe0>)
 800c2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2d4:	e7bf      	b.n	800c256 <scalbn+0x2e>
 800c2d6:	3236      	adds	r2, #54	@ 0x36
 800c2d8:	f36f 531e 	bfc	r3, #20, #11
 800c2dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c318 <scalbn+0xf0>)
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	e7d8      	b.n	800c29c <scalbn+0x74>
 800c2ea:	bf00      	nop
 800c2ec:	f3af 8000 	nop.w
 800c2f0:	c2f8f359 	.word	0xc2f8f359
 800c2f4:	01a56e1f 	.word	0x01a56e1f
 800c2f8:	8800759c 	.word	0x8800759c
 800c2fc:	7e37e43c 	.word	0x7e37e43c
 800c300:	8800759c 	.word	0x8800759c
 800c304:	fe37e43c 	.word	0xfe37e43c
 800c308:	c2f8f359 	.word	0xc2f8f359
 800c30c:	81a56e1f 	.word	0x81a56e1f
 800c310:	43500000 	.word	0x43500000
 800c314:	ffff3cb0 	.word	0xffff3cb0
 800c318:	3c900000 	.word	0x3c900000
 800c31c:	00000000 	.word	0x00000000

0800c320 <floor>:
 800c320:	ec51 0b10 	vmov	r0, r1, d0
 800c324:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c32c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c330:	2e13      	cmp	r6, #19
 800c332:	460c      	mov	r4, r1
 800c334:	4605      	mov	r5, r0
 800c336:	4680      	mov	r8, r0
 800c338:	dc34      	bgt.n	800c3a4 <floor+0x84>
 800c33a:	2e00      	cmp	r6, #0
 800c33c:	da17      	bge.n	800c36e <floor+0x4e>
 800c33e:	a332      	add	r3, pc, #200	@ (adr r3, 800c408 <floor+0xe8>)
 800c340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c344:	f7f3 ffc2 	bl	80002cc <__adddf3>
 800c348:	2200      	movs	r2, #0
 800c34a:	2300      	movs	r3, #0
 800c34c:	f7f4 fc04 	bl	8000b58 <__aeabi_dcmpgt>
 800c350:	b150      	cbz	r0, 800c368 <floor+0x48>
 800c352:	2c00      	cmp	r4, #0
 800c354:	da55      	bge.n	800c402 <floor+0xe2>
 800c356:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c35a:	432c      	orrs	r4, r5
 800c35c:	2500      	movs	r5, #0
 800c35e:	42ac      	cmp	r4, r5
 800c360:	4c2b      	ldr	r4, [pc, #172]	@ (800c410 <floor+0xf0>)
 800c362:	bf08      	it	eq
 800c364:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c368:	4621      	mov	r1, r4
 800c36a:	4628      	mov	r0, r5
 800c36c:	e023      	b.n	800c3b6 <floor+0x96>
 800c36e:	4f29      	ldr	r7, [pc, #164]	@ (800c414 <floor+0xf4>)
 800c370:	4137      	asrs	r7, r6
 800c372:	ea01 0307 	and.w	r3, r1, r7
 800c376:	4303      	orrs	r3, r0
 800c378:	d01d      	beq.n	800c3b6 <floor+0x96>
 800c37a:	a323      	add	r3, pc, #140	@ (adr r3, 800c408 <floor+0xe8>)
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	f7f3 ffa4 	bl	80002cc <__adddf3>
 800c384:	2200      	movs	r2, #0
 800c386:	2300      	movs	r3, #0
 800c388:	f7f4 fbe6 	bl	8000b58 <__aeabi_dcmpgt>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d0eb      	beq.n	800c368 <floor+0x48>
 800c390:	2c00      	cmp	r4, #0
 800c392:	bfbe      	ittt	lt
 800c394:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c398:	4133      	asrlt	r3, r6
 800c39a:	18e4      	addlt	r4, r4, r3
 800c39c:	ea24 0407 	bic.w	r4, r4, r7
 800c3a0:	2500      	movs	r5, #0
 800c3a2:	e7e1      	b.n	800c368 <floor+0x48>
 800c3a4:	2e33      	cmp	r6, #51	@ 0x33
 800c3a6:	dd0a      	ble.n	800c3be <floor+0x9e>
 800c3a8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c3ac:	d103      	bne.n	800c3b6 <floor+0x96>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	f7f3 ff8b 	bl	80002cc <__adddf3>
 800c3b6:	ec41 0b10 	vmov	d0, r0, r1
 800c3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3be:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c3c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c3c6:	40df      	lsrs	r7, r3
 800c3c8:	4207      	tst	r7, r0
 800c3ca:	d0f4      	beq.n	800c3b6 <floor+0x96>
 800c3cc:	a30e      	add	r3, pc, #56	@ (adr r3, 800c408 <floor+0xe8>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	f7f3 ff7b 	bl	80002cc <__adddf3>
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	2300      	movs	r3, #0
 800c3da:	f7f4 fbbd 	bl	8000b58 <__aeabi_dcmpgt>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	d0c2      	beq.n	800c368 <floor+0x48>
 800c3e2:	2c00      	cmp	r4, #0
 800c3e4:	da0a      	bge.n	800c3fc <floor+0xdc>
 800c3e6:	2e14      	cmp	r6, #20
 800c3e8:	d101      	bne.n	800c3ee <floor+0xce>
 800c3ea:	3401      	adds	r4, #1
 800c3ec:	e006      	b.n	800c3fc <floor+0xdc>
 800c3ee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	40b3      	lsls	r3, r6
 800c3f6:	441d      	add	r5, r3
 800c3f8:	4545      	cmp	r5, r8
 800c3fa:	d3f6      	bcc.n	800c3ea <floor+0xca>
 800c3fc:	ea25 0507 	bic.w	r5, r5, r7
 800c400:	e7b2      	b.n	800c368 <floor+0x48>
 800c402:	2500      	movs	r5, #0
 800c404:	462c      	mov	r4, r5
 800c406:	e7af      	b.n	800c368 <floor+0x48>
 800c408:	8800759c 	.word	0x8800759c
 800c40c:	7e37e43c 	.word	0x7e37e43c
 800c410:	bff00000 	.word	0xbff00000
 800c414:	000fffff 	.word	0x000fffff

0800c418 <_init>:
 800c418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41a:	bf00      	nop
 800c41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c41e:	bc08      	pop	{r3}
 800c420:	469e      	mov	lr, r3
 800c422:	4770      	bx	lr

0800c424 <_fini>:
 800c424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c426:	bf00      	nop
 800c428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c42a:	bc08      	pop	{r3}
 800c42c:	469e      	mov	lr, r3
 800c42e:	4770      	bx	lr
